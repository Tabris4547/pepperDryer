
reNew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063d8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e00  080064e8  080064e8  000164e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072e8  080072e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080072e8  080072e8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072e8  080072e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072e8  080072e8  000172e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072ec  080072ec  000172ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080072f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000770  20000074  08007364  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  08007364  000207e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014309  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037f5  00000000  00000000  000343e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014c8  00000000  00000000  00037be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000103d  00000000  00000000  000390a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a666  00000000  00000000  0003a0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a5fb  00000000  00000000  0005474b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093416  00000000  00000000  0006ed46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c6c  00000000  00000000  0010215c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00107dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080064d0 	.word	0x080064d0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080064d0 	.word	0x080064d0

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001a2:	2afd      	cmp	r2, #253	; 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	; 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_drsub>:
 80002b8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002bc:	e002      	b.n	80002c4 <__adddf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_dsub>:
 80002c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c4 <__adddf3>:
 80002c4:	b530      	push	{r4, r5, lr}
 80002c6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ca:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ce:	ea94 0f05 	teq	r4, r5
 80002d2:	bf08      	it	eq
 80002d4:	ea90 0f02 	teqeq	r0, r2
 80002d8:	bf1f      	itttt	ne
 80002da:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002de:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002e2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ea:	f000 80e2 	beq.w	80004b2 <__adddf3+0x1ee>
 80002ee:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002f2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f6:	bfb8      	it	lt
 80002f8:	426d      	neglt	r5, r5
 80002fa:	dd0c      	ble.n	8000316 <__adddf3+0x52>
 80002fc:	442c      	add	r4, r5
 80002fe:	ea80 0202 	eor.w	r2, r0, r2
 8000302:	ea81 0303 	eor.w	r3, r1, r3
 8000306:	ea82 0000 	eor.w	r0, r2, r0
 800030a:	ea83 0101 	eor.w	r1, r3, r1
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	2d36      	cmp	r5, #54	; 0x36
 8000318:	bf88      	it	hi
 800031a:	bd30      	pophi	{r4, r5, pc}
 800031c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000320:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000324:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000328:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800032c:	d002      	beq.n	8000334 <__adddf3+0x70>
 800032e:	4240      	negs	r0, r0
 8000330:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000334:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000338:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800033c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000340:	d002      	beq.n	8000348 <__adddf3+0x84>
 8000342:	4252      	negs	r2, r2
 8000344:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000348:	ea94 0f05 	teq	r4, r5
 800034c:	f000 80a7 	beq.w	800049e <__adddf3+0x1da>
 8000350:	f1a4 0401 	sub.w	r4, r4, #1
 8000354:	f1d5 0e20 	rsbs	lr, r5, #32
 8000358:	db0d      	blt.n	8000376 <__adddf3+0xb2>
 800035a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035e:	fa22 f205 	lsr.w	r2, r2, r5
 8000362:	1880      	adds	r0, r0, r2
 8000364:	f141 0100 	adc.w	r1, r1, #0
 8000368:	fa03 f20e 	lsl.w	r2, r3, lr
 800036c:	1880      	adds	r0, r0, r2
 800036e:	fa43 f305 	asr.w	r3, r3, r5
 8000372:	4159      	adcs	r1, r3
 8000374:	e00e      	b.n	8000394 <__adddf3+0xd0>
 8000376:	f1a5 0520 	sub.w	r5, r5, #32
 800037a:	f10e 0e20 	add.w	lr, lr, #32
 800037e:	2a01      	cmp	r2, #1
 8000380:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000384:	bf28      	it	cs
 8000386:	f04c 0c02 	orrcs.w	ip, ip, #2
 800038a:	fa43 f305 	asr.w	r3, r3, r5
 800038e:	18c0      	adds	r0, r0, r3
 8000390:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000398:	d507      	bpl.n	80003aa <__adddf3+0xe6>
 800039a:	f04f 0e00 	mov.w	lr, #0
 800039e:	f1dc 0c00 	rsbs	ip, ip, #0
 80003a2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003aa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ae:	d31b      	bcc.n	80003e8 <__adddf3+0x124>
 80003b0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b4:	d30c      	bcc.n	80003d0 <__adddf3+0x10c>
 80003b6:	0849      	lsrs	r1, r1, #1
 80003b8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003bc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c0:	f104 0401 	add.w	r4, r4, #1
 80003c4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003cc:	f080 809a 	bcs.w	8000504 <__adddf3+0x240>
 80003d0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d4:	bf08      	it	eq
 80003d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003da:	f150 0000 	adcs.w	r0, r0, #0
 80003de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003e2:	ea41 0105 	orr.w	r1, r1, r5
 80003e6:	bd30      	pop	{r4, r5, pc}
 80003e8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003ec:	4140      	adcs	r0, r0
 80003ee:	eb41 0101 	adc.w	r1, r1, r1
 80003f2:	3c01      	subs	r4, #1
 80003f4:	bf28      	it	cs
 80003f6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003fa:	d2e9      	bcs.n	80003d0 <__adddf3+0x10c>
 80003fc:	f091 0f00 	teq	r1, #0
 8000400:	bf04      	itt	eq
 8000402:	4601      	moveq	r1, r0
 8000404:	2000      	moveq	r0, #0
 8000406:	fab1 f381 	clz	r3, r1
 800040a:	bf08      	it	eq
 800040c:	3320      	addeq	r3, #32
 800040e:	f1a3 030b 	sub.w	r3, r3, #11
 8000412:	f1b3 0220 	subs.w	r2, r3, #32
 8000416:	da0c      	bge.n	8000432 <__adddf3+0x16e>
 8000418:	320c      	adds	r2, #12
 800041a:	dd08      	ble.n	800042e <__adddf3+0x16a>
 800041c:	f102 0c14 	add.w	ip, r2, #20
 8000420:	f1c2 020c 	rsb	r2, r2, #12
 8000424:	fa01 f00c 	lsl.w	r0, r1, ip
 8000428:	fa21 f102 	lsr.w	r1, r1, r2
 800042c:	e00c      	b.n	8000448 <__adddf3+0x184>
 800042e:	f102 0214 	add.w	r2, r2, #20
 8000432:	bfd8      	it	le
 8000434:	f1c2 0c20 	rsble	ip, r2, #32
 8000438:	fa01 f102 	lsl.w	r1, r1, r2
 800043c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000440:	bfdc      	itt	le
 8000442:	ea41 010c 	orrle.w	r1, r1, ip
 8000446:	4090      	lslle	r0, r2
 8000448:	1ae4      	subs	r4, r4, r3
 800044a:	bfa2      	ittt	ge
 800044c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000450:	4329      	orrge	r1, r5
 8000452:	bd30      	popge	{r4, r5, pc}
 8000454:	ea6f 0404 	mvn.w	r4, r4
 8000458:	3c1f      	subs	r4, #31
 800045a:	da1c      	bge.n	8000496 <__adddf3+0x1d2>
 800045c:	340c      	adds	r4, #12
 800045e:	dc0e      	bgt.n	800047e <__adddf3+0x1ba>
 8000460:	f104 0414 	add.w	r4, r4, #20
 8000464:	f1c4 0220 	rsb	r2, r4, #32
 8000468:	fa20 f004 	lsr.w	r0, r0, r4
 800046c:	fa01 f302 	lsl.w	r3, r1, r2
 8000470:	ea40 0003 	orr.w	r0, r0, r3
 8000474:	fa21 f304 	lsr.w	r3, r1, r4
 8000478:	ea45 0103 	orr.w	r1, r5, r3
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	f1c4 040c 	rsb	r4, r4, #12
 8000482:	f1c4 0220 	rsb	r2, r4, #32
 8000486:	fa20 f002 	lsr.w	r0, r0, r2
 800048a:	fa01 f304 	lsl.w	r3, r1, r4
 800048e:	ea40 0003 	orr.w	r0, r0, r3
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	fa21 f004 	lsr.w	r0, r1, r4
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f094 0f00 	teq	r4, #0
 80004a2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a6:	bf06      	itte	eq
 80004a8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004ac:	3401      	addeq	r4, #1
 80004ae:	3d01      	subne	r5, #1
 80004b0:	e74e      	b.n	8000350 <__adddf3+0x8c>
 80004b2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b6:	bf18      	it	ne
 80004b8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004bc:	d029      	beq.n	8000512 <__adddf3+0x24e>
 80004be:	ea94 0f05 	teq	r4, r5
 80004c2:	bf08      	it	eq
 80004c4:	ea90 0f02 	teqeq	r0, r2
 80004c8:	d005      	beq.n	80004d6 <__adddf3+0x212>
 80004ca:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ce:	bf04      	itt	eq
 80004d0:	4619      	moveq	r1, r3
 80004d2:	4610      	moveq	r0, r2
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	ea91 0f03 	teq	r1, r3
 80004da:	bf1e      	ittt	ne
 80004dc:	2100      	movne	r1, #0
 80004de:	2000      	movne	r0, #0
 80004e0:	bd30      	popne	{r4, r5, pc}
 80004e2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e6:	d105      	bne.n	80004f4 <__adddf3+0x230>
 80004e8:	0040      	lsls	r0, r0, #1
 80004ea:	4149      	adcs	r1, r1
 80004ec:	bf28      	it	cs
 80004ee:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f8:	bf3c      	itt	cc
 80004fa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fe:	bd30      	popcc	{r4, r5, pc}
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000508:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800050c:	f04f 0000 	mov.w	r0, #0
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000516:	bf1a      	itte	ne
 8000518:	4619      	movne	r1, r3
 800051a:	4610      	movne	r0, r2
 800051c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000520:	bf1c      	itt	ne
 8000522:	460b      	movne	r3, r1
 8000524:	4602      	movne	r2, r0
 8000526:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800052a:	bf06      	itte	eq
 800052c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000530:	ea91 0f03 	teqeq	r1, r3
 8000534:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop

0800053c <__aeabi_ui2d>:
 800053c:	f090 0f00 	teq	r0, #0
 8000540:	bf04      	itt	eq
 8000542:	2100      	moveq	r1, #0
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000550:	f04f 0500 	mov.w	r5, #0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e750      	b.n	80003fc <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_i2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000574:	bf48      	it	mi
 8000576:	4240      	negmi	r0, r0
 8000578:	f04f 0100 	mov.w	r1, #0
 800057c:	e73e      	b.n	80003fc <__adddf3+0x138>
 800057e:	bf00      	nop

08000580 <__aeabi_f2d>:
 8000580:	0042      	lsls	r2, r0, #1
 8000582:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000586:	ea4f 0131 	mov.w	r1, r1, rrx
 800058a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058e:	bf1f      	itttt	ne
 8000590:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000594:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000598:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800059c:	4770      	bxne	lr
 800059e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005a2:	bf08      	it	eq
 80005a4:	4770      	bxeq	lr
 80005a6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005aa:	bf04      	itt	eq
 80005ac:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e71c      	b.n	80003fc <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aed8 	beq.w	80003aa <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6bd      	b.n	80003aa <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_d2uiz>:
 8000630:	004a      	lsls	r2, r1, #1
 8000632:	d211      	bcs.n	8000658 <__aeabi_d2uiz+0x28>
 8000634:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000638:	d211      	bcs.n	800065e <__aeabi_d2uiz+0x2e>
 800063a:	d50d      	bpl.n	8000658 <__aeabi_d2uiz+0x28>
 800063c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000640:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000644:	d40e      	bmi.n	8000664 <__aeabi_d2uiz+0x34>
 8000646:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800064a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800064e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000652:	fa23 f002 	lsr.w	r0, r3, r2
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000662:	d102      	bne.n	800066a <__aeabi_d2uiz+0x3a>
 8000664:	f04f 30ff 	mov.w	r0, #4294967295
 8000668:	4770      	bx	lr
 800066a:	f04f 0000 	mov.w	r0, #0
 800066e:	4770      	bx	lr

08000670 <__aeabi_frsub>:
 8000670:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000674:	e002      	b.n	800067c <__addsf3>
 8000676:	bf00      	nop

08000678 <__aeabi_fsub>:
 8000678:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800067c <__addsf3>:
 800067c:	0042      	lsls	r2, r0, #1
 800067e:	bf1f      	itttt	ne
 8000680:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000684:	ea92 0f03 	teqne	r2, r3
 8000688:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800068c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000690:	d06a      	beq.n	8000768 <__addsf3+0xec>
 8000692:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000696:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800069a:	bfc1      	itttt	gt
 800069c:	18d2      	addgt	r2, r2, r3
 800069e:	4041      	eorgt	r1, r0
 80006a0:	4048      	eorgt	r0, r1
 80006a2:	4041      	eorgt	r1, r0
 80006a4:	bfb8      	it	lt
 80006a6:	425b      	neglt	r3, r3
 80006a8:	2b19      	cmp	r3, #25
 80006aa:	bf88      	it	hi
 80006ac:	4770      	bxhi	lr
 80006ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4240      	negne	r0, r0
 80006be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ca:	bf18      	it	ne
 80006cc:	4249      	negne	r1, r1
 80006ce:	ea92 0f03 	teq	r2, r3
 80006d2:	d03f      	beq.n	8000754 <__addsf3+0xd8>
 80006d4:	f1a2 0201 	sub.w	r2, r2, #1
 80006d8:	fa41 fc03 	asr.w	ip, r1, r3
 80006dc:	eb10 000c 	adds.w	r0, r0, ip
 80006e0:	f1c3 0320 	rsb	r3, r3, #32
 80006e4:	fa01 f103 	lsl.w	r1, r1, r3
 80006e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006ec:	d502      	bpl.n	80006f4 <__addsf3+0x78>
 80006ee:	4249      	negs	r1, r1
 80006f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006f8:	d313      	bcc.n	8000722 <__addsf3+0xa6>
 80006fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006fe:	d306      	bcc.n	800070e <__addsf3+0x92>
 8000700:	0840      	lsrs	r0, r0, #1
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	f102 0201 	add.w	r2, r2, #1
 800070a:	2afe      	cmp	r2, #254	; 0xfe
 800070c:	d251      	bcs.n	80007b2 <__addsf3+0x136>
 800070e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000712:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000716:	bf08      	it	eq
 8000718:	f020 0001 	biceq.w	r0, r0, #1
 800071c:	ea40 0003 	orr.w	r0, r0, r3
 8000720:	4770      	bx	lr
 8000722:	0049      	lsls	r1, r1, #1
 8000724:	eb40 0000 	adc.w	r0, r0, r0
 8000728:	3a01      	subs	r2, #1
 800072a:	bf28      	it	cs
 800072c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000730:	d2ed      	bcs.n	800070e <__addsf3+0x92>
 8000732:	fab0 fc80 	clz	ip, r0
 8000736:	f1ac 0c08 	sub.w	ip, ip, #8
 800073a:	ebb2 020c 	subs.w	r2, r2, ip
 800073e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000742:	bfaa      	itet	ge
 8000744:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000748:	4252      	neglt	r2, r2
 800074a:	4318      	orrge	r0, r3
 800074c:	bfbc      	itt	lt
 800074e:	40d0      	lsrlt	r0, r2
 8000750:	4318      	orrlt	r0, r3
 8000752:	4770      	bx	lr
 8000754:	f092 0f00 	teq	r2, #0
 8000758:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800075c:	bf06      	itte	eq
 800075e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000762:	3201      	addeq	r2, #1
 8000764:	3b01      	subne	r3, #1
 8000766:	e7b5      	b.n	80006d4 <__addsf3+0x58>
 8000768:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800076c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000770:	bf18      	it	ne
 8000772:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000776:	d021      	beq.n	80007bc <__addsf3+0x140>
 8000778:	ea92 0f03 	teq	r2, r3
 800077c:	d004      	beq.n	8000788 <__addsf3+0x10c>
 800077e:	f092 0f00 	teq	r2, #0
 8000782:	bf08      	it	eq
 8000784:	4608      	moveq	r0, r1
 8000786:	4770      	bx	lr
 8000788:	ea90 0f01 	teq	r0, r1
 800078c:	bf1c      	itt	ne
 800078e:	2000      	movne	r0, #0
 8000790:	4770      	bxne	lr
 8000792:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000796:	d104      	bne.n	80007a2 <__addsf3+0x126>
 8000798:	0040      	lsls	r0, r0, #1
 800079a:	bf28      	it	cs
 800079c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80007a0:	4770      	bx	lr
 80007a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80007a6:	bf3c      	itt	cc
 80007a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80007ac:	4770      	bxcc	lr
 80007ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007ba:	4770      	bx	lr
 80007bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007c0:	bf16      	itet	ne
 80007c2:	4608      	movne	r0, r1
 80007c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007c8:	4601      	movne	r1, r0
 80007ca:	0242      	lsls	r2, r0, #9
 80007cc:	bf06      	itte	eq
 80007ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007d2:	ea90 0f01 	teqeq	r0, r1
 80007d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007da:	4770      	bx	lr

080007dc <__aeabi_ui2f>:
 80007dc:	f04f 0300 	mov.w	r3, #0
 80007e0:	e004      	b.n	80007ec <__aeabi_i2f+0x8>
 80007e2:	bf00      	nop

080007e4 <__aeabi_i2f>:
 80007e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007e8:	bf48      	it	mi
 80007ea:	4240      	negmi	r0, r0
 80007ec:	ea5f 0c00 	movs.w	ip, r0
 80007f0:	bf08      	it	eq
 80007f2:	4770      	bxeq	lr
 80007f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007f8:	4601      	mov	r1, r0
 80007fa:	f04f 0000 	mov.w	r0, #0
 80007fe:	e01c      	b.n	800083a <__aeabi_l2f+0x2a>

08000800 <__aeabi_ul2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f04f 0300 	mov.w	r3, #0
 800080c:	e00a      	b.n	8000824 <__aeabi_l2f+0x14>
 800080e:	bf00      	nop

08000810 <__aeabi_l2f>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800081c:	d502      	bpl.n	8000824 <__aeabi_l2f+0x14>
 800081e:	4240      	negs	r0, r0
 8000820:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000824:	ea5f 0c01 	movs.w	ip, r1
 8000828:	bf02      	ittt	eq
 800082a:	4684      	moveq	ip, r0
 800082c:	4601      	moveq	r1, r0
 800082e:	2000      	moveq	r0, #0
 8000830:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000834:	bf08      	it	eq
 8000836:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800083a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800083e:	fabc f28c 	clz	r2, ip
 8000842:	3a08      	subs	r2, #8
 8000844:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000848:	db10      	blt.n	800086c <__aeabi_l2f+0x5c>
 800084a:	fa01 fc02 	lsl.w	ip, r1, r2
 800084e:	4463      	add	r3, ip
 8000850:	fa00 fc02 	lsl.w	ip, r0, r2
 8000854:	f1c2 0220 	rsb	r2, r2, #32
 8000858:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800085c:	fa20 f202 	lsr.w	r2, r0, r2
 8000860:	eb43 0002 	adc.w	r0, r3, r2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f102 0220 	add.w	r2, r2, #32
 8000870:	fa01 fc02 	lsl.w	ip, r1, r2
 8000874:	f1c2 0220 	rsb	r2, r2, #32
 8000878:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800087c:	fa21 f202 	lsr.w	r2, r1, r2
 8000880:	eb43 0002 	adc.w	r0, r3, r2
 8000884:	bf08      	it	eq
 8000886:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800088a:	4770      	bx	lr

0800088c <__aeabi_f2iz>:
 800088c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000890:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000894:	d30f      	bcc.n	80008b6 <__aeabi_f2iz+0x2a>
 8000896:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800089a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800089e:	d90d      	bls.n	80008bc <__aeabi_f2iz+0x30>
 80008a0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80008a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008a8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80008ac:	fa23 f002 	lsr.w	r0, r3, r2
 80008b0:	bf18      	it	ne
 80008b2:	4240      	negne	r0, r0
 80008b4:	4770      	bx	lr
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	4770      	bx	lr
 80008bc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80008c0:	d101      	bne.n	80008c6 <__aeabi_f2iz+0x3a>
 80008c2:	0242      	lsls	r2, r0, #9
 80008c4:	d105      	bne.n	80008d2 <__aeabi_f2iz+0x46>
 80008c6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80008ca:	bf08      	it	eq
 80008cc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80008d0:	4770      	bx	lr
 80008d2:	f04f 0000 	mov.w	r0, #0
 80008d6:	4770      	bx	lr

080008d8 <__aeabi_f2uiz>:
 80008d8:	0042      	lsls	r2, r0, #1
 80008da:	d20e      	bcs.n	80008fa <__aeabi_f2uiz+0x22>
 80008dc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80008e0:	d30b      	bcc.n	80008fa <__aeabi_f2uiz+0x22>
 80008e2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80008e6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80008ea:	d409      	bmi.n	8000900 <__aeabi_f2uiz+0x28>
 80008ec:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80008f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008f4:	fa23 f002 	lsr.w	r0, r3, r2
 80008f8:	4770      	bx	lr
 80008fa:	f04f 0000 	mov.w	r0, #0
 80008fe:	4770      	bx	lr
 8000900:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000904:	d101      	bne.n	800090a <__aeabi_f2uiz+0x32>
 8000906:	0242      	lsls	r2, r0, #9
 8000908:	d102      	bne.n	8000910 <__aeabi_f2uiz+0x38>
 800090a:	f04f 30ff 	mov.w	r0, #4294967295
 800090e:	4770      	bx	lr
 8000910:	f04f 0000 	mov.w	r0, #0
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <isTemperSensorInit>:
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);	
}

#else
uint16_t isTemperSensorInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
	return m_init;
 800091c:	4b03      	ldr	r3, [pc, #12]	; (800092c <isTemperSensorInit+0x14>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b29b      	uxth	r3, r3
}
 8000922:	4618      	mov	r0, r3
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	200000b4 	.word	0x200000b4

08000930 <isBusy>:

uint8_t isBusy()
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	return isBusyLine();
 8000934:	f000 fa2a 	bl	8000d8c <isBusyLine>
 8000938:	4603      	mov	r3, r0
}
 800093a:	4618      	mov	r0, r3
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <Ds18b20_Init_simple>:
bool Ds18b20_Init_simple(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	m_init=0;
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <Ds18b20_Init_simple+0x78>)
 8000946:	2200      	movs	r2, #0
 8000948:	701a      	strb	r2, [r3, #0]
	OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 800094a:	2201      	movs	r2, #1
 800094c:	491b      	ldr	r1, [pc, #108]	; (80009bc <Ds18b20_Init_simple+0x7c>)
 800094e:	481c      	ldr	r0, [pc, #112]	; (80009c0 <Ds18b20_Init_simple+0x80>)
 8000950:	f000 fa8e 	bl	8000e70 <OneWire_Init>
//	OneWireDevices = OneWire_First(&OneWire);//주소를 가져오는 동작

	OneWire.ROM_NO[0]=0x28;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <Ds18b20_Init_simple+0x80>)
 8000956:	2228      	movs	r2, #40	; 0x28
 8000958:	725a      	strb	r2, [r3, #9]
	OneWire.ROM_NO[1]=0x4a;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <Ds18b20_Init_simple+0x80>)
 800095c:	224a      	movs	r2, #74	; 0x4a
 800095e:	729a      	strb	r2, [r3, #10]
	OneWire.ROM_NO[2]=0x20;
 8000960:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <Ds18b20_Init_simple+0x80>)
 8000962:	2220      	movs	r2, #32
 8000964:	72da      	strb	r2, [r3, #11]
	OneWire.ROM_NO[3]=0x97;
 8000966:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <Ds18b20_Init_simple+0x80>)
 8000968:	2297      	movs	r2, #151	; 0x97
 800096a:	731a      	strb	r2, [r3, #12]
	OneWire.ROM_NO[4]=0x94;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <Ds18b20_Init_simple+0x80>)
 800096e:	2294      	movs	r2, #148	; 0x94
 8000970:	735a      	strb	r2, [r3, #13]
	OneWire.ROM_NO[5]=0x4;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <Ds18b20_Init_simple+0x80>)
 8000974:	2204      	movs	r2, #4
 8000976:	739a      	strb	r2, [r3, #14]
	OneWire.ROM_NO[6]=0x3;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <Ds18b20_Init_simple+0x80>)
 800097a:	2203      	movs	r2, #3
 800097c:	73da      	strb	r2, [r3, #15]
	OneWire.ROM_NO[7]=0x54;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <Ds18b20_Init_simple+0x80>)
 8000980:	2254      	movs	r2, #84	; 0x54
 8000982:	741a      	strb	r2, [r3, #16]

	OneWire_GetFullROM(&OneWire, temperSensor.Address);
 8000984:	490f      	ldr	r1, [pc, #60]	; (80009c4 <Ds18b20_Init_simple+0x84>)
 8000986:	480e      	ldr	r0, [pc, #56]	; (80009c0 <Ds18b20_Init_simple+0x80>)
 8000988:	f000 fbc4 	bl	8001114 <OneWire_GetFullROM>

	Ds18b20Delay(50);
 800098c:	2032      	movs	r0, #50	; 0x32
 800098e:	f001 fe4b 	bl	8002628 <HAL_Delay>
    DS18B20_SetResolution(&OneWire, temperSensor.Address, DS18B20_Resolution_12bits);
 8000992:	220c      	movs	r2, #12
 8000994:	490b      	ldr	r1, [pc, #44]	; (80009c4 <Ds18b20_Init_simple+0x84>)
 8000996:	480a      	ldr	r0, [pc, #40]	; (80009c0 <Ds18b20_Init_simple+0x80>)
 8000998:	f000 f816 	bl	80009c8 <DS18B20_SetResolution>
    Ds18b20Delay(50);
 800099c:	2032      	movs	r0, #50	; 0x32
 800099e:	f001 fe43 	bl	8002628 <HAL_Delay>
    DS18B20_DisableAlarmTemperature(&OneWire,  temperSensor.Address);
 80009a2:	4908      	ldr	r1, [pc, #32]	; (80009c4 <Ds18b20_Init_simple+0x84>)
 80009a4:	4806      	ldr	r0, [pc, #24]	; (80009c0 <Ds18b20_Init_simple+0x80>)
 80009a6:	f000 f8a7 	bl	8000af8 <DS18B20_DisableAlarmTemperature>



	m_init=1;
 80009aa:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <Ds18b20_Init_simple+0x78>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]

	return true;
 80009b0:	2301      	movs	r3, #1

}
 80009b2:	4618      	mov	r0, r3
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200000b4 	.word	0x200000b4
 80009bc:	40010c00 	.word	0x40010c00
 80009c0:	200000a0 	.word	0x200000a0
 80009c4:	20000090 	.word	0x20000090

080009c8 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	4613      	mov	r3, r2
 80009d4:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM)) 
 80009d6:	68b8      	ldr	r0, [r7, #8]
 80009d8:	f000 f87e 	bl	8000ad8 <DS18B20_Is>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d101      	bne.n	80009e6 <DS18B20_SetResolution+0x1e>
		return 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	e074      	b.n	8000ad0 <DS18B20_SetResolution+0x108>
	
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80009e6:	68f8      	ldr	r0, [r7, #12]
 80009e8:	f000 fa76 	bl	8000ed8 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80009ec:	68b9      	ldr	r1, [r7, #8]
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f000 fb71 	bl	80010d6 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 80009f4:	21be      	movs	r1, #190	; 0xbe
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f000 fb2e 	bl	8001058 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f000 fb49 	bl	8001094 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f000 fb46 	bl	8001094 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8000a08:	68f8      	ldr	r0, [r7, #12]
 8000a0a:	f000 fb43 	bl	8001094 <OneWire_ReadByte>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f000 fb3e 	bl	8001094 <OneWire_ReadByte>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 8000a1c:	68f8      	ldr	r0, [r7, #12]
 8000a1e:	f000 fb39 	bl	8001094 <OneWire_ReadByte>
 8000a22:	4603      	mov	r3, r0
 8000a24:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == DS18B20_Resolution_9bits) 
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b09      	cmp	r3, #9
 8000a2a:	d108      	bne.n	8000a3e <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000a2c:	7dfb      	ldrb	r3, [r7, #23]
 8000a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a32:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000a34:	7dfb      	ldrb	r3, [r7, #23]
 8000a36:	f023 0320 	bic.w	r3, r3, #32
 8000a3a:	75fb      	strb	r3, [r7, #23]
 8000a3c:	e022      	b.n	8000a84 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b0a      	cmp	r3, #10
 8000a42:	d108      	bne.n	8000a56 <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8000a44:	7dfb      	ldrb	r3, [r7, #23]
 8000a46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a4a:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000a4c:	7dfb      	ldrb	r3, [r7, #23]
 8000a4e:	f043 0320 	orr.w	r3, r3, #32
 8000a52:	75fb      	strb	r3, [r7, #23]
 8000a54:	e016      	b.n	8000a84 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b0b      	cmp	r3, #11
 8000a5a:	d108      	bne.n	8000a6e <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000a5c:	7dfb      	ldrb	r3, [r7, #23]
 8000a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a62:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8000a64:	7dfb      	ldrb	r3, [r7, #23]
 8000a66:	f023 0320 	bic.w	r3, r3, #32
 8000a6a:	75fb      	strb	r3, [r7, #23]
 8000a6c:	e00a      	b.n	8000a84 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	2b0c      	cmp	r3, #12
 8000a72:	d107      	bne.n	8000a84 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a7a:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8000a7c:	7dfb      	ldrb	r3, [r7, #23]
 8000a7e:	f043 0320 	orr.w	r3, r3, #32
 8000a82:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	f000 fa27 	bl	8000ed8 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000a8a:	68b9      	ldr	r1, [r7, #8]
 8000a8c:	68f8      	ldr	r0, [r7, #12]
 8000a8e:	f000 fb22 	bl	80010d6 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8000a92:	214e      	movs	r1, #78	; 0x4e
 8000a94:	68f8      	ldr	r0, [r7, #12]
 8000a96:	f000 fadf 	bl	8001058 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8000a9a:	7dbb      	ldrb	r3, [r7, #22]
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f000 fada 	bl	8001058 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8000aa4:	7d7b      	ldrb	r3, [r7, #21]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	68f8      	ldr	r0, [r7, #12]
 8000aaa:	f000 fad5 	bl	8001058 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8000aae:	7dfb      	ldrb	r3, [r7, #23]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f000 fad0 	bl	8001058 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000ab8:	68f8      	ldr	r0, [r7, #12]
 8000aba:	f000 fa0d 	bl	8000ed8 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000abe:	68b9      	ldr	r1, [r7, #8]
 8000ac0:	68f8      	ldr	r0, [r7, #12]
 8000ac2:	f000 fb08 	bl	80010d6 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000ac6:	2148      	movs	r1, #72	; 0x48
 8000ac8:	68f8      	ldr	r0, [r7, #12]
 8000aca:	f000 fac5 	bl	8001058 <OneWire_WriteByte>
	
	return 1;
 8000ace:	2301      	movs	r3, #1
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) 
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) 
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b28      	cmp	r3, #40	; 0x28
 8000ae6:	d101      	bne.n	8000aec <DS18B20_Is+0x14>
		return 1;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	e000      	b.n	8000aee <DS18B20_Is+0x16>
	
	return 0;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <DS18B20_DisableAlarmTemperature>:
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
 8000b02:	6838      	ldr	r0, [r7, #0]
 8000b04:	f7ff ffe8 	bl	8000ad8 <DS18B20_Is>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d101      	bne.n	8000b12 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e049      	b.n	8000ba6 <DS18B20_DisableAlarmTemperature+0xae>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 f9e0 	bl	8000ed8 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000b18:	6839      	ldr	r1, [r7, #0]
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f000 fadb 	bl	80010d6 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000b20:	21be      	movs	r1, #190	; 0xbe
 8000b22:	6878      	ldr	r0, [r7, #4]
 8000b24:	f000 fa98 	bl	8001058 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f000 fab3 	bl	8001094 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 fab0 	bl	8001094 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f000 faad 	bl	8001094 <OneWire_ReadByte>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 faa8 	bl	8001094 <OneWire_ReadByte>
 8000b44:	4603      	mov	r3, r0
 8000b46:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f000 faa3 	bl	8001094 <OneWire_ReadByte>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	737b      	strb	r3, [r7, #13]
	
	th = 125;
 8000b52:	237d      	movs	r3, #125	; 0x7d
 8000b54:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8000b56:	23c9      	movs	r3, #201	; 0xc9
 8000b58:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 f9bc 	bl	8000ed8 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000b60:	6839      	ldr	r1, [r7, #0]
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f000 fab7 	bl	80010d6 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8000b68:	214e      	movs	r1, #78	; 0x4e
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f000 fa74 	bl	8001058 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
 8000b72:	4619      	mov	r1, r3
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 fa6f 	bl	8001058 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8000b7a:	7bbb      	ldrb	r3, [r7, #14]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f000 fa6a 	bl	8001058 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8000b84:	7b7b      	ldrb	r3, [r7, #13]
 8000b86:	4619      	mov	r1, r3
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f000 fa65 	bl	8001058 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f000 f9a2 	bl	8000ed8 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000b94:	6839      	ldr	r1, [r7, #0]
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f000 fa9d 	bl	80010d6 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000b9c:	2148      	movs	r1, #72	; 0x48
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f000 fa5a 	bl	8001058 <OneWire_WriteByte>
	
	return 1;
 8000ba4:	2301      	movs	r3, #1
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3710      	adds	r7, #16
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <getCurrentTemper>:
{
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
}
float getCurrentTemper()
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

	return temperSensor.Temperature;
 8000bb4:	4b02      	ldr	r3, [pc, #8]	; (8000bc0 <getCurrentTemper+0x10>)
 8000bb6:	689b      	ldr	r3, [r3, #8]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	20000090 	.word	0x20000090

08000bc4 <opening>:
#include "ssd1306.h"
#include "controlType.h"

static uint8_t m_toggle=0;
static uint8_t m_toggle_counter=0;
void opening() {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
//
//	SSD1306_Clear();
//	SSD1306_DrawBitmap(0, 0, ojtubelog4, 128, 64, 1);
//	SSD1306_UpdateScreen();
//	HAL_Delay(5000);
	printMain();
 8000bc8:	f000 f802 	bl	8000bd0 <printMain>


}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <printMain>:

void printMain() {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	SSD1306_InvertDisplay(0);
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 fab9 	bl	800114c <SSD1306_InvertDisplay>
	SSD1306_Clear();
 8000bda:	f000 fcf0 	bl	80015be <SSD1306_Clear>

	SSD1306_GotoXY(1, 0);
 8000bde:	2100      	movs	r1, #0
 8000be0:	2001      	movs	r0, #1
 8000be2:	f000 fc31 	bl	8001448 <SSD1306_GotoXY>
	SSD1306_Puts("Temper Work", &Font_11x18, 1);
 8000be6:	2201      	movs	r2, #1
 8000be8:	4911      	ldr	r1, [pc, #68]	; (8000c30 <printMain+0x60>)
 8000bea:	4812      	ldr	r0, [pc, #72]	; (8000c34 <printMain+0x64>)
 8000bec:	f000 fcc2 	bl	8001574 <SSD1306_Puts>
	SSD1306_GotoXY(0, 15);
 8000bf0:	210f      	movs	r1, #15
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f000 fc28 	bl	8001448 <SSD1306_GotoXY>
	SSD1306_Puts("----------", &Font_11x18, 1);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	490d      	ldr	r1, [pc, #52]	; (8000c30 <printMain+0x60>)
 8000bfc:	480e      	ldr	r0, [pc, #56]	; (8000c38 <printMain+0x68>)
 8000bfe:	f000 fcb9 	bl	8001574 <SSD1306_Puts>
	SSD1306_GotoXY(14, 38);
 8000c02:	2126      	movs	r1, #38	; 0x26
 8000c04:	200e      	movs	r0, #14
 8000c06:	f000 fc1f 	bl	8001448 <SSD1306_GotoXY>
	SSD1306_Puts("25.0", &Font_11x18, 1);
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4908      	ldr	r1, [pc, #32]	; (8000c30 <printMain+0x60>)
 8000c0e:	480b      	ldr	r0, [pc, #44]	; (8000c3c <printMain+0x6c>)
 8000c10:	f000 fcb0 	bl	8001574 <SSD1306_Puts>
	SSD1306_GotoXY(81, 38);
 8000c14:	2126      	movs	r1, #38	; 0x26
 8000c16:	2051      	movs	r0, #81	; 0x51
 8000c18:	f000 fc16 	bl	8001448 <SSD1306_GotoXY>
	SSD1306_Puts("OFF", &Font_11x18, 1);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4904      	ldr	r1, [pc, #16]	; (8000c30 <printMain+0x60>)
 8000c20:	4807      	ldr	r0, [pc, #28]	; (8000c40 <printMain+0x70>)
 8000c22:	f000 fca7 	bl	8001574 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000c26:	f000 fb6b 	bl	8001300 <SSD1306_UpdateScreen>


}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000000 	.word	0x20000000
 8000c34:	080064e8 	.word	0x080064e8
 8000c38:	080064f4 	.word	0x080064f4
 8000c3c:	08006500 	.word	0x08006500
 8000c40:	08006508 	.word	0x08006508

08000c44 <printBackground>:

void printBackground() {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	SSD1306_InvertDisplay(0);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f000 fa7f 	bl	800114c <SSD1306_InvertDisplay>
	SSD1306_Clear();
 8000c4e:	f000 fcb6 	bl	80015be <SSD1306_Clear>

	SSD1306_GotoXY(1, 0);
 8000c52:	2100      	movs	r1, #0
 8000c54:	2001      	movs	r0, #1
 8000c56:	f000 fbf7 	bl	8001448 <SSD1306_GotoXY>
	SSD1306_Puts("Temper Work", &Font_11x18, 1);
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4907      	ldr	r1, [pc, #28]	; (8000c7c <printBackground+0x38>)
 8000c5e:	4808      	ldr	r0, [pc, #32]	; (8000c80 <printBackground+0x3c>)
 8000c60:	f000 fc88 	bl	8001574 <SSD1306_Puts>
	SSD1306_GotoXY(0, 15);
 8000c64:	210f      	movs	r1, #15
 8000c66:	2000      	movs	r0, #0
 8000c68:	f000 fbee 	bl	8001448 <SSD1306_GotoXY>
	SSD1306_Puts("----------", &Font_11x18, 1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	4903      	ldr	r1, [pc, #12]	; (8000c7c <printBackground+0x38>)
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <printBackground+0x40>)
 8000c72:	f000 fc7f 	bl	8001574 <SSD1306_Puts>




}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000000 	.word	0x20000000
 8000c80:	080064e8 	.word	0x080064e8
 8000c84:	080064f4 	.word	0x080064f4

08000c88 <printTemper>:

void printTemper(int temper) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09c      	sub	sp, #112	; 0x70
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	SSD1306_GotoXY(14, 38);
 8000c90:	2126      	movs	r1, #38	; 0x26
 8000c92:	200e      	movs	r0, #14
 8000c94:	f000 fbd8 	bl	8001448 <SSD1306_GotoXY>
	char temper_str[100]="";
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	2260      	movs	r2, #96	; 0x60
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f004 ff81 	bl	8005bac <memset>
	sprintf(temper_str,"%2d.0",temper);
 8000caa:	f107 030c 	add.w	r3, r7, #12
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <printTemper+0x4c>)
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f004 ff5a 	bl	8005b6c <siprintf>
	SSD1306_Puts(temper_str, &Font_11x18, 1);
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	4906      	ldr	r1, [pc, #24]	; (8000cd8 <printTemper+0x50>)
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 fc57 	bl	8001574 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000cc6:	f000 fb1b 	bl	8001300 <SSD1306_UpdateScreen>


}
 8000cca:	bf00      	nop
 8000ccc:	3770      	adds	r7, #112	; 0x70
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	0800650c 	.word	0x0800650c
 8000cd8:	20000000 	.word	0x20000000

08000cdc <printHeaterState>:



}

void printHeaterState(ON_OFF_t onOff) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71fb      	strb	r3, [r7, #7]

	SSD1306_GotoXY(81, 38);
 8000ce6:	2126      	movs	r1, #38	; 0x26
 8000ce8:	2051      	movs	r0, #81	; 0x51
 8000cea:	f000 fbad 	bl	8001448 <SSD1306_GotoXY>
	if (onOff == ON_t) {
 8000cee:	79fb      	ldrb	r3, [r7, #7]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d106      	bne.n	8000d02 <printHeaterState+0x26>
		SSD1306_Puts("ON", &Font_11x18, 1);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	490a      	ldr	r1, [pc, #40]	; (8000d20 <printHeaterState+0x44>)
 8000cf8:	480a      	ldr	r0, [pc, #40]	; (8000d24 <printHeaterState+0x48>)
 8000cfa:	f000 fc3b 	bl	8001574 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000cfe:	f000 faff 	bl	8001300 <SSD1306_UpdateScreen>
	}
	if (onOff == OFF_t) {
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d106      	bne.n	8000d16 <printHeaterState+0x3a>
		SSD1306_Puts("OFF", &Font_11x18, 1);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	4905      	ldr	r1, [pc, #20]	; (8000d20 <printHeaterState+0x44>)
 8000d0c:	4806      	ldr	r0, [pc, #24]	; (8000d28 <printHeaterState+0x4c>)
 8000d0e:	f000 fc31 	bl	8001574 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000d12:	f000 faf5 	bl	8001300 <SSD1306_UpdateScreen>
	}



}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000000 	.word	0x20000000
 8000d24:	08006514 	.word	0x08006514
 8000d28:	08006508 	.word	0x08006508

08000d2c <toggleScreen>:

void toggleScreen()
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	if (m_toggle_counter > 0) {
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <toggleScreen+0x58>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d019      	beq.n	8000d6c <toggleScreen+0x40>
		if (!m_toggle) {
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <toggleScreen+0x5c>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d107      	bne.n	8000d50 <toggleScreen+0x24>
			SSD1306_Clear();
 8000d40:	f000 fc3d 	bl	80015be <SSD1306_Clear>
			SSD1306_UpdateScreen();
 8000d44:	f000 fadc 	bl	8001300 <SSD1306_UpdateScreen>
			m_toggle = 1;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <toggleScreen+0x5c>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	701a      	strb	r2, [r3, #0]
 8000d4e:	e00d      	b.n	8000d6c <toggleScreen+0x40>
		} else {
			printBackground();
 8000d50:	f7ff ff78 	bl	8000c44 <printBackground>
			printTemper(getFixedTemper());
 8000d54:	f000 fe56 	bl	8001a04 <getFixedTemper>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff94 	bl	8000c88 <printTemper>
			printHeaterState(OFF_t);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f7ff ffbb 	bl	8000cdc <printHeaterState>
			m_toggle = 0;
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <toggleScreen+0x5c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
		}
	}
	if (m_toggle_counter > 0) {
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <toggleScreen+0x58>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d005      	beq.n	8000d80 <toggleScreen+0x54>
		m_toggle_counter--;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <toggleScreen+0x58>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b01      	ldr	r3, [pc, #4]	; (8000d84 <toggleScreen+0x58>)
 8000d7e:	701a      	strb	r2, [r3, #0]
	}
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200000b6 	.word	0x200000b6
 8000d88:	200000b5 	.word	0x200000b5

08000d8c <isBusyLine>:
#include "onewire.h"
#include "ds18b20Config.h"
//#include "tim.h"
static uint8_t m_busy_line=0;
uint8_t isBusyLine()
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	return  m_busy_line;
 8000d90:	4b02      	ldr	r3, [pc, #8]	; (8000d9c <isBusyLine+0x10>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	200000b7 	.word	0x200000b7

08000da0 <ONEWIRE_DELAY>:

void ONEWIRE_DELAY(uint16_t time_us)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <ONEWIRE_DELAY+0x2c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000db2:	bf00      	nop
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <ONEWIRE_DELAY+0x2c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dba:	88fb      	ldrh	r3, [r7, #6]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d9f9      	bls.n	8000db4 <ONEWIRE_DELAY+0x14>
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr
 8000dcc:	200005b0 	.word	0x200005b0

08000dd0 <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	889b      	ldrh	r3, [r3, #4]
 8000ddc:	041a      	lsls	r2, r3, #16
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	611a      	str	r2, [r3, #16]
}	
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr

08000dee <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b083      	sub	sp, #12
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	889a      	ldrh	r2, [r3, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	611a      	str	r2, [r3, #16]
}	
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bc80      	pop	{r7}
 8000e08:	4770      	bx	lr

08000e0a <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	889b      	ldrh	r3, [r3, #4]
 8000e22:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f107 0208 	add.w	r2, r7, #8
 8000e2c:	4611      	mov	r1, r2
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 fc52 	bl	80036d8 <HAL_GPIO_Init>
}	
 8000e34:	bf00      	nop
 8000e36:	3718      	adds	r7, #24
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000e44:	2311      	movs	r3, #17
 8000e46:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	889b      	ldrh	r3, [r3, #4]
 8000e54:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f107 0208 	add.w	r2, r7, #8
 8000e5e:	4611      	mov	r1, r2
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 fc39 	bl	80036d8 <HAL_GPIO_Init>

}
 8000e66:	bf00      	nop
 8000e68:	3718      	adds	r7, #24
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 
{	
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	80fb      	strh	r3, [r7, #6]
	m_busy_line=0;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <OneWire_Init+0x60>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 8000e84:	4813      	ldr	r0, [pc, #76]	; (8000ed4 <OneWire_Init+0x64>)
 8000e86:	f004 f993 	bl	80051b0 <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	68ba      	ldr	r2, [r7, #8]
 8000e8e:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	88fa      	ldrh	r2, [r7, #6]
 8000e94:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8000e96:	68f8      	ldr	r0, [r7, #12]
 8000e98:	f7ff ffd0 	bl	8000e3c <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8000e9c:	68f8      	ldr	r0, [r7, #12]
 8000e9e:	f7ff ffa6 	bl	8000dee <ONEWIRE_HIGH>
	OneWireDelay(1000);
 8000ea2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea6:	f001 fbbf 	bl	8002628 <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	f7ff ff90 	bl	8000dd0 <ONEWIRE_LOW>
	OneWireDelay(1000);
 8000eb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eb4:	f001 fbb8 	bl	8002628 <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8000eb8:	68f8      	ldr	r0, [r7, #12]
 8000eba:	f7ff ff98 	bl	8000dee <ONEWIRE_HIGH>
	OneWireDelay(2000);
 8000ebe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ec2:	f001 fbb1 	bl	8002628 <HAL_Delay>
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200000b7 	.word	0x200000b7
 8000ed4:	200005b0 	.word	0x200005b0

08000ed8 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff75 	bl	8000dd0 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffa8 	bl	8000e3c <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 8000eec:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000ef0:	f7ff ff56 	bl	8000da0 <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8000ef4:	2014      	movs	r0, #20
 8000ef6:	f7ff ff53 	bl	8000da0 <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	m_busy_line=1;
 8000efa:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <OneWire_Reset+0x60>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]

	ONEWIRE_INPUT(OneWireStruct);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff82 	bl	8000e0a <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8000f06:	2046      	movs	r0, #70	; 0x46
 8000f08:	f7ff ff4a 	bl	8000da0 <ONEWIRE_DELAY>

	m_busy_line=0;
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <OneWire_Reset+0x60>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	889b      	ldrh	r3, [r3, #4]
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	f002 fd5f 	bl	80039e0 <HAL_GPIO_ReadPin>
 8000f22:	4603      	mov	r3, r0
 8000f24:	73fb      	strb	r3, [r7, #15]
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8000f26:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 8000f2a:	f7ff ff39 	bl	8000da0 <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200000b7 	.word	0x200000b7

08000f3c <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
	m_busy_line=1;
 8000f48:	4b26      	ldr	r3, [pc, #152]	; (8000fe4 <OneWire_WriteBit+0xa8>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
	if (bit) 
 8000f4e:	78fb      	ldrb	r3, [r7, #3]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d024      	beq.n	8000f9e <OneWire_WriteBit+0x62>
	{
		/* Set line low */
		m_busy_line=1;
 8000f54:	4b23      	ldr	r3, [pc, #140]	; (8000fe4 <OneWire_WriteBit+0xa8>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff38 	bl	8000dd0 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff6b 	bl	8000e3c <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 8000f66:	200a      	movs	r0, #10
 8000f68:	f7ff ff1a 	bl	8000da0 <ONEWIRE_DELAY>
		m_busy_line=0;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	; (8000fe4 <OneWire_WriteBit+0xa8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]

		
		/* Bit high */
		m_busy_line=1;
 8000f72:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <OneWire_WriteBit+0xa8>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff46 	bl	8000e0a <ONEWIRE_INPUT>
		m_busy_line=0;
 8000f7e:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <OneWire_WriteBit+0xa8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
		
		/* Wait for 55 us and release the line */

		ONEWIRE_DELAY(55);
 8000f84:	2037      	movs	r0, #55	; 0x37
 8000f86:	f7ff ff0b 	bl	8000da0 <ONEWIRE_DELAY>
		m_busy_line=1;
 8000f8a:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <OneWire_WriteBit+0xa8>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff3a 	bl	8000e0a <ONEWIRE_INPUT>
		m_busy_line=0;
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <OneWire_WriteBit+0xa8>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
		m_busy_line=0;
	}


}
 8000f9c:	e01d      	b.n	8000fda <OneWire_WriteBit+0x9e>
		m_busy_line=1;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <OneWire_WriteBit+0xa8>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ff13 	bl	8000dd0 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ff46 	bl	8000e3c <ONEWIRE_OUTPUT>
		m_busy_line=0;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <OneWire_WriteBit+0xa8>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
		ONEWIRE_DELAY(65);
 8000fb6:	2041      	movs	r0, #65	; 0x41
 8000fb8:	f7ff fef2 	bl	8000da0 <ONEWIRE_DELAY>
		m_busy_line=1;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <OneWire_WriteBit+0xa8>)
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff ff21 	bl	8000e0a <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 8000fc8:	2005      	movs	r0, #5
 8000fca:	f7ff fee9 	bl	8000da0 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff1b 	bl	8000e0a <ONEWIRE_INPUT>
		m_busy_line=0;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <OneWire_WriteBit+0xa8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200000b7 	.word	0x200000b7

08000fe8 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]
	
	/* Line low */
	m_busy_line=1;
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <OneWire_ReadBit+0x6c>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	701a      	strb	r2, [r3, #0]
	ONEWIRE_LOW(OneWireStruct);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff fee8 	bl	8000dd0 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f7ff ff1b 	bl	8000e3c <ONEWIRE_OUTPUT>

	ONEWIRE_DELAY(2);
 8001006:	2002      	movs	r0, #2
 8001008:	f7ff feca 	bl	8000da0 <ONEWIRE_DELAY>
	m_busy_line=0;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <OneWire_ReadBit+0x6c>)
 800100e:	2200      	movs	r2, #0
 8001010:	701a      	strb	r2, [r3, #0]
	/* Release line */
	m_busy_line=1;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <OneWire_ReadBit+0x6c>)
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
	ONEWIRE_INPUT(OneWireStruct);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff fef6 	bl	8000e0a <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 800101e:	200a      	movs	r0, #10
 8001020:	f7ff febe 	bl	8000da0 <ONEWIRE_DELAY>
	m_busy_line=0;
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <OneWire_ReadBit+0x6c>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]

	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	889b      	ldrh	r3, [r3, #4]
 8001032:	4619      	mov	r1, r3
 8001034:	4610      	mov	r0, r2
 8001036:	f002 fcd3 	bl	80039e0 <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <OneWire_ReadBit+0x5c>
		/* Bit is HIGH */
		bit = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */

	ONEWIRE_DELAY(50);
 8001044:	2032      	movs	r0, #50	; 0x32
 8001046:	f7ff feab 	bl	8000da0 <ONEWIRE_DELAY>
	/* Return bit value */
	return bit;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200000b7 	.word	0x200000b7

08001058 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8001064:	2308      	movs	r3, #8
 8001066:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8001068:	e00a      	b.n	8001080 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 800106a:	78fb      	ldrb	r3, [r7, #3]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	b2db      	uxtb	r3, r3
 8001072:	4619      	mov	r1, r3
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ff61 	bl	8000f3c <OneWire_WriteBit>
		byte >>= 1;
 800107a:	78fb      	ldrb	r3, [r7, #3]
 800107c:	085b      	lsrs	r3, r3, #1
 800107e:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8001080:	7bfb      	ldrb	r3, [r7, #15]
 8001082:	1e5a      	subs	r2, r3, #1
 8001084:	73fa      	strb	r2, [r7, #15]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1ef      	bne.n	800106a <OneWire_WriteByte+0x12>
	}
}
 800108a:	bf00      	nop
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 800109c:	2308      	movs	r3, #8
 800109e:	73fb      	strb	r3, [r7, #15]
 80010a0:	2300      	movs	r3, #0
 80010a2:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80010a4:	e00d      	b.n	80010c2 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	085b      	lsrs	r3, r3, #1
 80010aa:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff9b 	bl	8000fe8 <OneWire_ReadBit>
 80010b2:	4603      	mov	r3, r0
 80010b4:	01db      	lsls	r3, r3, #7
 80010b6:	b25a      	sxtb	r2, r3
 80010b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80010bc:	4313      	orrs	r3, r2
 80010be:	b25b      	sxtb	r3, r3
 80010c0:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	1e5a      	subs	r2, r3, #1
 80010c6:	73fa      	strb	r2, [r7, #15]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d1ec      	bne.n	80010a6 <OneWire_ReadByte+0x12>
	}
	
	return byte;
 80010cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b084      	sub	sp, #16
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 80010e0:	2155      	movs	r1, #85	; 0x55
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff ffb8 	bl	8001058 <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]
 80010ec:	e00a      	b.n	8001104 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	683a      	ldr	r2, [r7, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4619      	mov	r1, r3
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ffad 	bl	8001058 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	3301      	adds	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	2b07      	cmp	r3, #7
 8001108:	d9f1      	bls.n	80010ee <OneWire_SelectWithPointer+0x18>
	}	
}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	3710      	adds	r7, #16
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 800111e:	2300      	movs	r3, #0
 8001120:	73fb      	strb	r3, [r7, #15]
 8001122:	e00a      	b.n	800113a <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	6839      	ldr	r1, [r7, #0]
 800112a:	440b      	add	r3, r1
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	440a      	add	r2, r1
 8001130:	7a52      	ldrb	r2, [r2, #9]
 8001132:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	3301      	adds	r3, #1
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	2b07      	cmp	r3, #7
 800113e:	d9f1      	bls.n	8001124 <OneWire_GetFullROM+0x10>
	}
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <SSD1306_InvertDisplay>:
}



void SSD1306_InvertDisplay (int i)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  if (i) SSD1306_WRITECOMMAND (SSD1306_INVERTDISPLAY);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <SSD1306_InvertDisplay+0x1a>
 800115a:	22a7      	movs	r2, #167	; 0xa7
 800115c:	2100      	movs	r1, #0
 800115e:	2078      	movs	r0, #120	; 0x78
 8001160:	f000 fab0 	bl	80016c4 <ssd1306_I2C_Write>

  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);

}
 8001164:	e004      	b.n	8001170 <SSD1306_InvertDisplay+0x24>
  else SSD1306_WRITECOMMAND (SSD1306_NORMALDISPLAY);
 8001166:	22a6      	movs	r2, #166	; 0xa6
 8001168:	2100      	movs	r1, #0
 800116a:	2078      	movs	r0, #120	; 0x78
 800116c:	f000 faaa 	bl	80016c4 <ssd1306_I2C_Write>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800117e:	f000 fa27 	bl	80015d0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&H_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001182:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001186:	2201      	movs	r2, #1
 8001188:	2178      	movs	r1, #120	; 0x78
 800118a:	485b      	ldr	r0, [pc, #364]	; (80012f8 <SSD1306_Init+0x180>)
 800118c:	f002 febc 	bl	8003f08 <HAL_I2C_IsDeviceReady>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001196:	2300      	movs	r3, #0
 8001198:	e0a9      	b.n	80012ee <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800119a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800119e:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011a0:	e002      	b.n	80011a8 <SSD1306_Init+0x30>
		p--;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f9      	bne.n	80011a2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80011ae:	22ae      	movs	r2, #174	; 0xae
 80011b0:	2100      	movs	r1, #0
 80011b2:	2078      	movs	r0, #120	; 0x78
 80011b4:	f000 fa86 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80011b8:	2220      	movs	r2, #32
 80011ba:	2100      	movs	r1, #0
 80011bc:	2078      	movs	r0, #120	; 0x78
 80011be:	f000 fa81 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80011c2:	2210      	movs	r2, #16
 80011c4:	2100      	movs	r1, #0
 80011c6:	2078      	movs	r0, #120	; 0x78
 80011c8:	f000 fa7c 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80011cc:	22b0      	movs	r2, #176	; 0xb0
 80011ce:	2100      	movs	r1, #0
 80011d0:	2078      	movs	r0, #120	; 0x78
 80011d2:	f000 fa77 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80011d6:	22c8      	movs	r2, #200	; 0xc8
 80011d8:	2100      	movs	r1, #0
 80011da:	2078      	movs	r0, #120	; 0x78
 80011dc:	f000 fa72 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	2078      	movs	r0, #120	; 0x78
 80011e6:	f000 fa6d 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80011ea:	2210      	movs	r2, #16
 80011ec:	2100      	movs	r1, #0
 80011ee:	2078      	movs	r0, #120	; 0x78
 80011f0:	f000 fa68 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80011f4:	2240      	movs	r2, #64	; 0x40
 80011f6:	2100      	movs	r1, #0
 80011f8:	2078      	movs	r0, #120	; 0x78
 80011fa:	f000 fa63 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80011fe:	2281      	movs	r2, #129	; 0x81
 8001200:	2100      	movs	r1, #0
 8001202:	2078      	movs	r0, #120	; 0x78
 8001204:	f000 fa5e 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001208:	22ff      	movs	r2, #255	; 0xff
 800120a:	2100      	movs	r1, #0
 800120c:	2078      	movs	r0, #120	; 0x78
 800120e:	f000 fa59 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001212:	22a1      	movs	r2, #161	; 0xa1
 8001214:	2100      	movs	r1, #0
 8001216:	2078      	movs	r0, #120	; 0x78
 8001218:	f000 fa54 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800121c:	22a6      	movs	r2, #166	; 0xa6
 800121e:	2100      	movs	r1, #0
 8001220:	2078      	movs	r0, #120	; 0x78
 8001222:	f000 fa4f 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001226:	22a8      	movs	r2, #168	; 0xa8
 8001228:	2100      	movs	r1, #0
 800122a:	2078      	movs	r0, #120	; 0x78
 800122c:	f000 fa4a 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001230:	223f      	movs	r2, #63	; 0x3f
 8001232:	2100      	movs	r1, #0
 8001234:	2078      	movs	r0, #120	; 0x78
 8001236:	f000 fa45 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800123a:	22a4      	movs	r2, #164	; 0xa4
 800123c:	2100      	movs	r1, #0
 800123e:	2078      	movs	r0, #120	; 0x78
 8001240:	f000 fa40 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001244:	22d3      	movs	r2, #211	; 0xd3
 8001246:	2100      	movs	r1, #0
 8001248:	2078      	movs	r0, #120	; 0x78
 800124a:	f000 fa3b 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	2078      	movs	r0, #120	; 0x78
 8001254:	f000 fa36 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001258:	22d5      	movs	r2, #213	; 0xd5
 800125a:	2100      	movs	r1, #0
 800125c:	2078      	movs	r0, #120	; 0x78
 800125e:	f000 fa31 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001262:	22f0      	movs	r2, #240	; 0xf0
 8001264:	2100      	movs	r1, #0
 8001266:	2078      	movs	r0, #120	; 0x78
 8001268:	f000 fa2c 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800126c:	22d9      	movs	r2, #217	; 0xd9
 800126e:	2100      	movs	r1, #0
 8001270:	2078      	movs	r0, #120	; 0x78
 8001272:	f000 fa27 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001276:	2222      	movs	r2, #34	; 0x22
 8001278:	2100      	movs	r1, #0
 800127a:	2078      	movs	r0, #120	; 0x78
 800127c:	f000 fa22 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001280:	22da      	movs	r2, #218	; 0xda
 8001282:	2100      	movs	r1, #0
 8001284:	2078      	movs	r0, #120	; 0x78
 8001286:	f000 fa1d 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800128a:	2212      	movs	r2, #18
 800128c:	2100      	movs	r1, #0
 800128e:	2078      	movs	r0, #120	; 0x78
 8001290:	f000 fa18 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001294:	22db      	movs	r2, #219	; 0xdb
 8001296:	2100      	movs	r1, #0
 8001298:	2078      	movs	r0, #120	; 0x78
 800129a:	f000 fa13 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800129e:	2220      	movs	r2, #32
 80012a0:	2100      	movs	r1, #0
 80012a2:	2078      	movs	r0, #120	; 0x78
 80012a4:	f000 fa0e 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80012a8:	228d      	movs	r2, #141	; 0x8d
 80012aa:	2100      	movs	r1, #0
 80012ac:	2078      	movs	r0, #120	; 0x78
 80012ae:	f000 fa09 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80012b2:	2214      	movs	r2, #20
 80012b4:	2100      	movs	r1, #0
 80012b6:	2078      	movs	r0, #120	; 0x78
 80012b8:	f000 fa04 	bl	80016c4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80012bc:	22af      	movs	r2, #175	; 0xaf
 80012be:	2100      	movs	r1, #0
 80012c0:	2078      	movs	r0, #120	; 0x78
 80012c2:	f000 f9ff 	bl	80016c4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80012c6:	222e      	movs	r2, #46	; 0x2e
 80012c8:	2100      	movs	r1, #0
 80012ca:	2078      	movs	r0, #120	; 0x78
 80012cc:	f000 f9fa 	bl	80016c4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80012d0:	2000      	movs	r0, #0
 80012d2:	f000 f843 	bl	800135c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80012d6:	f000 f813 	bl	8001300 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <SSD1306_Init+0x184>)
 80012dc:	2200      	movs	r2, #0
 80012de:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <SSD1306_Init+0x184>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80012e6:	4b05      	ldr	r3, [pc, #20]	; (80012fc <SSD1306_Init+0x184>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80012ec:	2301      	movs	r3, #1
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000055c 	.word	0x2000055c
 80012fc:	200004b8 	.word	0x200004b8

08001300 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001306:	2300      	movs	r3, #0
 8001308:	71fb      	strb	r3, [r7, #7]
 800130a:	e01d      	b.n	8001348 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	3b50      	subs	r3, #80	; 0x50
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	2100      	movs	r1, #0
 8001316:	2078      	movs	r0, #120	; 0x78
 8001318:	f000 f9d4 	bl	80016c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800131c:	2200      	movs	r2, #0
 800131e:	2100      	movs	r1, #0
 8001320:	2078      	movs	r0, #120	; 0x78
 8001322:	f000 f9cf 	bl	80016c4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001326:	2210      	movs	r2, #16
 8001328:	2100      	movs	r1, #0
 800132a:	2078      	movs	r0, #120	; 0x78
 800132c:	f000 f9ca 	bl	80016c4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	01db      	lsls	r3, r3, #7
 8001334:	4a08      	ldr	r2, [pc, #32]	; (8001358 <SSD1306_UpdateScreen+0x58>)
 8001336:	441a      	add	r2, r3
 8001338:	2380      	movs	r3, #128	; 0x80
 800133a:	2140      	movs	r1, #64	; 0x40
 800133c:	2078      	movs	r0, #120	; 0x78
 800133e:	f000 f95b 	bl	80015f8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	3301      	adds	r3, #1
 8001346:	71fb      	strb	r3, [r7, #7]
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	2b07      	cmp	r3, #7
 800134c:	d9de      	bls.n	800130c <SSD1306_UpdateScreen+0xc>
	}
}
 800134e:	bf00      	nop
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200000b8 	.word	0x200000b8

0800135c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <SSD1306_Fill+0x14>
 800136c:	2300      	movs	r3, #0
 800136e:	e000      	b.n	8001372 <SSD1306_Fill+0x16>
 8001370:	23ff      	movs	r3, #255	; 0xff
 8001372:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001376:	4619      	mov	r1, r3
 8001378:	4803      	ldr	r0, [pc, #12]	; (8001388 <SSD1306_Fill+0x2c>)
 800137a:	f004 fc17 	bl	8005bac <memset>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200000b8 	.word	0x200000b8

0800138c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	80fb      	strh	r3, [r7, #6]
 8001396:	460b      	mov	r3, r1
 8001398:	80bb      	strh	r3, [r7, #4]
 800139a:	4613      	mov	r3, r2
 800139c:	70fb      	strb	r3, [r7, #3]
	if (
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	2b7f      	cmp	r3, #127	; 0x7f
 80013a2:	d848      	bhi.n	8001436 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80013a4:	88bb      	ldrh	r3, [r7, #4]
 80013a6:	2b3f      	cmp	r3, #63	; 0x3f
 80013a8:	d845      	bhi.n	8001436 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80013aa:	4b25      	ldr	r3, [pc, #148]	; (8001440 <SSD1306_DrawPixel+0xb4>)
 80013ac:	791b      	ldrb	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d006      	beq.n	80013c0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	bf0c      	ite	eq
 80013b8:	2301      	moveq	r3, #1
 80013ba:	2300      	movne	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d11a      	bne.n	80013fc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013c6:	88fa      	ldrh	r2, [r7, #6]
 80013c8:	88bb      	ldrh	r3, [r7, #4]
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	b298      	uxth	r0, r3
 80013ce:	4603      	mov	r3, r0
 80013d0:	01db      	lsls	r3, r3, #7
 80013d2:	4413      	add	r3, r2
 80013d4:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <SSD1306_DrawPixel+0xb8>)
 80013d6:	5cd3      	ldrb	r3, [r2, r3]
 80013d8:	b25a      	sxtb	r2, r3
 80013da:	88bb      	ldrh	r3, [r7, #4]
 80013dc:	f003 0307 	and.w	r3, r3, #7
 80013e0:	2101      	movs	r1, #1
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	b25b      	sxtb	r3, r3
 80013e8:	4313      	orrs	r3, r2
 80013ea:	b259      	sxtb	r1, r3
 80013ec:	88fa      	ldrh	r2, [r7, #6]
 80013ee:	4603      	mov	r3, r0
 80013f0:	01db      	lsls	r3, r3, #7
 80013f2:	4413      	add	r3, r2
 80013f4:	b2c9      	uxtb	r1, r1
 80013f6:	4a13      	ldr	r2, [pc, #76]	; (8001444 <SSD1306_DrawPixel+0xb8>)
 80013f8:	54d1      	strb	r1, [r2, r3]
 80013fa:	e01d      	b.n	8001438 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80013fc:	88fa      	ldrh	r2, [r7, #6]
 80013fe:	88bb      	ldrh	r3, [r7, #4]
 8001400:	08db      	lsrs	r3, r3, #3
 8001402:	b298      	uxth	r0, r3
 8001404:	4603      	mov	r3, r0
 8001406:	01db      	lsls	r3, r3, #7
 8001408:	4413      	add	r3, r2
 800140a:	4a0e      	ldr	r2, [pc, #56]	; (8001444 <SSD1306_DrawPixel+0xb8>)
 800140c:	5cd3      	ldrb	r3, [r2, r3]
 800140e:	b25a      	sxtb	r2, r3
 8001410:	88bb      	ldrh	r3, [r7, #4]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	2101      	movs	r1, #1
 8001418:	fa01 f303 	lsl.w	r3, r1, r3
 800141c:	b25b      	sxtb	r3, r3
 800141e:	43db      	mvns	r3, r3
 8001420:	b25b      	sxtb	r3, r3
 8001422:	4013      	ands	r3, r2
 8001424:	b259      	sxtb	r1, r3
 8001426:	88fa      	ldrh	r2, [r7, #6]
 8001428:	4603      	mov	r3, r0
 800142a:	01db      	lsls	r3, r3, #7
 800142c:	4413      	add	r3, r2
 800142e:	b2c9      	uxtb	r1, r1
 8001430:	4a04      	ldr	r2, [pc, #16]	; (8001444 <SSD1306_DrawPixel+0xb8>)
 8001432:	54d1      	strb	r1, [r2, r3]
 8001434:	e000      	b.n	8001438 <SSD1306_DrawPixel+0xac>
		return;
 8001436:	bf00      	nop
	}
}
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	200004b8 	.word	0x200004b8
 8001444:	200000b8 	.word	0x200000b8

08001448 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	460a      	mov	r2, r1
 8001452:	80fb      	strh	r3, [r7, #6]
 8001454:	4613      	mov	r3, r2
 8001456:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001458:	4a05      	ldr	r2, [pc, #20]	; (8001470 <SSD1306_GotoXY+0x28>)
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800145e:	4a04      	ldr	r2, [pc, #16]	; (8001470 <SSD1306_GotoXY+0x28>)
 8001460:	88bb      	ldrh	r3, [r7, #4]
 8001462:	8053      	strh	r3, [r2, #2]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	200004b8 	.word	0x200004b8

08001474 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	6039      	str	r1, [r7, #0]
 800147e:	71fb      	strb	r3, [r7, #7]
 8001480:	4613      	mov	r3, r2
 8001482:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001484:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <SSD1306_Putc+0xfc>)
 8001486:	881b      	ldrh	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	4413      	add	r3, r2
	if (
 8001490:	2b7f      	cmp	r3, #127	; 0x7f
 8001492:	dc07      	bgt.n	80014a4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <SSD1306_Putc+0xfc>)
 8001496:	885b      	ldrh	r3, [r3, #2]
 8001498:	461a      	mov	r2, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	785b      	ldrb	r3, [r3, #1]
 800149e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014a0:	2b3f      	cmp	r3, #63	; 0x3f
 80014a2:	dd01      	ble.n	80014a8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e05e      	b.n	8001566 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
 80014ac:	e04b      	b.n	8001546 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	3b20      	subs	r3, #32
 80014b6:	6839      	ldr	r1, [r7, #0]
 80014b8:	7849      	ldrb	r1, [r1, #1]
 80014ba:	fb01 f303 	mul.w	r3, r1, r3
 80014be:	4619      	mov	r1, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	440b      	add	r3, r1
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	e030      	b.n	8001534 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d010      	beq.n	8001504 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80014e2:	4b23      	ldr	r3, [pc, #140]	; (8001570 <SSD1306_Putc+0xfc>)
 80014e4:	881a      	ldrh	r2, [r3, #0]
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	4413      	add	r3, r2
 80014ec:	b298      	uxth	r0, r3
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <SSD1306_Putc+0xfc>)
 80014f0:	885a      	ldrh	r2, [r3, #2]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4413      	add	r3, r2
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	79ba      	ldrb	r2, [r7, #6]
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff ff45 	bl	800138c <SSD1306_DrawPixel>
 8001502:	e014      	b.n	800152e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <SSD1306_Putc+0xfc>)
 8001506:	881a      	ldrh	r2, [r3, #0]
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	b29b      	uxth	r3, r3
 800150c:	4413      	add	r3, r2
 800150e:	b298      	uxth	r0, r3
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <SSD1306_Putc+0xfc>)
 8001512:	885a      	ldrh	r2, [r3, #2]
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	b29b      	uxth	r3, r3
 8001518:	4413      	add	r3, r2
 800151a:	b299      	uxth	r1, r3
 800151c:	79bb      	ldrb	r3, [r7, #6]
 800151e:	2b00      	cmp	r3, #0
 8001520:	bf0c      	ite	eq
 8001522:	2301      	moveq	r3, #1
 8001524:	2300      	movne	r3, #0
 8001526:	b2db      	uxtb	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	f7ff ff2f 	bl	800138c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	3301      	adds	r3, #1
 8001532:	613b      	str	r3, [r7, #16]
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	461a      	mov	r2, r3
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4293      	cmp	r3, r2
 800153e:	d3c8      	bcc.n	80014d2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	3301      	adds	r3, #1
 8001544:	617b      	str	r3, [r7, #20]
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	785b      	ldrb	r3, [r3, #1]
 800154a:	461a      	mov	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	4293      	cmp	r3, r2
 8001550:	d3ad      	bcc.n	80014ae <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <SSD1306_Putc+0xfc>)
 8001554:	881a      	ldrh	r2, [r3, #0]
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4413      	add	r3, r2
 800155e:	b29a      	uxth	r2, r3
 8001560:	4b03      	ldr	r3, [pc, #12]	; (8001570 <SSD1306_Putc+0xfc>)
 8001562:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001564:	79fb      	ldrb	r3, [r7, #7]
}
 8001566:	4618      	mov	r0, r3
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200004b8 	.word	0x200004b8

08001574 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	60b9      	str	r1, [r7, #8]
 800157e:	4613      	mov	r3, r2
 8001580:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001582:	e012      	b.n	80015aa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	79fa      	ldrb	r2, [r7, #7]
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff ff71 	bl	8001474 <SSD1306_Putc>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d002      	beq.n	80015a4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	e008      	b.n	80015b6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3301      	adds	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1e8      	bne.n	8001584 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	781b      	ldrb	r3, [r3, #0]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff feca 	bl	800135c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80015c8:	f7ff fe9a 	bl	8001300 <SSD1306_UpdateScreen>
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80015d6:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <ssd1306_I2C_Init+0x24>)
 80015d8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015da:	e002      	b.n	80015e2 <ssd1306_I2C_Init+0x12>
		p--;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f9      	bne.n	80015dc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&H_I2C);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	0003d090 	.word	0x0003d090

080015f8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b0c7      	sub	sp, #284	; 0x11c
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	4604      	mov	r4, r0
 8001600:	4608      	mov	r0, r1
 8001602:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001606:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800160a:	600a      	str	r2, [r1, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001612:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001616:	4622      	mov	r2, r4
 8001618:	701a      	strb	r2, [r3, #0]
 800161a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800161e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001622:	4602      	mov	r2, r0
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800162a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800162e:	460a      	mov	r2, r1
 8001630:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001632:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001636:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800163a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800163e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001642:	7812      	ldrb	r2, [r2, #0]
 8001644:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001646:	2300      	movs	r3, #0
 8001648:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800164c:	e015      	b.n	800167a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800164e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001652:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001656:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	441a      	add	r2, r3
 800165e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001662:	3301      	adds	r3, #1
 8001664:	7811      	ldrb	r1, [r2, #0]
 8001666:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800166a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800166e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001670:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001674:	3301      	adds	r3, #1
 8001676:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800167a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800167e:	b29b      	uxth	r3, r3
 8001680:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001684:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001688:	8812      	ldrh	r2, [r2, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d8df      	bhi.n	800164e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&H_I2C, address, dt, count+1, 10);
 800168e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001692:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	b299      	uxth	r1, r3
 800169a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800169e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	f107 020c 	add.w	r2, r7, #12
 80016ac:	200a      	movs	r0, #10
 80016ae:	9000      	str	r0, [sp, #0]
 80016b0:	4803      	ldr	r0, [pc, #12]	; (80016c0 <ssd1306_I2C_WriteMulti+0xc8>)
 80016b2:	f002 fb2b 	bl	8003d0c <HAL_I2C_Master_Transmit>
}
 80016b6:	bf00      	nop
 80016b8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd90      	pop	{r4, r7, pc}
 80016c0:	2000055c 	.word	0x2000055c

080016c4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	4603      	mov	r3, r0
 80016cc:	71fb      	strb	r3, [r7, #7]
 80016ce:	460b      	mov	r3, r1
 80016d0:	71bb      	strb	r3, [r7, #6]
 80016d2:	4613      	mov	r3, r2
 80016d4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80016d6:	79bb      	ldrb	r3, [r7, #6]
 80016d8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80016da:	797b      	ldrb	r3, [r7, #5]
 80016dc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&H_I2C, address, dt, 2, 10);
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	b299      	uxth	r1, r3
 80016e2:	f107 020c 	add.w	r2, r7, #12
 80016e6:	230a      	movs	r3, #10
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	2302      	movs	r3, #2
 80016ec:	4803      	ldr	r0, [pc, #12]	; (80016fc <ssd1306_I2C_Write+0x38>)
 80016ee:	f002 fb0d 	bl	8003d0c <HAL_I2C_Master_Transmit>
}
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	2000055c 	.word	0x2000055c

08001700 <getSwstate>:

	}
}

ON_OFF_t getSwstate()
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(PB12_START_SW_PIN_GPIO_Port, PB12_START_SW_PIN_Pin)){
 8001704:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001708:	4805      	ldr	r0, [pc, #20]	; (8001720 <getSwstate+0x20>)
 800170a:	f002 f969 	bl	80039e0 <HAL_GPIO_ReadPin>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <getSwstate+0x18>
		return OFF_t;
 8001714:	2300      	movs	r3, #0
 8001716:	e000      	b.n	800171a <getSwstate+0x1a>
	}
	else
	{
		return ON_t;
 8001718:	2301      	movs	r3, #1
	}
}
 800171a:	4618      	mov	r0, r3
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40010c00 	.word	0x40010c00

08001724 <init_fnd>:
#define true 1



void init_fnd()
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

_LED_0F[0] = 0xC0; //0
 8001728:	4b2d      	ldr	r3, [pc, #180]	; (80017e0 <init_fnd+0xbc>)
 800172a:	22c0      	movs	r2, #192	; 0xc0
 800172c:	701a      	strb	r2, [r3, #0]
_LED_0F[1] = 0xF9; //1
 800172e:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <init_fnd+0xbc>)
 8001730:	22f9      	movs	r2, #249	; 0xf9
 8001732:	705a      	strb	r2, [r3, #1]
_LED_0F[2] = 0xA4; //2
 8001734:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <init_fnd+0xbc>)
 8001736:	22a4      	movs	r2, #164	; 0xa4
 8001738:	709a      	strb	r2, [r3, #2]
_LED_0F[3] = 0xB0; //3
 800173a:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <init_fnd+0xbc>)
 800173c:	22b0      	movs	r2, #176	; 0xb0
 800173e:	70da      	strb	r2, [r3, #3]
_LED_0F[4] = 0x99; //4
 8001740:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <init_fnd+0xbc>)
 8001742:	2299      	movs	r2, #153	; 0x99
 8001744:	711a      	strb	r2, [r3, #4]
_LED_0F[5] = 0x92; //5
 8001746:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <init_fnd+0xbc>)
 8001748:	2292      	movs	r2, #146	; 0x92
 800174a:	715a      	strb	r2, [r3, #5]
_LED_0F[6] = 0x82; //6
 800174c:	4b24      	ldr	r3, [pc, #144]	; (80017e0 <init_fnd+0xbc>)
 800174e:	2282      	movs	r2, #130	; 0x82
 8001750:	719a      	strb	r2, [r3, #6]
_LED_0F[7] = 0xF8; //7
 8001752:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <init_fnd+0xbc>)
 8001754:	22f8      	movs	r2, #248	; 0xf8
 8001756:	71da      	strb	r2, [r3, #7]
_LED_0F[8] = 0x80; //8
 8001758:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <init_fnd+0xbc>)
 800175a:	2280      	movs	r2, #128	; 0x80
 800175c:	721a      	strb	r2, [r3, #8]
_LED_0F[9] = 0x90; //9
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <init_fnd+0xbc>)
 8001760:	2290      	movs	r2, #144	; 0x90
 8001762:	725a      	strb	r2, [r3, #9]
_LED_0F[10] = 0x88; //A
 8001764:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <init_fnd+0xbc>)
 8001766:	2288      	movs	r2, #136	; 0x88
 8001768:	729a      	strb	r2, [r3, #10]
_LED_0F[11] = 0x83; //b
 800176a:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <init_fnd+0xbc>)
 800176c:	2283      	movs	r2, #131	; 0x83
 800176e:	72da      	strb	r2, [r3, #11]
_LED_0F[12] = 0xC6; //C
 8001770:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <init_fnd+0xbc>)
 8001772:	22c6      	movs	r2, #198	; 0xc6
 8001774:	731a      	strb	r2, [r3, #12]
_LED_0F[13] = 0xA1; //d
 8001776:	4b1a      	ldr	r3, [pc, #104]	; (80017e0 <init_fnd+0xbc>)
 8001778:	22a1      	movs	r2, #161	; 0xa1
 800177a:	735a      	strb	r2, [r3, #13]
_LED_0F[14] = 0x86; //E
 800177c:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <init_fnd+0xbc>)
 800177e:	2286      	movs	r2, #134	; 0x86
 8001780:	739a      	strb	r2, [r3, #14]
_LED_0F[15] = 0x8E; //F
 8001782:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <init_fnd+0xbc>)
 8001784:	228e      	movs	r2, #142	; 0x8e
 8001786:	73da      	strb	r2, [r3, #15]
_LED_0F[16] = 0xC2; //G
 8001788:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <init_fnd+0xbc>)
 800178a:	22c2      	movs	r2, #194	; 0xc2
 800178c:	741a      	strb	r2, [r3, #16]
_LED_0F[17] = 0x89; //H
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <init_fnd+0xbc>)
 8001790:	2289      	movs	r2, #137	; 0x89
 8001792:	745a      	strb	r2, [r3, #17]
_LED_0F[18] = 0xF9; //I
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <init_fnd+0xbc>)
 8001796:	22f9      	movs	r2, #249	; 0xf9
 8001798:	749a      	strb	r2, [r3, #18]
_LED_0F[19] = 0xF1; //J
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <init_fnd+0xbc>)
 800179c:	22f1      	movs	r2, #241	; 0xf1
 800179e:	74da      	strb	r2, [r3, #19]
_LED_0F[20] = 0xC3; //L
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <init_fnd+0xbc>)
 80017a2:	22c3      	movs	r2, #195	; 0xc3
 80017a4:	751a      	strb	r2, [r3, #20]
_LED_0F[21] = 0xA9; //n
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <init_fnd+0xbc>)
 80017a8:	22a9      	movs	r2, #169	; 0xa9
 80017aa:	755a      	strb	r2, [r3, #21]
_LED_0F[22] = 0xC0; //O
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <init_fnd+0xbc>)
 80017ae:	22c0      	movs	r2, #192	; 0xc0
 80017b0:	759a      	strb	r2, [r3, #22]
_LED_0F[23] = 0x8C; //P
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <init_fnd+0xbc>)
 80017b4:	228c      	movs	r2, #140	; 0x8c
 80017b6:	75da      	strb	r2, [r3, #23]
_LED_0F[24] = 0x98; //q
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <init_fnd+0xbc>)
 80017ba:	2298      	movs	r2, #152	; 0x98
 80017bc:	761a      	strb	r2, [r3, #24]
_LED_0F[25] = 0x92; //S
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <init_fnd+0xbc>)
 80017c0:	2292      	movs	r2, #146	; 0x92
 80017c2:	765a      	strb	r2, [r3, #25]
_LED_0F[26] = 0xC1; //U
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <init_fnd+0xbc>)
 80017c6:	22c1      	movs	r2, #193	; 0xc1
 80017c8:	769a      	strb	r2, [r3, #26]
_LED_0F[27] = 0x91; //Y
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <init_fnd+0xbc>)
 80017cc:	2291      	movs	r2, #145	; 0x91
 80017ce:	76da      	strb	r2, [r3, #27]
_LED_0F[28] = 0xFE; //hight -
 80017d0:	4b03      	ldr	r3, [pc, #12]	; (80017e0 <init_fnd+0xbc>)
 80017d2:	22fe      	movs	r2, #254	; 0xfe
 80017d4:	771a      	strb	r2, [r3, #28]

}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	200004c0 	.word	0x200004c0

080017e4 <send>:

void send(uint8_t X)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
	for (int i = 8; i >= 1; i--) {
 80017ee:	2308      	movs	r3, #8
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	e022      	b.n	800183a <send+0x56>
			if (X & 0x80) {
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	da06      	bge.n	800180a <send+0x26>
				HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, HIGH);
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001802:	4812      	ldr	r0, [pc, #72]	; (800184c <send+0x68>)
 8001804:	f002 f903 	bl	8003a0e <HAL_GPIO_WritePin>
 8001808:	e005      	b.n	8001816 <send+0x32>
			} else {
				HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, LOW);
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001810:	480e      	ldr	r0, [pc, #56]	; (800184c <send+0x68>)
 8001812:	f002 f8fc 	bl	8003a0e <HAL_GPIO_WritePin>
			}
			X <<= 1;
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	71fb      	strb	r3, [r7, #7]
			HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, LOW);
 800181c:	2200      	movs	r2, #0
 800181e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001822:	480a      	ldr	r0, [pc, #40]	; (800184c <send+0x68>)
 8001824:	f002 f8f3 	bl	8003a0e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, HIGH);
 8001828:	2201      	movs	r2, #1
 800182a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800182e:	4807      	ldr	r0, [pc, #28]	; (800184c <send+0x68>)
 8001830:	f002 f8ed 	bl	8003a0e <HAL_GPIO_WritePin>
	for (int i = 8; i >= 1; i--) {
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	3b01      	subs	r3, #1
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	dcd9      	bgt.n	80017f4 <send+0x10>
		}
//	HAL_SPI_Transmit(m_hspi, &X, 1, 100);

}
 8001840:	bf00      	nop
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40010c00 	.word	0x40010c00

08001850 <send_port>:


void send_port(uint8_t X,uint8_t port)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	460a      	mov	r2, r1
 800185a:	71fb      	strb	r3, [r7, #7]
 800185c:	4613      	mov	r3, r2
 800185e:	71bb      	strb	r3, [r7, #6]
  send(X);
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ffbe 	bl	80017e4 <send>
  send(port	);
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ffba 	bl	80017e4 <send>
  HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, LOW);
 8001870:	2200      	movs	r2, #0
 8001872:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <send_port+0x40>)
 8001878:	f002 f8c9 	bl	8003a0e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, HIGH);
 800187c:	2201      	movs	r2, #1
 800187e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001882:	4803      	ldr	r0, [pc, #12]	; (8001890 <send_port+0x40>)
 8001884:	f002 f8c3 	bl	8003a0e <HAL_GPIO_WritePin>
}
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40010c00 	.word	0x40010c00

08001894 <digit4_temper>:

static uint8_t m_tempercount=0;
void digit4_temper(int n)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b086      	sub	sp, #24
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  int n1, n2, n3, n4;
  n1 = (int)  n % 10;
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	4b53      	ldr	r3, [pc, #332]	; (80019ec <digit4_temper+0x158>)
 80018a0:	fb83 1302 	smull	r1, r3, r3, r2
 80018a4:	1099      	asrs	r1, r3, #2
 80018a6:	17d3      	asrs	r3, r2, #31
 80018a8:	1ac9      	subs	r1, r1, r3
 80018aa:	460b      	mov	r3, r1
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	440b      	add	r3, r1
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
  n2 = (int) (n % 100)/10;
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	4b4d      	ldr	r3, [pc, #308]	; (80019f0 <digit4_temper+0x15c>)
 80018ba:	fb83 1302 	smull	r1, r3, r3, r2
 80018be:	1159      	asrs	r1, r3, #5
 80018c0:	17d3      	asrs	r3, r2, #31
 80018c2:	1acb      	subs	r3, r1, r3
 80018c4:	2164      	movs	r1, #100	; 0x64
 80018c6:	fb01 f303 	mul.w	r3, r1, r3
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	4a47      	ldr	r2, [pc, #284]	; (80019ec <digit4_temper+0x158>)
 80018ce:	fb82 1203 	smull	r1, r2, r2, r3
 80018d2:	1092      	asrs	r2, r2, #2
 80018d4:	17db      	asrs	r3, r3, #31
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	613b      	str	r3, [r7, #16]
  n3 = (int) ((n % 1000)) / 100;
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	4b45      	ldr	r3, [pc, #276]	; (80019f4 <digit4_temper+0x160>)
 80018de:	fb83 1302 	smull	r1, r3, r3, r2
 80018e2:	1199      	asrs	r1, r3, #6
 80018e4:	17d3      	asrs	r3, r2, #31
 80018e6:	1acb      	subs	r3, r1, r3
 80018e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	4a3f      	ldr	r2, [pc, #252]	; (80019f0 <digit4_temper+0x15c>)
 80018f4:	fb82 1203 	smull	r1, r2, r2, r3
 80018f8:	1152      	asrs	r2, r2, #5
 80018fa:	17db      	asrs	r3, r3, #31
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	60fb      	str	r3, [r7, #12]
  n4 = (int) ((n % 10000)) / 1000;
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	4b3d      	ldr	r3, [pc, #244]	; (80019f8 <digit4_temper+0x164>)
 8001904:	fb83 1302 	smull	r1, r3, r3, r2
 8001908:	1319      	asrs	r1, r3, #12
 800190a:	17d3      	asrs	r3, r2, #31
 800190c:	1acb      	subs	r3, r1, r3
 800190e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001912:	fb01 f303 	mul.w	r3, r1, r3
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	4a36      	ldr	r2, [pc, #216]	; (80019f4 <digit4_temper+0x160>)
 800191a:	fb82 1203 	smull	r1, r2, r2, r3
 800191e:	1192      	asrs	r2, r2, #6
 8001920:	17db      	asrs	r3, r3, #31
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	60bb      	str	r3, [r7, #8]

  switch( m_tempercount)
 8001926:	4b35      	ldr	r3, [pc, #212]	; (80019fc <digit4_temper+0x168>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b03      	cmp	r3, #3
 800192c:	d838      	bhi.n	80019a0 <digit4_temper+0x10c>
 800192e:	a201      	add	r2, pc, #4	; (adr r2, 8001934 <digit4_temper+0xa0>)
 8001930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001934:	08001945 	.word	0x08001945
 8001938:	08001957 	.word	0x08001957
 800193c:	0800196f 	.word	0x0800196f
 8001940:	08001987 	.word	0x08001987
  {
  case 0:
	  send_port(_LED_0F[n1], 0b0001);
 8001944:	4a2e      	ldr	r2, [pc, #184]	; (8001a00 <digit4_temper+0x16c>)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	4413      	add	r3, r2
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2101      	movs	r1, #1
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ff7e 	bl	8001850 <send_port>
	  break;
 8001954:	e029      	b.n	80019aa <digit4_temper+0x116>
  case 1:
	  send_port(_LED_0F[n2]& 0x7F, 0b0010);
 8001956:	4a2a      	ldr	r2, [pc, #168]	; (8001a00 <digit4_temper+0x16c>)
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4413      	add	r3, r2
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2102      	movs	r1, #2
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff72 	bl	8001850 <send_port>
	  break;
 800196c:	e01d      	b.n	80019aa <digit4_temper+0x116>
  case 2:
	  if(n>99)send_port(_LED_0F[n3], 0b0100);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b63      	cmp	r3, #99	; 0x63
 8001972:	dd17      	ble.n	80019a4 <digit4_temper+0x110>
 8001974:	4a22      	ldr	r2, [pc, #136]	; (8001a00 <digit4_temper+0x16c>)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4413      	add	r3, r2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2104      	movs	r1, #4
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff66 	bl	8001850 <send_port>
	  break;
 8001984:	e00e      	b.n	80019a4 <digit4_temper+0x110>
  case 3:
	  if(n>999)send_port(_LED_0F[n4], 0b1000);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800198c:	db0c      	blt.n	80019a8 <digit4_temper+0x114>
 800198e:	4a1c      	ldr	r2, [pc, #112]	; (8001a00 <digit4_temper+0x16c>)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	4413      	add	r3, r2
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2108      	movs	r1, #8
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff59 	bl	8001850 <send_port>
	  break;
 800199e:	e003      	b.n	80019a8 <digit4_temper+0x114>
  default:
	  break;
 80019a0:	bf00      	nop
 80019a2:	e002      	b.n	80019aa <digit4_temper+0x116>
	  break;
 80019a4:	bf00      	nop
 80019a6:	e000      	b.n	80019aa <digit4_temper+0x116>
	  break;
 80019a8:	bf00      	nop
  }
  m_tempercount++;
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <digit4_temper+0x168>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b12      	ldr	r3, [pc, #72]	; (80019fc <digit4_temper+0x168>)
 80019b4:	701a      	strb	r2, [r3, #0]
  if (n>999 && m_tempercount>=4)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019bc:	db07      	blt.n	80019ce <digit4_temper+0x13a>
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <digit4_temper+0x168>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d903      	bls.n	80019ce <digit4_temper+0x13a>
  {
	  	  m_tempercount=0;
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <digit4_temper+0x168>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	701a      	strb	r2, [r3, #0]
  else if(n>99&& m_tempercount>=3)
  {
	  m_tempercount=0;
  }

}
 80019cc:	e009      	b.n	80019e2 <digit4_temper+0x14e>
  else if(n>99&& m_tempercount>=3)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b63      	cmp	r3, #99	; 0x63
 80019d2:	dd06      	ble.n	80019e2 <digit4_temper+0x14e>
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <digit4_temper+0x168>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d902      	bls.n	80019e2 <digit4_temper+0x14e>
	  m_tempercount=0;
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <digit4_temper+0x168>)
 80019de:	2200      	movs	r2, #0
 80019e0:	701a      	strb	r2, [r3, #0]
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	66666667 	.word	0x66666667
 80019f0:	51eb851f 	.word	0x51eb851f
 80019f4:	10624dd3 	.word	0x10624dd3
 80019f8:	68db8bad 	.word	0x68db8bad
 80019fc:	200004dd 	.word	0x200004dd
 8001a00:	200004c0 	.word	0x200004c0

08001a04 <getFixedTemper>:
	}
	else{
		heaterControll(t_OFF);
	}
}
int getFixedTemper(){
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
	return heaterWorkTemper;
 8001a08:	4b02      	ldr	r3, [pc, #8]	; (8001a14 <getFixedTemper+0x10>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr
 8001a14:	20000008 	.word	0x20000008

08001a18 <led1OnOff>:
#include "ledController.h"

void led1OnOff(ON_OFF_t on_off)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]
	if(on_off == ON_t){
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <led1OnOff+0x1c>
			HAL_GPIO_WritePin(PB6_LED1_GPIO_Port, PB6_LED1_Pin, 0);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2140      	movs	r1, #64	; 0x40
 8001a2c:	4807      	ldr	r0, [pc, #28]	; (8001a4c <led1OnOff+0x34>)
 8001a2e:	f001 ffee 	bl	8003a0e <HAL_GPIO_WritePin>
		}else if(on_off == OFF_t){
			HAL_GPIO_WritePin(PB6_LED1_GPIO_Port, PB6_LED1_Pin, 1);
		}
}
 8001a32:	e007      	b.n	8001a44 <led1OnOff+0x2c>
		}else if(on_off == OFF_t){
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d104      	bne.n	8001a44 <led1OnOff+0x2c>
			HAL_GPIO_WritePin(PB6_LED1_GPIO_Port, PB6_LED1_Pin, 1);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2140      	movs	r1, #64	; 0x40
 8001a3e:	4803      	ldr	r0, [pc, #12]	; (8001a4c <led1OnOff+0x34>)
 8001a40:	f001 ffe5 	bl	8003a0e <HAL_GPIO_WritePin>
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40010c00 	.word	0x40010c00

08001a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	float temper=0.0;
 8001a56:	f04f 0300 	mov.w	r3, #0
 8001a5a:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a5c:	f000 fd82 	bl	8002564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a60:	f000 f868 	bl	8001b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a64:	f000 fa34 	bl	8001ed0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a68:	f000 fa14 	bl	8001e94 <MX_DMA_Init>
  MX_TIM2_Init();
 8001a6c:	f000 f950 	bl	8001d10 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001a70:	f000 f99a 	bl	8001da8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001a74:	f000 f9e4 	bl	8001e40 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001a78:	f000 f91c 	bl	8001cb4 <MX_I2C2_Init>
  MX_ADC1_Init();
 8001a7c:	f000 f8b6 	bl	8001bec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  init_fnd();
 8001a80:	f7ff fe50 	bl	8001724 <init_fnd>
  SSD1306_Init();
 8001a84:	f7ff fb78 	bl	8001178 <SSD1306_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001a88:	4825      	ldr	r0, [pc, #148]	; (8001b20 <main+0xd0>)
 8001a8a:	f003 fbdb 	bl	8005244 <HAL_TIM_Base_Start_IT>

  Ds18b20_Init_simple();
 8001a8e:	f7fe ff57 	bl	8000940 <Ds18b20_Init_simple>

  opening();
 8001a92:	f7ff f897 	bl	8000bc4 <opening>



  SSD1306_UpdateScreen(); //display
 8001a96:	f7ff fc33 	bl	8001300 <SSD1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_ADC_Start(&hadc1);
 8001a9a:	4822      	ldr	r0, [pc, #136]	; (8001b24 <main+0xd4>)
 8001a9c:	f000 fec0 	bl	8002820 <HAL_ADC_Start>
  while (1)
  {



	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	481f      	ldr	r0, [pc, #124]	; (8001b24 <main+0xd4>)
 8001aa6:	f000 ff69 	bl	800297c <HAL_ADC_PollForConversion>

	  m_adc_value=HAL_ADC_GetValue(&hadc1);
 8001aaa:	481e      	ldr	r0, [pc, #120]	; (8001b24 <main+0xd4>)
 8001aac:	f001 f86c 	bl	8002b88 <HAL_ADC_GetValue>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	4b1c      	ldr	r3, [pc, #112]	; (8001b28 <main+0xd8>)
 8001ab6:	801a      	strh	r2, [r3, #0]

	  if (m_adc_value>1){
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	; (8001b28 <main+0xd8>)
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d926      	bls.n	8001b0e <main+0xbe>
		   m_voltage=(float) m_adc_value*(3.294f/4095.0f);
 8001ac0:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <main+0xd8>)
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fe89 	bl	80007dc <__aeabi_ui2f>
 8001aca:	4603      	mov	r3, r0
 8001acc:	4917      	ldr	r1, [pc, #92]	; (8001b2c <main+0xdc>)
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fb3e 	bl	8000150 <__aeabi_fmul>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fefe 	bl	80008d8 <__aeabi_f2uiz>
 8001adc:	4603      	mov	r3, r0
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <main+0xe0>)
 8001ae2:	801a      	strh	r2, [r3, #0]
		   m_voltage+=0.055;
 8001ae4:	4b12      	ldr	r3, [pc, #72]	; (8001b30 <main+0xe0>)
 8001ae6:	881b      	ldrh	r3, [r3, #0]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd37 	bl	800055c <__aeabi_i2d>
 8001aee:	a30a      	add	r3, pc, #40	; (adr r3, 8001b18 <main+0xc8>)
 8001af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af4:	f7fe fbe6 	bl	80002c4 <__adddf3>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7fe fd96 	bl	8000630 <__aeabi_d2uiz>
 8001b04:	4603      	mov	r3, r0
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <main+0xe0>)
 8001b0a:	801a      	strh	r2, [r3, #0]
 8001b0c:	e7c8      	b.n	8001aa0 <main+0x50>
	  }else{
		  m_voltage=0.0;
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <main+0xe0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001b14:	e7c4      	b.n	8001aa0 <main+0x50>
 8001b16:	bf00      	nop
 8001b18:	c28f5c29 	.word	0xc28f5c29
 8001b1c:	3fac28f5 	.word	0x3fac28f5
 8001b20:	200005f8 	.word	0x200005f8
 8001b24:	200004e8 	.word	0x200004e8
 8001b28:	200004e2 	.word	0x200004e2
 8001b2c:	3a52de13 	.word	0x3a52de13
 8001b30:	200004e4 	.word	0x200004e4

08001b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b094      	sub	sp, #80	; 0x50
 8001b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b3e:	2228      	movs	r2, #40	; 0x28
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f004 f832 	bl	8005bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b48:	f107 0314 	add.w	r3, r7, #20
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b64:	2301      	movs	r3, #1
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b72:	2301      	movs	r3, #1
 8001b74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b76:	2302      	movs	r3, #2
 8001b78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001b80:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f002 fd44 	bl	8004618 <HAL_RCC_OscConfig>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b96:	f000 fa25 	bl	8001fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b9a:	230f      	movs	r3, #15
 8001b9c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001baa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	2102      	movs	r1, #2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f002 ffb0 	bl	8004b1c <HAL_RCC_ClockConfig>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001bc2:	f000 fa0f 	bl	8001fe4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bce:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 f930 	bl	8004e38 <HAL_RCCEx_PeriphCLKConfig>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001bde:	f000 fa01 	bl	8001fe4 <Error_Handler>
  }
}
 8001be2:	bf00      	nop
 8001be4:	3750      	adds	r7, #80	; 0x50
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08a      	sub	sp, #40	; 0x28
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bf2:	f107 031c 	add.w	r3, r7, #28
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]
 8001bfc:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001bfe:	463b      	mov	r3, r7
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
 8001c0c:	615a      	str	r2, [r3, #20]
 8001c0e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001c10:	4b26      	ldr	r3, [pc, #152]	; (8001cac <MX_ADC1_Init+0xc0>)
 8001c12:	4a27      	ldr	r2, [pc, #156]	; (8001cb0 <MX_ADC1_Init+0xc4>)
 8001c14:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c16:	4b25      	ldr	r3, [pc, #148]	; (8001cac <MX_ADC1_Init+0xc0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c1c:	4b23      	ldr	r3, [pc, #140]	; (8001cac <MX_ADC1_Init+0xc0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <MX_ADC1_Init+0xc0>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c28:	4b20      	ldr	r3, [pc, #128]	; (8001cac <MX_ADC1_Init+0xc0>)
 8001c2a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c2e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c30:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <MX_ADC1_Init+0xc0>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c36:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <MX_ADC1_Init+0xc0>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c3c:	481b      	ldr	r0, [pc, #108]	; (8001cac <MX_ADC1_Init+0xc0>)
 8001c3e:	f000 fd17 	bl	8002670 <HAL_ADC_Init>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_ADC1_Init+0x60>
  {
    Error_Handler();
 8001c48:	f000 f9cc 	bl	8001fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	61fb      	str	r3, [r7, #28]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c50:	2301      	movs	r3, #1
 8001c52:	623b      	str	r3, [r7, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8001c54:	2303      	movs	r3, #3
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4813      	ldr	r0, [pc, #76]	; (8001cac <MX_ADC1_Init+0xc0>)
 8001c60:	f000 ff9e 	bl	8002ba0 <HAL_ADC_ConfigChannel>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 8001c6a:	f000 f9bb 	bl	8001fe4 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001c72:	2301      	movs	r3, #1
 8001c74:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 1;
 8001c76:	2301      	movs	r3, #1
 8001c78:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 8001c7e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001c82:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001c84:	2300      	movs	r3, #0
 8001c86:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001c90:	463b      	mov	r3, r7
 8001c92:	4619      	mov	r1, r3
 8001c94:	4805      	ldr	r0, [pc, #20]	; (8001cac <MX_ADC1_Init+0xc0>)
 8001c96:	f001 f917 	bl	8002ec8 <HAL_ADCEx_InjectedConfigChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_ADC1_Init+0xb8>
  {
    Error_Handler();
 8001ca0:	f000 f9a0 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ca4:	bf00      	nop
 8001ca6:	3728      	adds	r7, #40	; 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	200004e8 	.word	0x200004e8
 8001cb0:	40012400 	.word	0x40012400

08001cb4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <MX_I2C2_Init+0x50>)
 8001cba:	4a13      	ldr	r2, [pc, #76]	; (8001d08 <MX_I2C2_Init+0x54>)
 8001cbc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001cbe:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <MX_I2C2_Init+0x50>)
 8001cc0:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <MX_I2C2_Init+0x58>)
 8001cc2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_I2C2_Init+0x50>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 254;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	; (8001d04 <MX_I2C2_Init+0x50>)
 8001ccc:	22fe      	movs	r2, #254	; 0xfe
 8001cce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <MX_I2C2_Init+0x50>)
 8001cd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cd6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_ENABLE;
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <MX_I2C2_Init+0x50>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 176;
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <MX_I2C2_Init+0x50>)
 8001ce0:	22b0      	movs	r2, #176	; 0xb0
 8001ce2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ce4:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <MX_I2C2_Init+0x50>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_I2C2_Init+0x50>)
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cf0:	4804      	ldr	r0, [pc, #16]	; (8001d04 <MX_I2C2_Init+0x50>)
 8001cf2:	f001 fec7 	bl	8003a84 <HAL_I2C_Init>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001cfc:	f000 f972 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000055c 	.word	0x2000055c
 8001d08:	40005800 	.word	0x40005800
 8001d0c:	00061a80 	.word	0x00061a80

08001d10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d16:	f107 0308 	add.w	r3, r7, #8
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d24:	463b      	mov	r3, r7
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d2c:	4b1d      	ldr	r3, [pc, #116]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8001d34:	4b1b      	ldr	r3, [pc, #108]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d36:	2247      	movs	r2, #71	; 0x47
 8001d38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8001d40:	4b18      	ldr	r3, [pc, #96]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d48:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d4e:	4b15      	ldr	r3, [pc, #84]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d54:	4813      	ldr	r0, [pc, #76]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d56:	f003 f9db 	bl	8005110 <HAL_TIM_Base_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001d60:	f000 f940 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	4619      	mov	r1, r3
 8001d70:	480c      	ldr	r0, [pc, #48]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d72:	f003 fbc1 	bl	80054f8 <HAL_TIM_ConfigClockSource>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001d7c:	f000 f932 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d80:	2300      	movs	r3, #0
 8001d82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d88:	463b      	mov	r3, r7
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4805      	ldr	r0, [pc, #20]	; (8001da4 <MX_TIM2_Init+0x94>)
 8001d8e:	f003 fd9f 	bl	80058d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d98:	f000 f924 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	3718      	adds	r7, #24
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200005b0 	.word	0x200005b0

08001da8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dae:	f107 0308 	add.w	r3, r7, #8
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]
 8001dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <MX_TIM3_Init+0x90>)
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <MX_TIM3_Init+0x94>)
 8001dc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8001dca:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <MX_TIM3_Init+0x90>)
 8001dcc:	2247      	movs	r2, #71	; 0x47
 8001dce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <MX_TIM3_Init+0x90>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50-1;
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <MX_TIM3_Init+0x90>)
 8001dd8:	2231      	movs	r2, #49	; 0x31
 8001dda:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <MX_TIM3_Init+0x90>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <MX_TIM3_Init+0x90>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001de8:	4813      	ldr	r0, [pc, #76]	; (8001e38 <MX_TIM3_Init+0x90>)
 8001dea:	f003 f991 	bl	8005110 <HAL_TIM_Base_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001df4:	f000 f8f6 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dfe:	f107 0308 	add.w	r3, r7, #8
 8001e02:	4619      	mov	r1, r3
 8001e04:	480c      	ldr	r0, [pc, #48]	; (8001e38 <MX_TIM3_Init+0x90>)
 8001e06:	f003 fb77 	bl	80054f8 <HAL_TIM_ConfigClockSource>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001e10:	f000 f8e8 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e14:	2300      	movs	r3, #0
 8001e16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4805      	ldr	r0, [pc, #20]	; (8001e38 <MX_TIM3_Init+0x90>)
 8001e22:	f003 fd55 	bl	80058d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001e2c:	f000 f8da 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e30:	bf00      	nop
 8001e32:	3718      	adds	r7, #24
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	200005f8 	.word	0x200005f8
 8001e3c:	40000400 	.word	0x40000400

08001e40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	; (8001e90 <MX_USART1_UART_Init+0x50>)
 8001e48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e66:	220c      	movs	r2, #12
 8001e68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <MX_USART1_UART_Init+0x4c>)
 8001e78:	f003 fd9a 	bl	80059b0 <HAL_UART_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e82:	f000 f8af 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000640 	.word	0x20000640
 8001e90:	40013800 	.word	0x40013800

08001e94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <MX_DMA_Init+0x38>)
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ecc <MX_DMA_Init+0x38>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	6153      	str	r3, [r2, #20]
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <MX_DMA_Init+0x38>)
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	200b      	movs	r0, #11
 8001eb8:	f001 fa77 	bl	80033aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ebc:	200b      	movs	r0, #11
 8001ebe:	f001 fa90 	bl	80033e2 <HAL_NVIC_EnableIRQ>

}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000

08001ed0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee4:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <MX_GPIO_Init+0x108>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4a3b      	ldr	r2, [pc, #236]	; (8001fd8 <MX_GPIO_Init+0x108>)
 8001eea:	f043 0310 	orr.w	r3, r3, #16
 8001eee:	6193      	str	r3, [r2, #24]
 8001ef0:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <MX_GPIO_Init+0x108>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001efc:	4b36      	ldr	r3, [pc, #216]	; (8001fd8 <MX_GPIO_Init+0x108>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	4a35      	ldr	r2, [pc, #212]	; (8001fd8 <MX_GPIO_Init+0x108>)
 8001f02:	f043 0320 	orr.w	r3, r3, #32
 8001f06:	6193      	str	r3, [r2, #24]
 8001f08:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <MX_GPIO_Init+0x108>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b30      	ldr	r3, [pc, #192]	; (8001fd8 <MX_GPIO_Init+0x108>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a2f      	ldr	r2, [pc, #188]	; (8001fd8 <MX_GPIO_Init+0x108>)
 8001f1a:	f043 0304 	orr.w	r3, r3, #4
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b2d      	ldr	r3, [pc, #180]	; (8001fd8 <MX_GPIO_Init+0x108>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	607b      	str	r3, [r7, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2c:	4b2a      	ldr	r3, [pc, #168]	; (8001fd8 <MX_GPIO_Init+0x108>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	4a29      	ldr	r2, [pc, #164]	; (8001fd8 <MX_GPIO_Init+0x108>)
 8001f32:	f043 0308 	orr.w	r3, r3, #8
 8001f36:	6193      	str	r3, [r2, #24]
 8001f38:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <MX_GPIO_Init+0x108>)
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	603b      	str	r3, [r7, #0]
 8001f42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin|PB5_RELAY_ON_OFF_CTRL_Pin
 8001f44:	2201      	movs	r2, #1
 8001f46:	f24e 01e0 	movw	r1, #57568	; 0xe0e0
 8001f4a:	4824      	ldr	r0, [pc, #144]	; (8001fdc <MX_GPIO_Init+0x10c>)
 8001f4c:	f001 fd5f 	bl	8003a0e <HAL_GPIO_WritePin>
                          |PB6_LED1_Pin|PB7_LED2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pins : PB0_TEMP_SET_UP_Pin PB1_TEMP_SET_UP_Pin PB2_TEMP_SET_UP_Pin */
  GPIO_InitStruct.Pin = PB0_TEMP_SET_UP_Pin|PB1_TEMP_SET_UP_Pin|PB2_TEMP_SET_UP_Pin;
 8001f50:	2307      	movs	r3, #7
 8001f52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f54:	4b22      	ldr	r3, [pc, #136]	; (8001fe0 <MX_GPIO_Init+0x110>)
 8001f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	4619      	mov	r1, r3
 8001f62:	481e      	ldr	r0, [pc, #120]	; (8001fdc <MX_GPIO_Init+0x10c>)
 8001f64:	f001 fbb8 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12_START_SW_PIN_Pin */
  GPIO_InitStruct.Pin = PB12_START_SW_PIN_Pin;
 8001f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PB12_START_SW_PIN_GPIO_Port, &GPIO_InitStruct);
 8001f76:	f107 0310 	add.w	r3, r7, #16
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4817      	ldr	r0, [pc, #92]	; (8001fdc <MX_GPIO_Init+0x10c>)
 8001f7e:	f001 fbab 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_RCLK_Pin FND_DIO_Pin FND_SCLK_Pin PB5_RELAY_ON_OFF_CTRL_Pin
                           PB6_LED1_Pin PB7_LED2_Pin */
  GPIO_InitStruct.Pin = FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin|PB5_RELAY_ON_OFF_CTRL_Pin
 8001f82:	f24e 03e0 	movw	r3, #57568	; 0xe0e0
 8001f86:	613b      	str	r3, [r7, #16]
                          |PB6_LED1_Pin|PB7_LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f90:	2303      	movs	r3, #3
 8001f92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f94:	f107 0310 	add.w	r3, r7, #16
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4810      	ldr	r0, [pc, #64]	; (8001fdc <MX_GPIO_Init+0x10c>)
 8001f9c:	f001 fb9c 	bl	80036d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 9, 0);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2109      	movs	r1, #9
 8001fa4:	2006      	movs	r0, #6
 8001fa6:	f001 fa00 	bl	80033aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001faa:	2006      	movs	r0, #6
 8001fac:	f001 fa19 	bl	80033e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 9, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2109      	movs	r1, #9
 8001fb4:	2007      	movs	r0, #7
 8001fb6:	f001 f9f8 	bl	80033aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001fba:	2007      	movs	r0, #7
 8001fbc:	f001 fa11 	bl	80033e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 9, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2109      	movs	r1, #9
 8001fc4:	2008      	movs	r0, #8
 8001fc6:	f001 f9f0 	bl	80033aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001fca:	2008      	movs	r0, #8
 8001fcc:	f001 fa09 	bl	80033e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fd0:	bf00      	nop
 8001fd2:	3720      	adds	r7, #32
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40010c00 	.word	0x40010c00
 8001fe0:	10110000 	.word	0x10110000

08001fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe8:	b672      	cpsid	i
}
 8001fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fec:	e7fe      	b.n	8001fec <Error_Handler+0x8>
	...

08001ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ff6:	4b15      	ldr	r3, [pc, #84]	; (800204c <HAL_MspInit+0x5c>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	4a14      	ldr	r2, [pc, #80]	; (800204c <HAL_MspInit+0x5c>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6193      	str	r3, [r2, #24]
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_MspInit+0x5c>)
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800200e:	4b0f      	ldr	r3, [pc, #60]	; (800204c <HAL_MspInit+0x5c>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	4a0e      	ldr	r2, [pc, #56]	; (800204c <HAL_MspInit+0x5c>)
 8002014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002018:	61d3      	str	r3, [r2, #28]
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <HAL_MspInit+0x5c>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_MspInit+0x60>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <HAL_MspInit+0x60>)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	bc80      	pop	{r7}
 800204a:	4770      	bx	lr
 800204c:	40021000 	.word	0x40021000
 8002050:	40010000 	.word	0x40010000

08002054 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a28      	ldr	r2, [pc, #160]	; (8002110 <HAL_ADC_MspInit+0xbc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d149      	bne.n	8002108 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002074:	4b27      	ldr	r3, [pc, #156]	; (8002114 <HAL_ADC_MspInit+0xc0>)
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	4a26      	ldr	r2, [pc, #152]	; (8002114 <HAL_ADC_MspInit+0xc0>)
 800207a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800207e:	6193      	str	r3, [r2, #24]
 8002080:	4b24      	ldr	r3, [pc, #144]	; (8002114 <HAL_ADC_MspInit+0xc0>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002088:	60fb      	str	r3, [r7, #12]
 800208a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208c:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_ADC_MspInit+0xc0>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4a20      	ldr	r2, [pc, #128]	; (8002114 <HAL_ADC_MspInit+0xc0>)
 8002092:	f043 0304 	orr.w	r3, r3, #4
 8002096:	6193      	str	r3, [r2, #24]
 8002098:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <HAL_ADC_MspInit+0xc0>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 80020a4:	2314      	movs	r3, #20
 80020a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020a8:	2303      	movs	r3, #3
 80020aa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ac:	f107 0310 	add.w	r3, r7, #16
 80020b0:	4619      	mov	r1, r3
 80020b2:	4819      	ldr	r0, [pc, #100]	; (8002118 <HAL_ADC_MspInit+0xc4>)
 80020b4:	f001 fb10 	bl	80036d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80020b8:	4b18      	ldr	r3, [pc, #96]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020ba:	4a19      	ldr	r2, [pc, #100]	; (8002120 <HAL_ADC_MspInit+0xcc>)
 80020bc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020be:	4b17      	ldr	r3, [pc, #92]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80020ca:	4b14      	ldr	r3, [pc, #80]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020d6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80020d8:	4b10      	ldr	r3, [pc, #64]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020de:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80020e0:	4b0e      	ldr	r3, [pc, #56]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020e2:	2220      	movs	r2, #32
 80020e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80020e6:	4b0d      	ldr	r3, [pc, #52]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80020ec:	480b      	ldr	r0, [pc, #44]	; (800211c <HAL_ADC_MspInit+0xc8>)
 80020ee:	f001 f993 	bl	8003418 <HAL_DMA_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80020f8:	f7ff ff74 	bl	8001fe4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a07      	ldr	r2, [pc, #28]	; (800211c <HAL_ADC_MspInit+0xc8>)
 8002100:	621a      	str	r2, [r3, #32]
 8002102:	4a06      	ldr	r2, [pc, #24]	; (800211c <HAL_ADC_MspInit+0xc8>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40012400 	.word	0x40012400
 8002114:	40021000 	.word	0x40021000
 8002118:	40010800 	.word	0x40010800
 800211c:	20000518 	.word	0x20000518
 8002120:	40020008 	.word	0x40020008

08002124 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b088      	sub	sp, #32
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0310 	add.w	r3, r7, #16
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a16      	ldr	r2, [pc, #88]	; (8002198 <HAL_I2C_MspInit+0x74>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d124      	bne.n	800218e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002144:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_I2C_MspInit+0x78>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	4a14      	ldr	r2, [pc, #80]	; (800219c <HAL_I2C_MspInit+0x78>)
 800214a:	f043 0308 	orr.w	r3, r3, #8
 800214e:	6193      	str	r3, [r2, #24]
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_I2C_MspInit+0x78>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0308 	and.w	r3, r3, #8
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800215c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002160:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002162:	2312      	movs	r3, #18
 8002164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002166:	2303      	movs	r3, #3
 8002168:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800216a:	f107 0310 	add.w	r3, r7, #16
 800216e:	4619      	mov	r1, r3
 8002170:	480b      	ldr	r0, [pc, #44]	; (80021a0 <HAL_I2C_MspInit+0x7c>)
 8002172:	f001 fab1 	bl	80036d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_I2C_MspInit+0x78>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	4a08      	ldr	r2, [pc, #32]	; (800219c <HAL_I2C_MspInit+0x78>)
 800217c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002180:	61d3      	str	r3, [r2, #28]
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_I2C_MspInit+0x78>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800218e:	bf00      	nop
 8002190:	3720      	adds	r7, #32
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40005800 	.word	0x40005800
 800219c:	40021000 	.word	0x40021000
 80021a0:	40010c00 	.word	0x40010c00

080021a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	d114      	bne.n	80021e0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b6:	4b19      	ldr	r3, [pc, #100]	; (800221c <HAL_TIM_Base_MspInit+0x78>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	4a18      	ldr	r2, [pc, #96]	; (800221c <HAL_TIM_Base_MspInit+0x78>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	61d3      	str	r3, [r2, #28]
 80021c2:	4b16      	ldr	r3, [pc, #88]	; (800221c <HAL_TIM_Base_MspInit+0x78>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	201c      	movs	r0, #28
 80021d4:	f001 f8e9 	bl	80033aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021d8:	201c      	movs	r0, #28
 80021da:	f001 f902 	bl	80033e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021de:	e018      	b.n	8002212 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <HAL_TIM_Base_MspInit+0x7c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d113      	bne.n	8002212 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_TIM_Base_MspInit+0x78>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	4a0b      	ldr	r2, [pc, #44]	; (800221c <HAL_TIM_Base_MspInit+0x78>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	61d3      	str	r3, [r2, #28]
 80021f6:	4b09      	ldr	r3, [pc, #36]	; (800221c <HAL_TIM_Base_MspInit+0x78>)
 80021f8:	69db      	ldr	r3, [r3, #28]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	210a      	movs	r1, #10
 8002206:	201d      	movs	r0, #29
 8002208:	f001 f8cf 	bl	80033aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800220c:	201d      	movs	r0, #29
 800220e:	f001 f8e8 	bl	80033e2 <HAL_NVIC_EnableIRQ>
}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	40021000 	.word	0x40021000
 8002220:	40000400 	.word	0x40000400

08002224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0310 	add.w	r3, r7, #16
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a1c      	ldr	r2, [pc, #112]	; (80022b0 <HAL_UART_MspInit+0x8c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d131      	bne.n	80022a8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002244:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <HAL_UART_MspInit+0x90>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_UART_MspInit+0x90>)
 800224a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224e:	6193      	str	r3, [r2, #24]
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_UART_MspInit+0x90>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225c:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_UART_MspInit+0x90>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <HAL_UART_MspInit+0x90>)
 8002262:	f043 0304 	orr.w	r3, r3, #4
 8002266:	6193      	str	r3, [r2, #24]
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_UART_MspInit+0x90>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002278:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	4619      	mov	r1, r3
 8002288:	480b      	ldr	r0, [pc, #44]	; (80022b8 <HAL_UART_MspInit+0x94>)
 800228a:	f001 fa25 	bl	80036d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800228e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002292:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	f107 0310 	add.w	r3, r7, #16
 80022a0:	4619      	mov	r1, r3
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <HAL_UART_MspInit+0x94>)
 80022a4:	f001 fa18 	bl	80036d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022a8:	bf00      	nop
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40013800 	.word	0x40013800
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40010800 	.word	0x40010800

080022bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80022c0:	e7fe      	b.n	80022c0 <NMI_Handler+0x4>

080022c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c6:	e7fe      	b.n	80022c6 <HardFault_Handler+0x4>

080022c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022cc:	e7fe      	b.n	80022cc <MemManage_Handler+0x4>

080022ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d2:	e7fe      	b.n	80022d2 <BusFault_Handler+0x4>

080022d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d8:	e7fe      	b.n	80022d8 <UsageFault_Handler+0x4>

080022da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr

080022e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022f6:	bf00      	nop
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002302:	f000 f975 	bl	80025f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_TEMP_SET_UP_Pin);
 8002310:	2001      	movs	r0, #1
 8002312:	f001 fb95 	bl	8003a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
	if ((HAL_GetTick() - m_button_before_time) > BUTTON_GAP) {
 8002316:	f000 f97d 	bl	8002614 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	4b08      	ldr	r3, [pc, #32]	; (8002340 <EXTI0_IRQHandler+0x34>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	1ad2      	subs	r2, r2, r3
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <EXTI0_IRQHandler+0x38>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d902      	bls.n	8002330 <EXTI0_IRQHandler+0x24>
		g_f_sw_up = 1;
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <EXTI0_IRQHandler+0x3c>)
 800232c:	2201      	movs	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]
	}

	m_button_before_time = HAL_GetTick();
 8002330:	f000 f970 	bl	8002614 <HAL_GetTick>
 8002334:	4603      	mov	r3, r0
 8002336:	4a02      	ldr	r2, [pc, #8]	; (8002340 <EXTI0_IRQHandler+0x34>)
 8002338:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI0_IRQn 1 */
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000688 	.word	0x20000688
 8002344:	2000000c 	.word	0x2000000c
 8002348:	200004de 	.word	0x200004de

0800234c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB1_TEMP_SET_UP_Pin);
 8002350:	2002      	movs	r0, #2
 8002352:	f001 fb75 	bl	8003a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
	if ((HAL_GetTick() - m_button_before_time) > BUTTON_GAP) {
 8002356:	f000 f95d 	bl	8002614 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <EXTI1_IRQHandler+0x34>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	1ad2      	subs	r2, r2, r3
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <EXTI1_IRQHandler+0x38>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d902      	bls.n	8002370 <EXTI1_IRQHandler+0x24>
		g_f_sw_down = 1;
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <EXTI1_IRQHandler+0x3c>)
 800236c:	2201      	movs	r2, #1
 800236e:	701a      	strb	r2, [r3, #0]
	}
	m_button_before_time = HAL_GetTick();
 8002370:	f000 f950 	bl	8002614 <HAL_GetTick>
 8002374:	4603      	mov	r3, r0
 8002376:	4a02      	ldr	r2, [pc, #8]	; (8002380 <EXTI1_IRQHandler+0x34>)
 8002378:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI1_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000688 	.word	0x20000688
 8002384:	2000000c 	.word	0x2000000c
 8002388:	200004e0 	.word	0x200004e0

0800238c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB2_TEMP_SET_UP_Pin);
 8002390:	2004      	movs	r0, #4
 8002392:	f001 fb55 	bl	8003a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
	if ((HAL_GetTick() - m_button_before_time) > BUTTON_GAP) {
 8002396:	f000 f93d 	bl	8002614 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <EXTI2_IRQHandler+0x34>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	1ad2      	subs	r2, r2, r3
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <EXTI2_IRQHandler+0x38>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d902      	bls.n	80023b0 <EXTI2_IRQHandler+0x24>

		g_f_sw_fix = 1;
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <EXTI2_IRQHandler+0x3c>)
 80023ac:	2201      	movs	r2, #1
 80023ae:	701a      	strb	r2, [r3, #0]
	}
	m_button_before_time = HAL_GetTick();
 80023b0:	f000 f930 	bl	8002614 <HAL_GetTick>
 80023b4:	4603      	mov	r3, r0
 80023b6:	4a02      	ldr	r2, [pc, #8]	; (80023c0 <EXTI2_IRQHandler+0x34>)
 80023b8:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI2_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	20000688 	.word	0x20000688
 80023c4:	2000000c 	.word	0x2000000c
 80023c8:	200004df 	.word	0x200004df

080023cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <DMA1_Channel1_IRQHandler+0x10>)
 80023d2:	f001 f87b 	bl	80034cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000518 	.word	0x20000518

080023e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023e4:	4802      	ldr	r0, [pc, #8]	; (80023f0 <TIM2_IRQHandler+0x10>)
 80023e6:	f002 ff7f 	bl	80052e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200005b0 	.word	0x200005b0

080023f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if (m_power_sw_timer > POWER_SW_CHECK_TIME) {
 80023f8:	4b23      	ldr	r3, [pc, #140]	; (8002488 <TIM3_IRQHandler+0x94>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b23      	ldr	r3, [pc, #140]	; (800248c <TIM3_IRQHandler+0x98>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d90e      	bls.n	8002422 <TIM3_IRQHandler+0x2e>
		if (getSwstate() == ON_t) {
 8002404:	f7ff f97c 	bl	8001700 <getSwstate>
 8002408:	4603      	mov	r3, r0
 800240a:	2b01      	cmp	r3, #1
 800240c:	d103      	bne.n	8002416 <TIM3_IRQHandler+0x22>
			led1OnOff(ON_t);
 800240e:	2001      	movs	r0, #1
 8002410:	f7ff fb02 	bl	8001a18 <led1OnOff>
 8002414:	e002      	b.n	800241c <TIM3_IRQHandler+0x28>

		} else {
			led1OnOff(OFF_t);
 8002416:	2000      	movs	r0, #0
 8002418:	f7ff fafe 	bl	8001a18 <led1OnOff>
		}
		m_power_sw_timer = 0;
 800241c:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <TIM3_IRQHandler+0x94>)
 800241e:	2200      	movs	r2, #0
 8002420:	601a      	str	r2, [r3, #0]
	}

	if (m_toggle_timer > TOGGLE_TIME) {
 8002422:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <TIM3_IRQHandler+0x9c>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <TIM3_IRQHandler+0xa0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d904      	bls.n	8002438 <TIM3_IRQHandler+0x44>
		toggleScreen();
 800242e:	f7fe fc7d 	bl	8000d2c <toggleScreen>
		m_toggle_timer = 0;
 8002432:	4b17      	ldr	r3, [pc, #92]	; (8002490 <TIM3_IRQHandler+0x9c>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
	}

	m_toggle_timer++;
 8002438:	4b15      	ldr	r3, [pc, #84]	; (8002490 <TIM3_IRQHandler+0x9c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3301      	adds	r3, #1
 800243e:	4a14      	ldr	r2, [pc, #80]	; (8002490 <TIM3_IRQHandler+0x9c>)
 8002440:	6013      	str	r3, [r2, #0]
	m_power_sw_timer++;
 8002442:	4b11      	ldr	r3, [pc, #68]	; (8002488 <TIM3_IRQHandler+0x94>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	3301      	adds	r3, #1
 8002448:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <TIM3_IRQHandler+0x94>)
 800244a:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800244c:	4812      	ldr	r0, [pc, #72]	; (8002498 <TIM3_IRQHandler+0xa4>)
 800244e:	f002 ff4b 	bl	80052e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
	if (isTemperSensorInit() && !isBusy()) {
 8002452:	f7fe fa61 	bl	8000918 <isTemperSensorInit>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <TIM3_IRQHandler+0x90>
 800245c:	f7fe fa68 	bl	8000930 <isBusy>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10e      	bne.n	8002484 <TIM3_IRQHandler+0x90>
		digit4_temper((int) (getCurrentTemper() * 10));
 8002466:	f7fe fba3 	bl	8000bb0 <getCurrentTemper>
 800246a:	4603      	mov	r3, r0
 800246c:	490b      	ldr	r1, [pc, #44]	; (800249c <TIM3_IRQHandler+0xa8>)
 800246e:	4618      	mov	r0, r3
 8002470:	f7fd fe6e 	bl	8000150 <__aeabi_fmul>
 8002474:	4603      	mov	r3, r0
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe fa08 	bl	800088c <__aeabi_f2iz>
 800247c:	4603      	mov	r3, r0
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff fa08 	bl	8001894 <digit4_temper>
	}
  /* USER CODE END TIM3_IRQn 1 */
}
 8002484:	bf00      	nop
 8002486:	bd80      	pop	{r7, pc}
 8002488:	2000068c 	.word	0x2000068c
 800248c:	20000010 	.word	0x20000010
 8002490:	20000690 	.word	0x20000690
 8002494:	20000014 	.word	0x20000014
 8002498:	200005f8 	.word	0x200005f8
 800249c:	41200000 	.word	0x41200000

080024a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024a8:	4a14      	ldr	r2, [pc, #80]	; (80024fc <_sbrk+0x5c>)
 80024aa:	4b15      	ldr	r3, [pc, #84]	; (8002500 <_sbrk+0x60>)
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b4:	4b13      	ldr	r3, [pc, #76]	; (8002504 <_sbrk+0x64>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024bc:	4b11      	ldr	r3, [pc, #68]	; (8002504 <_sbrk+0x64>)
 80024be:	4a12      	ldr	r2, [pc, #72]	; (8002508 <_sbrk+0x68>)
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <_sbrk+0x64>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d207      	bcs.n	80024e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d0:	f003 fb74 	bl	8005bbc <__errno>
 80024d4:	4603      	mov	r3, r0
 80024d6:	220c      	movs	r2, #12
 80024d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024da:	f04f 33ff 	mov.w	r3, #4294967295
 80024de:	e009      	b.n	80024f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e0:	4b08      	ldr	r3, [pc, #32]	; (8002504 <_sbrk+0x64>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024e6:	4b07      	ldr	r3, [pc, #28]	; (8002504 <_sbrk+0x64>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	4a05      	ldr	r2, [pc, #20]	; (8002504 <_sbrk+0x64>)
 80024f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 	 }
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20005000 	.word	0x20005000
 8002500:	00000400 	.word	0x00000400
 8002504:	20000694 	.word	0x20000694
 8002508:	200007e8 	.word	0x200007e8

0800250c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002510:	bf00      	nop
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr

08002518 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002518:	f7ff fff8 	bl	800250c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800251c:	480b      	ldr	r0, [pc, #44]	; (800254c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800251e:	490c      	ldr	r1, [pc, #48]	; (8002550 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002520:	4a0c      	ldr	r2, [pc, #48]	; (8002554 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002524:	e002      	b.n	800252c <LoopCopyDataInit>

08002526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800252a:	3304      	adds	r3, #4

0800252c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800252c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800252e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002530:	d3f9      	bcc.n	8002526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002532:	4a09      	ldr	r2, [pc, #36]	; (8002558 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002534:	4c09      	ldr	r4, [pc, #36]	; (800255c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002538:	e001      	b.n	800253e <LoopFillZerobss>

0800253a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800253a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800253c:	3204      	adds	r2, #4

0800253e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800253e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002540:	d3fb      	bcc.n	800253a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002542:	f003 fb41 	bl	8005bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002546:	f7ff fa83 	bl	8001a50 <main>
  bx lr
 800254a:	4770      	bx	lr
  ldr r0, =_sdata
 800254c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002550:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002554:	080072f0 	.word	0x080072f0
  ldr r2, =_sbss
 8002558:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800255c:	200007e4 	.word	0x200007e4

08002560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002560:	e7fe      	b.n	8002560 <ADC1_2_IRQHandler>
	...

08002564 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002568:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_Init+0x28>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a07      	ldr	r2, [pc, #28]	; (800258c <HAL_Init+0x28>)
 800256e:	f043 0310 	orr.w	r3, r3, #16
 8002572:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002574:	2003      	movs	r0, #3
 8002576:	f000 ff0d 	bl	8003394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800257a:	200f      	movs	r0, #15
 800257c:	f000 f808 	bl	8002590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002580:	f7ff fd36 	bl	8001ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40022000 	.word	0x40022000

08002590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_InitTick+0x54>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_InitTick+0x58>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4619      	mov	r1, r3
 80025a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 ff25 	bl	80033fe <HAL_SYSTICK_Config>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00e      	b.n	80025dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b0f      	cmp	r3, #15
 80025c2:	d80a      	bhi.n	80025da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c4:	2200      	movs	r2, #0
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	f000 feed 	bl	80033aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d0:	4a06      	ldr	r2, [pc, #24]	; (80025ec <HAL_InitTick+0x5c>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e000      	b.n	80025dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000018 	.word	0x20000018
 80025e8:	20000020 	.word	0x20000020
 80025ec:	2000001c 	.word	0x2000001c

080025f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f4:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_IncTick+0x1c>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_IncTick+0x20>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	4a03      	ldr	r2, [pc, #12]	; (8002610 <HAL_IncTick+0x20>)
 8002602:	6013      	str	r3, [r2, #0]
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	20000020 	.word	0x20000020
 8002610:	20000698 	.word	0x20000698

08002614 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return uwTick;
 8002618:	4b02      	ldr	r3, [pc, #8]	; (8002624 <HAL_GetTick+0x10>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr
 8002624:	20000698 	.word	0x20000698

08002628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002630:	f7ff fff0 	bl	8002614 <HAL_GetTick>
 8002634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002640:	d005      	beq.n	800264e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002642:	4b0a      	ldr	r3, [pc, #40]	; (800266c <HAL_Delay+0x44>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	461a      	mov	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	4413      	add	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800264e:	bf00      	nop
 8002650:	f7ff ffe0 	bl	8002614 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	429a      	cmp	r2, r3
 800265e:	d8f7      	bhi.n	8002650 <HAL_Delay+0x28>
  {
  }
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	20000020 	.word	0x20000020

08002670 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0be      	b.n	8002810 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d109      	bne.n	80026b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff fcd0 	bl	8002054 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fbc5 	bl	8002e44 <ADC_ConversionStop_Disable>
 80026ba:	4603      	mov	r3, r0
 80026bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f040 8099 	bne.w	80027fe <HAL_ADC_Init+0x18e>
 80026cc:	7dfb      	ldrb	r3, [r7, #23]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f040 8095 	bne.w	80027fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026dc:	f023 0302 	bic.w	r3, r3, #2
 80026e0:	f043 0202 	orr.w	r2, r3, #2
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	7b1b      	ldrb	r3, [r3, #12]
 80026f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80026f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002708:	d003      	beq.n	8002712 <HAL_ADC_Init+0xa2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d102      	bne.n	8002718 <HAL_ADC_Init+0xa8>
 8002712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002716:	e000      	b.n	800271a <HAL_ADC_Init+0xaa>
 8002718:	2300      	movs	r3, #0
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7d1b      	ldrb	r3, [r3, #20]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d119      	bne.n	800275c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7b1b      	ldrb	r3, [r3, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d109      	bne.n	8002744 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	3b01      	subs	r3, #1
 8002736:	035a      	lsls	r2, r3, #13
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	e00b      	b.n	800275c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f043 0220 	orr.w	r2, r3, #32
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	f043 0201 	orr.w	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	430a      	orrs	r2, r1
 800276e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	4b28      	ldr	r3, [pc, #160]	; (8002818 <HAL_ADC_Init+0x1a8>)
 8002778:	4013      	ands	r3, r2
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	430b      	orrs	r3, r1
 8002782:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800278c:	d003      	beq.n	8002796 <HAL_ADC_Init+0x126>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d104      	bne.n	80027a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	3b01      	subs	r3, #1
 800279c:	051b      	lsls	r3, r3, #20
 800279e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_ADC_Init+0x1ac>)
 80027bc:	4013      	ands	r3, r2
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d10b      	bne.n	80027dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	f043 0201 	orr.w	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027da:	e018      	b.n	800280e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	f023 0312 	bic.w	r3, r3, #18
 80027e4:	f043 0210 	orr.w	r2, r3, #16
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	f043 0201 	orr.w	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027fc:	e007      	b.n	800280e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	f043 0210 	orr.w	r2, r3, #16
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800280e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	ffe1f7fd 	.word	0xffe1f7fd
 800281c:	ff1f0efe 	.word	0xff1f0efe

08002820 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002832:	2b01      	cmp	r3, #1
 8002834:	d101      	bne.n	800283a <HAL_ADC_Start+0x1a>
 8002836:	2302      	movs	r3, #2
 8002838:	e098      	b.n	800296c <HAL_ADC_Start+0x14c>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 faa4 	bl	8002d90 <ADC_Enable>
 8002848:	4603      	mov	r3, r0
 800284a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800284c:	7bfb      	ldrb	r3, [r7, #15]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f040 8087 	bne.w	8002962 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a41      	ldr	r2, [pc, #260]	; (8002974 <HAL_ADC_Start+0x154>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d105      	bne.n	800287e <HAL_ADC_Start+0x5e>
 8002872:	4b41      	ldr	r3, [pc, #260]	; (8002978 <HAL_ADC_Start+0x158>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d115      	bne.n	80028aa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002894:	2b00      	cmp	r3, #0
 8002896:	d026      	beq.n	80028e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028a8:	e01d      	b.n	80028e6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2f      	ldr	r2, [pc, #188]	; (8002978 <HAL_ADC_Start+0x158>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d004      	beq.n	80028ca <HAL_ADC_Start+0xaa>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2b      	ldr	r2, [pc, #172]	; (8002974 <HAL_ADC_Start+0x154>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d10d      	bne.n	80028e6 <HAL_ADC_Start+0xc6>
 80028ca:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <HAL_ADC_Start+0x158>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d007      	beq.n	80028e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d006      	beq.n	8002900 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	f023 0206 	bic.w	r2, r3, #6
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80028fe:	e002      	b.n	8002906 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f06f 0202 	mvn.w	r2, #2
 8002916:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002922:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002926:	d113      	bne.n	8002950 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800292c:	4a11      	ldr	r2, [pc, #68]	; (8002974 <HAL_ADC_Start+0x154>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d105      	bne.n	800293e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_ADC_Start+0x158>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800293a:	2b00      	cmp	r3, #0
 800293c:	d108      	bne.n	8002950 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800294c:	609a      	str	r2, [r3, #8]
 800294e:	e00c      	b.n	800296a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	e003      	b.n	800296a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800296a:	7bfb      	ldrb	r3, [r7, #15]
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40012800 	.word	0x40012800
 8002978:	40012400 	.word	0x40012400

0800297c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800297c:	b590      	push	{r4, r7, lr}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002992:	f7ff fe3f 	bl	8002614 <HAL_GetTick>
 8002996:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00b      	beq.n	80029be <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	f043 0220 	orr.w	r2, r3, #32
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0d3      	b.n	8002b66 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d131      	bne.n	8002a30 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d12a      	bne.n	8002a30 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80029da:	e021      	b.n	8002a20 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e2:	d01d      	beq.n	8002a20 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <HAL_ADC_PollForConversion+0x7e>
 80029ea:	f7ff fe13 	bl	8002614 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d212      	bcs.n	8002a20 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10b      	bne.n	8002a20 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0c:	f043 0204 	orr.w	r2, r3, #4
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e0a2      	b.n	8002b66 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0d6      	beq.n	80029dc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002a2e:	e070      	b.n	8002b12 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002a30:	4b4f      	ldr	r3, [pc, #316]	; (8002b70 <HAL_ADC_PollForConversion+0x1f4>)
 8002a32:	681c      	ldr	r4, [r3, #0]
 8002a34:	2002      	movs	r0, #2
 8002a36:	f002 fab5 	bl	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6919      	ldr	r1, [r3, #16]
 8002a46:	4b4b      	ldr	r3, [pc, #300]	; (8002b74 <HAL_ADC_PollForConversion+0x1f8>)
 8002a48:	400b      	ands	r3, r1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d118      	bne.n	8002a80 <HAL_ADC_PollForConversion+0x104>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68d9      	ldr	r1, [r3, #12]
 8002a54:	4b48      	ldr	r3, [pc, #288]	; (8002b78 <HAL_ADC_PollForConversion+0x1fc>)
 8002a56:	400b      	ands	r3, r1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d111      	bne.n	8002a80 <HAL_ADC_PollForConversion+0x104>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6919      	ldr	r1, [r3, #16]
 8002a62:	4b46      	ldr	r3, [pc, #280]	; (8002b7c <HAL_ADC_PollForConversion+0x200>)
 8002a64:	400b      	ands	r3, r1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d108      	bne.n	8002a7c <HAL_ADC_PollForConversion+0x100>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68d9      	ldr	r1, [r3, #12]
 8002a70:	4b43      	ldr	r3, [pc, #268]	; (8002b80 <HAL_ADC_PollForConversion+0x204>)
 8002a72:	400b      	ands	r3, r1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d101      	bne.n	8002a7c <HAL_ADC_PollForConversion+0x100>
 8002a78:	2314      	movs	r3, #20
 8002a7a:	e020      	b.n	8002abe <HAL_ADC_PollForConversion+0x142>
 8002a7c:	2329      	movs	r3, #41	; 0x29
 8002a7e:	e01e      	b.n	8002abe <HAL_ADC_PollForConversion+0x142>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	6919      	ldr	r1, [r3, #16]
 8002a86:	4b3d      	ldr	r3, [pc, #244]	; (8002b7c <HAL_ADC_PollForConversion+0x200>)
 8002a88:	400b      	ands	r3, r1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_ADC_PollForConversion+0x120>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68d9      	ldr	r1, [r3, #12]
 8002a94:	4b3a      	ldr	r3, [pc, #232]	; (8002b80 <HAL_ADC_PollForConversion+0x204>)
 8002a96:	400b      	ands	r3, r1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00d      	beq.n	8002ab8 <HAL_ADC_PollForConversion+0x13c>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6919      	ldr	r1, [r3, #16]
 8002aa2:	4b38      	ldr	r3, [pc, #224]	; (8002b84 <HAL_ADC_PollForConversion+0x208>)
 8002aa4:	400b      	ands	r3, r1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d108      	bne.n	8002abc <HAL_ADC_PollForConversion+0x140>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68d9      	ldr	r1, [r3, #12]
 8002ab0:	4b34      	ldr	r3, [pc, #208]	; (8002b84 <HAL_ADC_PollForConversion+0x208>)
 8002ab2:	400b      	ands	r3, r1
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_ADC_PollForConversion+0x140>
 8002ab8:	2354      	movs	r3, #84	; 0x54
 8002aba:	e000      	b.n	8002abe <HAL_ADC_PollForConversion+0x142>
 8002abc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002ac4:	e021      	b.n	8002b0a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d01a      	beq.n	8002b04 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d007      	beq.n	8002ae4 <HAL_ADC_PollForConversion+0x168>
 8002ad4:	f7ff fd9e 	bl	8002614 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d20f      	bcs.n	8002b04 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d90b      	bls.n	8002b04 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	f043 0204 	orr.w	r2, r3, #4
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e030      	b.n	8002b66 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	3301      	adds	r3, #1
 8002b08:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d8d9      	bhi.n	8002ac6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f06f 0212 	mvn.w	r2, #18
 8002b1a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b20:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002b32:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002b36:	d115      	bne.n	8002b64 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d111      	bne.n	8002b64 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d105      	bne.n	8002b64 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5c:	f043 0201 	orr.w	r2, r3, #1
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	371c      	adds	r7, #28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd90      	pop	{r4, r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000018 	.word	0x20000018
 8002b74:	24924924 	.word	0x24924924
 8002b78:	00924924 	.word	0x00924924
 8002b7c:	12492492 	.word	0x12492492
 8002b80:	00492492 	.word	0x00492492
 8002b84:	00249249 	.word	0x00249249

08002b88 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002baa:	2300      	movs	r3, #0
 8002bac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x20>
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	e0dc      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x1da>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b06      	cmp	r3, #6
 8002bce:	d81c      	bhi.n	8002c0a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	685a      	ldr	r2, [r3, #4]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	3b05      	subs	r3, #5
 8002be2:	221f      	movs	r2, #31
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	43db      	mvns	r3, r3
 8002bea:	4019      	ands	r1, r3
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	6818      	ldr	r0, [r3, #0]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3b05      	subs	r3, #5
 8002bfc:	fa00 f203 	lsl.w	r2, r0, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	430a      	orrs	r2, r1
 8002c06:	635a      	str	r2, [r3, #52]	; 0x34
 8002c08:	e03c      	b.n	8002c84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b0c      	cmp	r3, #12
 8002c10:	d81c      	bhi.n	8002c4c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	3b23      	subs	r3, #35	; 0x23
 8002c24:	221f      	movs	r2, #31
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	4019      	ands	r1, r3
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3b23      	subs	r3, #35	; 0x23
 8002c3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	631a      	str	r2, [r3, #48]	; 0x30
 8002c4a:	e01b      	b.n	8002c84 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3b41      	subs	r3, #65	; 0x41
 8002c5e:	221f      	movs	r2, #31
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	4019      	ands	r1, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	3b41      	subs	r3, #65	; 0x41
 8002c78:	fa00 f203 	lsl.w	r2, r0, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b09      	cmp	r3, #9
 8002c8a:	d91c      	bls.n	8002cc6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68d9      	ldr	r1, [r3, #12]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	4613      	mov	r3, r2
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3b1e      	subs	r3, #30
 8002c9e:	2207      	movs	r2, #7
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	4019      	ands	r1, r3
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	6898      	ldr	r0, [r3, #8]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3b1e      	subs	r3, #30
 8002cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	60da      	str	r2, [r3, #12]
 8002cc4:	e019      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6919      	ldr	r1, [r3, #16]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	2207      	movs	r2, #7
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	4019      	ands	r1, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	6898      	ldr	r0, [r3, #8]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	2b10      	cmp	r3, #16
 8002d00:	d003      	beq.n	8002d0a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002d06:	2b11      	cmp	r3, #17
 8002d08:	d132      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1d      	ldr	r2, [pc, #116]	; (8002d84 <HAL_ADC_ConfigChannel+0x1e4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d125      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d126      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002d30:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b10      	cmp	r3, #16
 8002d38:	d11a      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d3a:	4b13      	ldr	r3, [pc, #76]	; (8002d88 <HAL_ADC_ConfigChannel+0x1e8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a13      	ldr	r2, [pc, #76]	; (8002d8c <HAL_ADC_ConfigChannel+0x1ec>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	0c9a      	lsrs	r2, r3, #18
 8002d46:	4613      	mov	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4413      	add	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d50:	e002      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f9      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x1b2>
 8002d5e:	e007      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d64:	f043 0220 	orr.w	r2, r3, #32
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3714      	adds	r7, #20
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	40012400 	.word	0x40012400
 8002d88:	20000018 	.word	0x20000018
 8002d8c:	431bde83 	.word	0x431bde83

08002d90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d040      	beq.n	8002e30 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 0201 	orr.w	r2, r2, #1
 8002dbc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002dbe:	4b1f      	ldr	r3, [pc, #124]	; (8002e3c <ADC_Enable+0xac>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a1f      	ldr	r2, [pc, #124]	; (8002e40 <ADC_Enable+0xb0>)
 8002dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc8:	0c9b      	lsrs	r3, r3, #18
 8002dca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002dcc:	e002      	b.n	8002dd4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f9      	bne.n	8002dce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002dda:	f7ff fc1b 	bl	8002614 <HAL_GetTick>
 8002dde:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002de0:	e01f      	b.n	8002e22 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002de2:	f7ff fc17 	bl	8002614 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d918      	bls.n	8002e22 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d011      	beq.n	8002e22 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e02:	f043 0210 	orr.w	r2, r3, #16
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0e:	f043 0201 	orr.w	r2, r3, #1
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e007      	b.n	8002e32 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d1d8      	bne.n	8002de2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	20000018 	.word	0x20000018
 8002e40:	431bde83 	.word	0x431bde83

08002e44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d12e      	bne.n	8002ebc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0201 	bic.w	r2, r2, #1
 8002e6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002e6e:	f7ff fbd1 	bl	8002614 <HAL_GetTick>
 8002e72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e74:	e01b      	b.n	8002eae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e76:	f7ff fbcd 	bl	8002614 <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d914      	bls.n	8002eae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d10d      	bne.n	8002eae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e96:	f043 0210 	orr.w	r2, r3, #16
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea2:	f043 0201 	orr.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e007      	b.n	8002ebe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	f003 0301 	and.w	r3, r3, #1
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d0dc      	beq.n	8002e76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8002ec8:	b490      	push	{r4, r7}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_ADCEx_InjectedConfigChannel+0x20>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e17d      	b.n	80031e4 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   Note: Scan mode is present by hardware on this device and, if          */
  /*   disabled, discards automatically nb of conversions. Anyway, nb of      */
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d119      	bne.n	8002f2c <HAL_ADCEx_InjectedConfigChannel+0x64>
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d10c      	bne.n	8002f1a <HAL_ADCEx_InjectedConfigChannel+0x52>
    {
      /* Clear the old SQx bits for all injected ranks */
      MODIFY_REG(hadc->Instance->JSQR                             ,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	0d9b      	lsrs	r3, r3, #22
 8002f08:	059b      	lsls	r3, r3, #22
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	6812      	ldr	r2, [r2, #0]
 8002f0e:	03d1      	lsls	r1, r2, #15
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6812      	ldr	r2, [r2, #0]
 8002f14:	430b      	orrs	r3, r1
 8002f16:	6393      	str	r3, [r2, #56]	; 0x38
 8002f18:	e04f      	b.n	8002fba <HAL_ADCEx_InjectedConfigChannel+0xf2>
    /* If another injected rank than rank1 was intended to be set, and could  */
    /* not due to ScanConvMode disabled, error is reported.                   */
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	f043 0220 	orr.w	r2, r3, #32
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	73fb      	strb	r3, [r7, #15]
 8002f2a:	e046      	b.n	8002fba <HAL_ADCEx_InjectedConfigChannel+0xf2>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d82a      	bhi.n	8002f8e <HAL_ADCEx_InjectedConfigChannel+0xc6>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	1ad2      	subs	r2, r2, r3
 8002f48:	4613      	mov	r3, r2
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	4413      	add	r3, r2
 8002f4e:	330f      	adds	r3, #15
 8002f50:	221f      	movs	r2, #31
 8002f52:	fa02 f303 	lsl.w	r3, r2, r3
 8002f56:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	4019      	ands	r1, r3
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	0518      	lsls	r0, r3, #20
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	681c      	ldr	r4, [r3, #0]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	1ad2      	subs	r2, r2, r3
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	330f      	adds	r3, #15
 8002f7c:	fa04 f303 	lsl.w	r3, r4, r3
 8002f80:	ea40 0203 	orr.w	r2, r0, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	639a      	str	r2, [r3, #56]	; 0x38
 8002f8c:	e015      	b.n	8002fba <HAL_ADCEx_InjectedConfigChannel+0xf2>
                                  sConfigInjected->InjectedNbrOfConversion)    );
    }
    else
    {
      /* Clear the old SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	1ad2      	subs	r2, r2, r3
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	330f      	adds	r3, #15
 8002fa6:	221f      	movs	r2, #31
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002fb0:	43da      	mvns	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d00c      	beq.n	8002fe2 <HAL_ADCEx_InjectedConfigChannel+0x11a>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	683a      	ldr	r2, [r7, #0]
 8002fd8:	6991      	ldr	r1, [r2, #24]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	430b      	orrs	r3, r1
 8002fe0:	6093      	str	r3, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	7d5b      	ldrb	r3, [r3, #21]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d115      	bne.n	8003016 <HAL_ADCEx_InjectedConfigChannel+0x14e>
    {
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8002ff2:	d108      	bne.n	8003006 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003002:	605a      	str	r2, [r3, #4]
 8003004:	e007      	b.n	8003016 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	f043 0220 	orr.w	r2, r3, #32
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	7d1b      	ldrb	r3, [r3, #20]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d114      	bne.n	8003048 <HAL_ADCEx_InjectedConfigChannel+0x180>
    {
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	7d5b      	ldrb	r3, [r3, #21]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d108      	bne.n	8003038 <HAL_ADCEx_InjectedConfigChannel+0x170>
      {
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	e007      	b.n	8003048 <HAL_ADCEx_InjectedConfigChannel+0x180>
      } 
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303c:	f043 0220 	orr.w	r2, r3, #32
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	629a      	str	r2, [r3, #40]	; 0x28
        
        tmp_hal_status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2b09      	cmp	r3, #9
 800304e:	d91c      	bls.n	800308a <HAL_ADCEx_InjectedConfigChannel+0x1c2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68d9      	ldr	r1, [r3, #12]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	4613      	mov	r3, r2
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	4413      	add	r3, r2
 8003060:	3b1e      	subs	r3, #30
 8003062:	2207      	movs	r2, #7
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	4019      	ands	r1, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	6898      	ldr	r0, [r3, #8]
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	3b1e      	subs	r3, #30
 800307c:	fa00 f203 	lsl.w	r2, r0, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	60da      	str	r2, [r3, #12]
 8003088:	e019      	b.n	80030be <HAL_ADCEx_InjectedConfigChannel+0x1f6>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel)                      ,
               ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6919      	ldr	r1, [r3, #16]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	2207      	movs	r2, #7
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	4019      	ands	r1, r3
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	6898      	ldr	r0, [r3, #8]
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	fa00 f203 	lsl.w	r2, r0, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b10      	cmp	r3, #16
 80030c4:	d003      	beq.n	80030ce <HAL_ADCEx_InjectedConfigChannel+0x206>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 80030ca:	2b11      	cmp	r3, #17
 80030cc:	d107      	bne.n	80030de <HAL_ADCEx_InjectedConfigChannel+0x216>
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80030dc:	609a      	str	r2, [r3, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d022      	beq.n	800312c <HAL_ADCEx_InjectedConfigChannel+0x264>
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d82e      	bhi.n	8003148 <HAL_ADCEx_InjectedConfigChannel+0x280>
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d002      	beq.n	80030f4 <HAL_ADCEx_InjectedConfigChannel+0x22c>
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d00e      	beq.n	8003110 <HAL_ADCEx_InjectedConfigChannel+0x248>
 80030f2:	e029      	b.n	8003148 <HAL_ADCEx_InjectedConfigChannel+0x280>
  {
    case 1:
      /* Set injected channel 1 offset */
      MODIFY_REG(hadc->Instance->JOFR1,
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80030fe:	f023 030f 	bic.w	r3, r3, #15
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	68d1      	ldr	r1, [r2, #12]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6812      	ldr	r2, [r2, #0]
 800310a:	430b      	orrs	r3, r1
 800310c:	6153      	str	r3, [r2, #20]
                 ADC_JOFR1_JOFFSET1,
                 sConfigInjected->InjectedOffset);
      break;
 800310e:	e029      	b.n	8003164 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 2:
      /* Set injected channel 2 offset */
      MODIFY_REG(hadc->Instance->JOFR2,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800311a:	f023 030f 	bic.w	r3, r3, #15
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	68d1      	ldr	r1, [r2, #12]
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6812      	ldr	r2, [r2, #0]
 8003126:	430b      	orrs	r3, r1
 8003128:	6193      	str	r3, [r2, #24]
                 ADC_JOFR2_JOFFSET2,
                 sConfigInjected->InjectedOffset);
      break;
 800312a:	e01b      	b.n	8003164 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 3:
      /* Set injected channel 3 offset */
      MODIFY_REG(hadc->Instance->JOFR3,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003136:	f023 030f 	bic.w	r3, r3, #15
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	68d1      	ldr	r1, [r2, #12]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	430b      	orrs	r3, r1
 8003144:	61d3      	str	r3, [r2, #28]
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
 8003146:	e00d      	b.n	8003164 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6a1b      	ldr	r3, [r3, #32]
 800314e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003152:	f023 030f 	bic.w	r3, r3, #15
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	68d1      	ldr	r1, [r2, #12]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	430b      	orrs	r3, r1
 8003160:	6213      	str	r3, [r2, #32]
                 ADC_JOFR4_JOFFSET4,
                 sConfigInjected->InjectedOffset);
      break;
 8003162:	bf00      	nop
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2b10      	cmp	r3, #16
 800316a:	d003      	beq.n	8003174 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8003170:	2b11      	cmp	r3, #17
 8003172:	d132      	bne.n	80031da <HAL_ADCEx_InjectedConfigChannel+0x312>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a1d      	ldr	r2, [pc, #116]	; (80031f0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d125      	bne.n	80031ca <HAL_ADCEx_InjectedConfigChannel+0x302>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d126      	bne.n	80031da <HAL_ADCEx_InjectedConfigChannel+0x312>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800319a:	609a      	str	r2, [r3, #8]
        
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	d11a      	bne.n	80031da <HAL_ADCEx_InjectedConfigChannel+0x312>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031a4:	4b13      	ldr	r3, [pc, #76]	; (80031f4 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a13      	ldr	r2, [pc, #76]	; (80031f8 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 80031aa:	fba2 2303 	umull	r2, r3, r2, r3
 80031ae:	0c9a      	lsrs	r2, r3, #18
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031ba:	e002      	b.n	80031c2 <HAL_ADCEx_InjectedConfigChannel+0x2fa>
          {
            wait_loop_index--;
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	3b01      	subs	r3, #1
 80031c0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f9      	bne.n	80031bc <HAL_ADCEx_InjectedConfigChannel+0x2f4>
 80031c8:	e007      	b.n	80031da <HAL_ADCEx_InjectedConfigChannel+0x312>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ce:	f043 0220 	orr.w	r2, r3, #32
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc90      	pop	{r4, r7}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40012400 	.word	0x40012400
 80031f4:	20000018 	.word	0x20000018
 80031f8:	431bde83 	.word	0x431bde83

080031fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f003 0307 	and.w	r3, r3, #7
 800320a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <__NVIC_SetPriorityGrouping+0x44>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003218:	4013      	ands	r3, r2
 800321a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003224:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800322c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800322e:	4a04      	ldr	r2, [pc, #16]	; (8003240 <__NVIC_SetPriorityGrouping+0x44>)
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	60d3      	str	r3, [r2, #12]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	bc80      	pop	{r7}
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003248:	4b04      	ldr	r3, [pc, #16]	; (800325c <__NVIC_GetPriorityGrouping+0x18>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	0a1b      	lsrs	r3, r3, #8
 800324e:	f003 0307 	and.w	r3, r3, #7
}
 8003252:	4618      	mov	r0, r3
 8003254:	46bd      	mov	sp, r7
 8003256:	bc80      	pop	{r7}
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	2b00      	cmp	r3, #0
 8003270:	db0b      	blt.n	800328a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003272:	79fb      	ldrb	r3, [r7, #7]
 8003274:	f003 021f 	and.w	r2, r3, #31
 8003278:	4906      	ldr	r1, [pc, #24]	; (8003294 <__NVIC_EnableIRQ+0x34>)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2001      	movs	r0, #1
 8003282:	fa00 f202 	lsl.w	r2, r0, r2
 8003286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800328a:	bf00      	nop
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr
 8003294:	e000e100 	.word	0xe000e100

08003298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	4603      	mov	r3, r0
 80032a0:	6039      	str	r1, [r7, #0]
 80032a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	db0a      	blt.n	80032c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	490c      	ldr	r1, [pc, #48]	; (80032e4 <__NVIC_SetPriority+0x4c>)
 80032b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b6:	0112      	lsls	r2, r2, #4
 80032b8:	b2d2      	uxtb	r2, r2
 80032ba:	440b      	add	r3, r1
 80032bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032c0:	e00a      	b.n	80032d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	4908      	ldr	r1, [pc, #32]	; (80032e8 <__NVIC_SetPriority+0x50>)
 80032c8:	79fb      	ldrb	r3, [r7, #7]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	3b04      	subs	r3, #4
 80032d0:	0112      	lsls	r2, r2, #4
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	440b      	add	r3, r1
 80032d6:	761a      	strb	r2, [r3, #24]
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	bc80      	pop	{r7}
 80032e0:	4770      	bx	lr
 80032e2:	bf00      	nop
 80032e4:	e000e100 	.word	0xe000e100
 80032e8:	e000ed00 	.word	0xe000ed00

080032ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b089      	sub	sp, #36	; 0x24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	f1c3 0307 	rsb	r3, r3, #7
 8003306:	2b04      	cmp	r3, #4
 8003308:	bf28      	it	cs
 800330a:	2304      	movcs	r3, #4
 800330c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	3304      	adds	r3, #4
 8003312:	2b06      	cmp	r3, #6
 8003314:	d902      	bls.n	800331c <NVIC_EncodePriority+0x30>
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3b03      	subs	r3, #3
 800331a:	e000      	b.n	800331e <NVIC_EncodePriority+0x32>
 800331c:	2300      	movs	r3, #0
 800331e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003320:	f04f 32ff 	mov.w	r2, #4294967295
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43da      	mvns	r2, r3
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	401a      	ands	r2, r3
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003334:	f04f 31ff 	mov.w	r1, #4294967295
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	fa01 f303 	lsl.w	r3, r1, r3
 800333e:	43d9      	mvns	r1, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003344:	4313      	orrs	r3, r2
         );
}
 8003346:	4618      	mov	r0, r3
 8003348:	3724      	adds	r7, #36	; 0x24
 800334a:	46bd      	mov	sp, r7
 800334c:	bc80      	pop	{r7}
 800334e:	4770      	bx	lr

08003350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	3b01      	subs	r3, #1
 800335c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003360:	d301      	bcc.n	8003366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003362:	2301      	movs	r3, #1
 8003364:	e00f      	b.n	8003386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003366:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <SysTick_Config+0x40>)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800336e:	210f      	movs	r1, #15
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	f7ff ff90 	bl	8003298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003378:	4b05      	ldr	r3, [pc, #20]	; (8003390 <SysTick_Config+0x40>)
 800337a:	2200      	movs	r2, #0
 800337c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800337e:	4b04      	ldr	r3, [pc, #16]	; (8003390 <SysTick_Config+0x40>)
 8003380:	2207      	movs	r2, #7
 8003382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	e000e010 	.word	0xe000e010

08003394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f7ff ff2d 	bl	80031fc <__NVIC_SetPriorityGrouping>
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b086      	sub	sp, #24
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	4603      	mov	r3, r0
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
 80033b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033bc:	f7ff ff42 	bl	8003244 <__NVIC_GetPriorityGrouping>
 80033c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	6978      	ldr	r0, [r7, #20]
 80033c8:	f7ff ff90 	bl	80032ec <NVIC_EncodePriority>
 80033cc:	4602      	mov	r2, r0
 80033ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7ff ff5f 	bl	8003298 <__NVIC_SetPriority>
}
 80033da:	bf00      	nop
 80033dc:	3718      	adds	r7, #24
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	4603      	mov	r3, r0
 80033ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff ff35 	bl	8003260 <__NVIC_EnableIRQ>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}

080033fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033fe:	b580      	push	{r7, lr}
 8003400:	b082      	sub	sp, #8
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7ff ffa2 	bl	8003350 <SysTick_Config>
 800340c:	4603      	mov	r3, r0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e043      	b.n	80034b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	4b22      	ldr	r3, [pc, #136]	; (80034c0 <HAL_DMA_Init+0xa8>)
 8003436:	4413      	add	r3, r2
 8003438:	4a22      	ldr	r2, [pc, #136]	; (80034c4 <HAL_DMA_Init+0xac>)
 800343a:	fba2 2303 	umull	r2, r3, r2, r3
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	009a      	lsls	r2, r3, #2
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a1f      	ldr	r2, [pc, #124]	; (80034c8 <HAL_DMA_Init+0xb0>)
 800344a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003462:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003466:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800347c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bc80      	pop	{r7}
 80034be:	4770      	bx	lr
 80034c0:	bffdfff8 	.word	0xbffdfff8
 80034c4:	cccccccd 	.word	0xcccccccd
 80034c8:	40020000 	.word	0x40020000

080034cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	2204      	movs	r2, #4
 80034ea:	409a      	lsls	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d04f      	beq.n	8003594 <HAL_DMA_IRQHandler+0xc8>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f003 0304 	and.w	r3, r3, #4
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d04a      	beq.n	8003594 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d107      	bne.n	800351c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0204 	bic.w	r2, r2, #4
 800351a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a66      	ldr	r2, [pc, #408]	; (80036bc <HAL_DMA_IRQHandler+0x1f0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d029      	beq.n	800357a <HAL_DMA_IRQHandler+0xae>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a65      	ldr	r2, [pc, #404]	; (80036c0 <HAL_DMA_IRQHandler+0x1f4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d022      	beq.n	8003576 <HAL_DMA_IRQHandler+0xaa>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a63      	ldr	r2, [pc, #396]	; (80036c4 <HAL_DMA_IRQHandler+0x1f8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d01a      	beq.n	8003570 <HAL_DMA_IRQHandler+0xa4>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a62      	ldr	r2, [pc, #392]	; (80036c8 <HAL_DMA_IRQHandler+0x1fc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d012      	beq.n	800356a <HAL_DMA_IRQHandler+0x9e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a60      	ldr	r2, [pc, #384]	; (80036cc <HAL_DMA_IRQHandler+0x200>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d00a      	beq.n	8003564 <HAL_DMA_IRQHandler+0x98>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a5f      	ldr	r2, [pc, #380]	; (80036d0 <HAL_DMA_IRQHandler+0x204>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d102      	bne.n	800355e <HAL_DMA_IRQHandler+0x92>
 8003558:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800355c:	e00e      	b.n	800357c <HAL_DMA_IRQHandler+0xb0>
 800355e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003562:	e00b      	b.n	800357c <HAL_DMA_IRQHandler+0xb0>
 8003564:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003568:	e008      	b.n	800357c <HAL_DMA_IRQHandler+0xb0>
 800356a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800356e:	e005      	b.n	800357c <HAL_DMA_IRQHandler+0xb0>
 8003570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003574:	e002      	b.n	800357c <HAL_DMA_IRQHandler+0xb0>
 8003576:	2340      	movs	r3, #64	; 0x40
 8003578:	e000      	b.n	800357c <HAL_DMA_IRQHandler+0xb0>
 800357a:	2304      	movs	r3, #4
 800357c:	4a55      	ldr	r2, [pc, #340]	; (80036d4 <HAL_DMA_IRQHandler+0x208>)
 800357e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8094 	beq.w	80036b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003592:	e08e      	b.n	80036b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	2202      	movs	r2, #2
 800359a:	409a      	lsls	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4013      	ands	r3, r2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d056      	beq.n	8003652 <HAL_DMA_IRQHandler+0x186>
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d051      	beq.n	8003652 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10b      	bne.n	80035d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 020a 	bic.w	r2, r2, #10
 80035ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a38      	ldr	r2, [pc, #224]	; (80036bc <HAL_DMA_IRQHandler+0x1f0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d029      	beq.n	8003632 <HAL_DMA_IRQHandler+0x166>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a37      	ldr	r2, [pc, #220]	; (80036c0 <HAL_DMA_IRQHandler+0x1f4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d022      	beq.n	800362e <HAL_DMA_IRQHandler+0x162>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a35      	ldr	r2, [pc, #212]	; (80036c4 <HAL_DMA_IRQHandler+0x1f8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01a      	beq.n	8003628 <HAL_DMA_IRQHandler+0x15c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a34      	ldr	r2, [pc, #208]	; (80036c8 <HAL_DMA_IRQHandler+0x1fc>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d012      	beq.n	8003622 <HAL_DMA_IRQHandler+0x156>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a32      	ldr	r2, [pc, #200]	; (80036cc <HAL_DMA_IRQHandler+0x200>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00a      	beq.n	800361c <HAL_DMA_IRQHandler+0x150>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a31      	ldr	r2, [pc, #196]	; (80036d0 <HAL_DMA_IRQHandler+0x204>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d102      	bne.n	8003616 <HAL_DMA_IRQHandler+0x14a>
 8003610:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003614:	e00e      	b.n	8003634 <HAL_DMA_IRQHandler+0x168>
 8003616:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800361a:	e00b      	b.n	8003634 <HAL_DMA_IRQHandler+0x168>
 800361c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003620:	e008      	b.n	8003634 <HAL_DMA_IRQHandler+0x168>
 8003622:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003626:	e005      	b.n	8003634 <HAL_DMA_IRQHandler+0x168>
 8003628:	f44f 7300 	mov.w	r3, #512	; 0x200
 800362c:	e002      	b.n	8003634 <HAL_DMA_IRQHandler+0x168>
 800362e:	2320      	movs	r3, #32
 8003630:	e000      	b.n	8003634 <HAL_DMA_IRQHandler+0x168>
 8003632:	2302      	movs	r3, #2
 8003634:	4a27      	ldr	r2, [pc, #156]	; (80036d4 <HAL_DMA_IRQHandler+0x208>)
 8003636:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	2b00      	cmp	r3, #0
 8003646:	d034      	beq.n	80036b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003650:	e02f      	b.n	80036b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	2208      	movs	r2, #8
 8003658:	409a      	lsls	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4013      	ands	r3, r2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d028      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x1e8>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f003 0308 	and.w	r3, r3, #8
 8003668:	2b00      	cmp	r3, #0
 800366a:	d023      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 020e 	bic.w	r2, r2, #14
 800367a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003684:	2101      	movs	r1, #1
 8003686:	fa01 f202 	lsl.w	r2, r1, r2
 800368a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d004      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	4798      	blx	r3
    }
  }
  return;
 80036b2:	bf00      	nop
 80036b4:	bf00      	nop
}
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40020008 	.word	0x40020008
 80036c0:	4002001c 	.word	0x4002001c
 80036c4:	40020030 	.word	0x40020030
 80036c8:	40020044 	.word	0x40020044
 80036cc:	40020058 	.word	0x40020058
 80036d0:	4002006c 	.word	0x4002006c
 80036d4:	40020000 	.word	0x40020000

080036d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d8:	b480      	push	{r7}
 80036da:	b08b      	sub	sp, #44	; 0x2c
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036e2:	2300      	movs	r3, #0
 80036e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80036e6:	2300      	movs	r3, #0
 80036e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ea:	e169      	b.n	80039c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80036ec:	2201      	movs	r2, #1
 80036ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	429a      	cmp	r2, r3
 8003706:	f040 8158 	bne.w	80039ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	4a9a      	ldr	r2, [pc, #616]	; (8003978 <HAL_GPIO_Init+0x2a0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d05e      	beq.n	80037d2 <HAL_GPIO_Init+0xfa>
 8003714:	4a98      	ldr	r2, [pc, #608]	; (8003978 <HAL_GPIO_Init+0x2a0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d875      	bhi.n	8003806 <HAL_GPIO_Init+0x12e>
 800371a:	4a98      	ldr	r2, [pc, #608]	; (800397c <HAL_GPIO_Init+0x2a4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d058      	beq.n	80037d2 <HAL_GPIO_Init+0xfa>
 8003720:	4a96      	ldr	r2, [pc, #600]	; (800397c <HAL_GPIO_Init+0x2a4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d86f      	bhi.n	8003806 <HAL_GPIO_Init+0x12e>
 8003726:	4a96      	ldr	r2, [pc, #600]	; (8003980 <HAL_GPIO_Init+0x2a8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d052      	beq.n	80037d2 <HAL_GPIO_Init+0xfa>
 800372c:	4a94      	ldr	r2, [pc, #592]	; (8003980 <HAL_GPIO_Init+0x2a8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d869      	bhi.n	8003806 <HAL_GPIO_Init+0x12e>
 8003732:	4a94      	ldr	r2, [pc, #592]	; (8003984 <HAL_GPIO_Init+0x2ac>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d04c      	beq.n	80037d2 <HAL_GPIO_Init+0xfa>
 8003738:	4a92      	ldr	r2, [pc, #584]	; (8003984 <HAL_GPIO_Init+0x2ac>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d863      	bhi.n	8003806 <HAL_GPIO_Init+0x12e>
 800373e:	4a92      	ldr	r2, [pc, #584]	; (8003988 <HAL_GPIO_Init+0x2b0>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d046      	beq.n	80037d2 <HAL_GPIO_Init+0xfa>
 8003744:	4a90      	ldr	r2, [pc, #576]	; (8003988 <HAL_GPIO_Init+0x2b0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d85d      	bhi.n	8003806 <HAL_GPIO_Init+0x12e>
 800374a:	2b12      	cmp	r3, #18
 800374c:	d82a      	bhi.n	80037a4 <HAL_GPIO_Init+0xcc>
 800374e:	2b12      	cmp	r3, #18
 8003750:	d859      	bhi.n	8003806 <HAL_GPIO_Init+0x12e>
 8003752:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <HAL_GPIO_Init+0x80>)
 8003754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003758:	080037d3 	.word	0x080037d3
 800375c:	080037ad 	.word	0x080037ad
 8003760:	080037bf 	.word	0x080037bf
 8003764:	08003801 	.word	0x08003801
 8003768:	08003807 	.word	0x08003807
 800376c:	08003807 	.word	0x08003807
 8003770:	08003807 	.word	0x08003807
 8003774:	08003807 	.word	0x08003807
 8003778:	08003807 	.word	0x08003807
 800377c:	08003807 	.word	0x08003807
 8003780:	08003807 	.word	0x08003807
 8003784:	08003807 	.word	0x08003807
 8003788:	08003807 	.word	0x08003807
 800378c:	08003807 	.word	0x08003807
 8003790:	08003807 	.word	0x08003807
 8003794:	08003807 	.word	0x08003807
 8003798:	08003807 	.word	0x08003807
 800379c:	080037b5 	.word	0x080037b5
 80037a0:	080037c9 	.word	0x080037c9
 80037a4:	4a79      	ldr	r2, [pc, #484]	; (800398c <HAL_GPIO_Init+0x2b4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d013      	beq.n	80037d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037aa:	e02c      	b.n	8003806 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	623b      	str	r3, [r7, #32]
          break;
 80037b2:	e029      	b.n	8003808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	3304      	adds	r3, #4
 80037ba:	623b      	str	r3, [r7, #32]
          break;
 80037bc:	e024      	b.n	8003808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	3308      	adds	r3, #8
 80037c4:	623b      	str	r3, [r7, #32]
          break;
 80037c6:	e01f      	b.n	8003808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	330c      	adds	r3, #12
 80037ce:	623b      	str	r3, [r7, #32]
          break;
 80037d0:	e01a      	b.n	8003808 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80037da:	2304      	movs	r3, #4
 80037dc:	623b      	str	r3, [r7, #32]
          break;
 80037de:	e013      	b.n	8003808 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d105      	bne.n	80037f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037e8:	2308      	movs	r3, #8
 80037ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	611a      	str	r2, [r3, #16]
          break;
 80037f2:	e009      	b.n	8003808 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80037f4:	2308      	movs	r3, #8
 80037f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69fa      	ldr	r2, [r7, #28]
 80037fc:	615a      	str	r2, [r3, #20]
          break;
 80037fe:	e003      	b.n	8003808 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003800:	2300      	movs	r3, #0
 8003802:	623b      	str	r3, [r7, #32]
          break;
 8003804:	e000      	b.n	8003808 <HAL_GPIO_Init+0x130>
          break;
 8003806:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	2bff      	cmp	r3, #255	; 0xff
 800380c:	d801      	bhi.n	8003812 <HAL_GPIO_Init+0x13a>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	e001      	b.n	8003816 <HAL_GPIO_Init+0x13e>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3304      	adds	r3, #4
 8003816:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	2bff      	cmp	r3, #255	; 0xff
 800381c:	d802      	bhi.n	8003824 <HAL_GPIO_Init+0x14c>
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	e002      	b.n	800382a <HAL_GPIO_Init+0x152>
 8003824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003826:	3b08      	subs	r3, #8
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	210f      	movs	r1, #15
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	fa01 f303 	lsl.w	r3, r1, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	401a      	ands	r2, r3
 800383c:	6a39      	ldr	r1, [r7, #32]
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	fa01 f303 	lsl.w	r3, r1, r3
 8003844:	431a      	orrs	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80b1 	beq.w	80039ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003858:	4b4d      	ldr	r3, [pc, #308]	; (8003990 <HAL_GPIO_Init+0x2b8>)
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	4a4c      	ldr	r2, [pc, #304]	; (8003990 <HAL_GPIO_Init+0x2b8>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6193      	str	r3, [r2, #24]
 8003864:	4b4a      	ldr	r3, [pc, #296]	; (8003990 <HAL_GPIO_Init+0x2b8>)
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003870:	4a48      	ldr	r2, [pc, #288]	; (8003994 <HAL_GPIO_Init+0x2bc>)
 8003872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003874:	089b      	lsrs	r3, r3, #2
 8003876:	3302      	adds	r3, #2
 8003878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800387c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	f003 0303 	and.w	r3, r3, #3
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	220f      	movs	r2, #15
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43db      	mvns	r3, r3
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	4013      	ands	r3, r2
 8003892:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a40      	ldr	r2, [pc, #256]	; (8003998 <HAL_GPIO_Init+0x2c0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d013      	beq.n	80038c4 <HAL_GPIO_Init+0x1ec>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a3f      	ldr	r2, [pc, #252]	; (800399c <HAL_GPIO_Init+0x2c4>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00d      	beq.n	80038c0 <HAL_GPIO_Init+0x1e8>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a3e      	ldr	r2, [pc, #248]	; (80039a0 <HAL_GPIO_Init+0x2c8>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d007      	beq.n	80038bc <HAL_GPIO_Init+0x1e4>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a3d      	ldr	r2, [pc, #244]	; (80039a4 <HAL_GPIO_Init+0x2cc>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d101      	bne.n	80038b8 <HAL_GPIO_Init+0x1e0>
 80038b4:	2303      	movs	r3, #3
 80038b6:	e006      	b.n	80038c6 <HAL_GPIO_Init+0x1ee>
 80038b8:	2304      	movs	r3, #4
 80038ba:	e004      	b.n	80038c6 <HAL_GPIO_Init+0x1ee>
 80038bc:	2302      	movs	r3, #2
 80038be:	e002      	b.n	80038c6 <HAL_GPIO_Init+0x1ee>
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <HAL_GPIO_Init+0x1ee>
 80038c4:	2300      	movs	r3, #0
 80038c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c8:	f002 0203 	and.w	r2, r2, #3
 80038cc:	0092      	lsls	r2, r2, #2
 80038ce:	4093      	lsls	r3, r2
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038d6:	492f      	ldr	r1, [pc, #188]	; (8003994 <HAL_GPIO_Init+0x2bc>)
 80038d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038da:	089b      	lsrs	r3, r3, #2
 80038dc:	3302      	adds	r3, #2
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d006      	beq.n	80038fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80038f0:	4b2d      	ldr	r3, [pc, #180]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	492c      	ldr	r1, [pc, #176]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	608b      	str	r3, [r1, #8]
 80038fc:	e006      	b.n	800390c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80038fe:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	43db      	mvns	r3, r3
 8003906:	4928      	ldr	r1, [pc, #160]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 8003908:	4013      	ands	r3, r2
 800390a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d006      	beq.n	8003926 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003918:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	4922      	ldr	r1, [pc, #136]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	4313      	orrs	r3, r2
 8003922:	60cb      	str	r3, [r1, #12]
 8003924:	e006      	b.n	8003934 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	43db      	mvns	r3, r3
 800392e:	491e      	ldr	r1, [pc, #120]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 8003930:	4013      	ands	r3, r2
 8003932:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d006      	beq.n	800394e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	4918      	ldr	r1, [pc, #96]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	4313      	orrs	r3, r2
 800394a:	604b      	str	r3, [r1, #4]
 800394c:	e006      	b.n	800395c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800394e:	4b16      	ldr	r3, [pc, #88]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	43db      	mvns	r3, r3
 8003956:	4914      	ldr	r1, [pc, #80]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 8003958:	4013      	ands	r3, r2
 800395a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d021      	beq.n	80039ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003968:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	490e      	ldr	r1, [pc, #56]	; (80039a8 <HAL_GPIO_Init+0x2d0>)
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	4313      	orrs	r3, r2
 8003972:	600b      	str	r3, [r1, #0]
 8003974:	e021      	b.n	80039ba <HAL_GPIO_Init+0x2e2>
 8003976:	bf00      	nop
 8003978:	10320000 	.word	0x10320000
 800397c:	10310000 	.word	0x10310000
 8003980:	10220000 	.word	0x10220000
 8003984:	10210000 	.word	0x10210000
 8003988:	10120000 	.word	0x10120000
 800398c:	10110000 	.word	0x10110000
 8003990:	40021000 	.word	0x40021000
 8003994:	40010000 	.word	0x40010000
 8003998:	40010800 	.word	0x40010800
 800399c:	40010c00 	.word	0x40010c00
 80039a0:	40011000 	.word	0x40011000
 80039a4:	40011400 	.word	0x40011400
 80039a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039ac:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <HAL_GPIO_Init+0x304>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	4909      	ldr	r1, [pc, #36]	; (80039dc <HAL_GPIO_Init+0x304>)
 80039b6:	4013      	ands	r3, r2
 80039b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	3301      	adds	r3, #1
 80039be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f47f ae8e 	bne.w	80036ec <HAL_GPIO_Init+0x14>
  }
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	372c      	adds	r7, #44	; 0x2c
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr
 80039dc:	40010400 	.word	0x40010400

080039e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	887b      	ldrh	r3, [r7, #2]
 80039f2:	4013      	ands	r3, r2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d002      	beq.n	80039fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
 80039fc:	e001      	b.n	8003a02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039fe:	2300      	movs	r3, #0
 8003a00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3714      	adds	r7, #20
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr

08003a0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	460b      	mov	r3, r1
 8003a18:	807b      	strh	r3, [r7, #2]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a1e:	787b      	ldrb	r3, [r7, #1]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d003      	beq.n	8003a2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a24:	887a      	ldrh	r2, [r7, #2]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a2a:	e003      	b.n	8003a34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a2c:	887b      	ldrh	r3, [r7, #2]
 8003a2e:	041a      	lsls	r2, r3, #16
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	611a      	str	r2, [r3, #16]
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a4a:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a4c:	695a      	ldr	r2, [r3, #20]
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d006      	beq.n	8003a64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a56:	4a05      	ldr	r2, [pc, #20]	; (8003a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a5c:	88fb      	ldrh	r3, [r7, #6]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 f806 	bl	8003a70 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a64:	bf00      	nop
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40010400 	.word	0x40010400

08003a70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a7a:	bf00      	nop
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr

08003a84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e12b      	b.n	8003cee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fe fb3a 	bl	8002124 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ad6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ae6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ae8:	f001 f960 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 8003aec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	4a81      	ldr	r2, [pc, #516]	; (8003cf8 <HAL_I2C_Init+0x274>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d807      	bhi.n	8003b08 <HAL_I2C_Init+0x84>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a80      	ldr	r2, [pc, #512]	; (8003cfc <HAL_I2C_Init+0x278>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	bf94      	ite	ls
 8003b00:	2301      	movls	r3, #1
 8003b02:	2300      	movhi	r3, #0
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	e006      	b.n	8003b16 <HAL_I2C_Init+0x92>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a7d      	ldr	r2, [pc, #500]	; (8003d00 <HAL_I2C_Init+0x27c>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	bf94      	ite	ls
 8003b10:	2301      	movls	r3, #1
 8003b12:	2300      	movhi	r3, #0
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e0e7      	b.n	8003cee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	4a78      	ldr	r2, [pc, #480]	; (8003d04 <HAL_I2C_Init+0x280>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	0c9b      	lsrs	r3, r3, #18
 8003b28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	4a6a      	ldr	r2, [pc, #424]	; (8003cf8 <HAL_I2C_Init+0x274>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d802      	bhi.n	8003b58 <HAL_I2C_Init+0xd4>
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	3301      	adds	r3, #1
 8003b56:	e009      	b.n	8003b6c <HAL_I2C_Init+0xe8>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	4a69      	ldr	r2, [pc, #420]	; (8003d08 <HAL_I2C_Init+0x284>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	099b      	lsrs	r3, r3, #6
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6812      	ldr	r2, [r2, #0]
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b7e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	495c      	ldr	r1, [pc, #368]	; (8003cf8 <HAL_I2C_Init+0x274>)
 8003b88:	428b      	cmp	r3, r1
 8003b8a:	d819      	bhi.n	8003bc0 <HAL_I2C_Init+0x13c>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	1e59      	subs	r1, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b9a:	1c59      	adds	r1, r3, #1
 8003b9c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ba0:	400b      	ands	r3, r1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <HAL_I2C_Init+0x138>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	1e59      	subs	r1, r3, #1
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bba:	e051      	b.n	8003c60 <HAL_I2C_Init+0x1dc>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	e04f      	b.n	8003c60 <HAL_I2C_Init+0x1dc>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d111      	bne.n	8003bec <HAL_I2C_Init+0x168>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	1e58      	subs	r0, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6859      	ldr	r1, [r3, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	440b      	add	r3, r1
 8003bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bda:	3301      	adds	r3, #1
 8003bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	bf0c      	ite	eq
 8003be4:	2301      	moveq	r3, #1
 8003be6:	2300      	movne	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	e012      	b.n	8003c12 <HAL_I2C_Init+0x18e>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1e58      	subs	r0, r3, #1
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6859      	ldr	r1, [r3, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	0099      	lsls	r1, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c02:	3301      	adds	r3, #1
 8003c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	bf0c      	ite	eq
 8003c0c:	2301      	moveq	r3, #1
 8003c0e:	2300      	movne	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_I2C_Init+0x196>
 8003c16:	2301      	movs	r3, #1
 8003c18:	e022      	b.n	8003c60 <HAL_I2C_Init+0x1dc>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10e      	bne.n	8003c40 <HAL_I2C_Init+0x1bc>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	1e58      	subs	r0, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	005b      	lsls	r3, r3, #1
 8003c2e:	440b      	add	r3, r1
 8003c30:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c34:	3301      	adds	r3, #1
 8003c36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c3e:	e00f      	b.n	8003c60 <HAL_I2C_Init+0x1dc>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	1e58      	subs	r0, r3, #1
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6859      	ldr	r1, [r3, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	0099      	lsls	r1, r3, #2
 8003c50:	440b      	add	r3, r1
 8003c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c56:	3301      	adds	r3, #1
 8003c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	6809      	ldr	r1, [r1, #0]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69da      	ldr	r2, [r3, #28]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a1b      	ldr	r3, [r3, #32]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6911      	ldr	r1, [r2, #16]
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68d2      	ldr	r2, [r2, #12]
 8003c9a:	4311      	orrs	r1, r2
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	6812      	ldr	r2, [r2, #0]
 8003ca0:	430b      	orrs	r3, r1
 8003ca2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	695a      	ldr	r2, [r3, #20]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f042 0201 	orr.w	r2, r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	000186a0 	.word	0x000186a0
 8003cfc:	001e847f 	.word	0x001e847f
 8003d00:	003d08ff 	.word	0x003d08ff
 8003d04:	431bde83 	.word	0x431bde83
 8003d08:	10624dd3 	.word	0x10624dd3

08003d0c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	607a      	str	r2, [r7, #4]
 8003d16:	461a      	mov	r2, r3
 8003d18:	460b      	mov	r3, r1
 8003d1a:	817b      	strh	r3, [r7, #10]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d20:	f7fe fc78 	bl	8002614 <HAL_GetTick>
 8003d24:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	f040 80e0 	bne.w	8003ef4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	2319      	movs	r3, #25
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	4970      	ldr	r1, [pc, #448]	; (8003f00 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fa92 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e0d3      	b.n	8003ef6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_I2C_Master_Transmit+0x50>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e0cc      	b.n	8003ef6 <HAL_I2C_Master_Transmit+0x1ea>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d007      	beq.n	8003d82 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0201 	orr.w	r2, r2, #1
 8003d80:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d90:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2221      	movs	r2, #33	; 0x21
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2210      	movs	r2, #16
 8003d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	893a      	ldrh	r2, [r7, #8]
 8003db2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4a50      	ldr	r2, [pc, #320]	; (8003f04 <HAL_I2C_Master_Transmit+0x1f8>)
 8003dc2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003dc4:	8979      	ldrh	r1, [r7, #10]
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	6a3a      	ldr	r2, [r7, #32]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f9ca 	bl	8004164 <I2C_MasterRequestWrite>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e08d      	b.n	8003ef6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dda:	2300      	movs	r3, #0
 8003ddc:	613b      	str	r3, [r7, #16]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	613b      	str	r3, [r7, #16]
 8003dee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003df0:	e066      	b.n	8003ec0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df2:	697a      	ldr	r2, [r7, #20]
 8003df4:	6a39      	ldr	r1, [r7, #32]
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 fb50 	bl	800449c <I2C_WaitOnTXEFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00d      	beq.n	8003e1e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	2b04      	cmp	r3, #4
 8003e08:	d107      	bne.n	8003e1a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e18:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e06b      	b.n	8003ef6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	781a      	ldrb	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d11b      	bne.n	8003e94 <HAL_I2C_Master_Transmit+0x188>
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d017      	beq.n	8003e94 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	6a39      	ldr	r1, [r7, #32]
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 fb47 	bl	800452c <I2C_WaitOnBTFFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d107      	bne.n	8003ebc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e01a      	b.n	8003ef6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d194      	bne.n	8003df2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e000      	b.n	8003ef6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	00100002 	.word	0x00100002
 8003f04:	ffff0000 	.word	0xffff0000

08003f08 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08a      	sub	sp, #40	; 0x28
 8003f0c:	af02      	add	r7, sp, #8
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	607a      	str	r2, [r7, #4]
 8003f12:	603b      	str	r3, [r7, #0]
 8003f14:	460b      	mov	r3, r1
 8003f16:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003f18:	f7fe fb7c 	bl	8002614 <HAL_GetTick>
 8003f1c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	f040 8111 	bne.w	8004152 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	2319      	movs	r3, #25
 8003f36:	2201      	movs	r2, #1
 8003f38:	4988      	ldr	r1, [pc, #544]	; (800415c <HAL_I2C_IsDeviceReady+0x254>)
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 f994 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003f46:	2302      	movs	r3, #2
 8003f48:	e104      	b.n	8004154 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_I2C_IsDeviceReady+0x50>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e0fd      	b.n	8004154 <HAL_I2C_IsDeviceReady+0x24c>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d007      	beq.n	8003f7e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0201 	orr.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2224      	movs	r2, #36	; 0x24
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4a70      	ldr	r2, [pc, #448]	; (8004160 <HAL_I2C_IsDeviceReady+0x258>)
 8003fa0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fb0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f952 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00d      	beq.n	8003fe6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fd8:	d103      	bne.n	8003fe2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e0b6      	b.n	8004154 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003fe6:	897b      	ldrh	r3, [r7, #10]
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	461a      	mov	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ff4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003ff6:	f7fe fb0d 	bl	8002614 <HAL_GetTick>
 8003ffa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b02      	cmp	r3, #2
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800401c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004020:	bf0c      	ite	eq
 8004022:	2301      	moveq	r3, #1
 8004024:	2300      	movne	r3, #0
 8004026:	b2db      	uxtb	r3, r3
 8004028:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800402a:	e025      	b.n	8004078 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800402c:	f7fe faf2 	bl	8002614 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d302      	bcc.n	8004042 <HAL_I2C_IsDeviceReady+0x13a>
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d103      	bne.n	800404a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	22a0      	movs	r2, #160	; 0xa0
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b02      	cmp	r3, #2
 8004056:	bf0c      	ite	eq
 8004058:	2301      	moveq	r3, #1
 800405a:	2300      	movne	r3, #0
 800405c:	b2db      	uxtb	r3, r3
 800405e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800406e:	bf0c      	ite	eq
 8004070:	2301      	moveq	r3, #1
 8004072:	2300      	movne	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407e:	b2db      	uxtb	r3, r3
 8004080:	2ba0      	cmp	r3, #160	; 0xa0
 8004082:	d005      	beq.n	8004090 <HAL_I2C_IsDeviceReady+0x188>
 8004084:	7dfb      	ldrb	r3, [r7, #23]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d102      	bne.n	8004090 <HAL_I2C_IsDeviceReady+0x188>
 800408a:	7dbb      	ldrb	r3, [r7, #22]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d0cd      	beq.n	800402c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d129      	bne.n	80040fa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b6:	2300      	movs	r3, #0
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	699b      	ldr	r3, [r3, #24]
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	2319      	movs	r3, #25
 80040d2:	2201      	movs	r2, #1
 80040d4:	4921      	ldr	r1, [pc, #132]	; (800415c <HAL_I2C_IsDeviceReady+0x254>)
 80040d6:	68f8      	ldr	r0, [r7, #12]
 80040d8:	f000 f8c6 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e036      	b.n	8004154 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	e02c      	b.n	8004154 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004108:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004112:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	2319      	movs	r3, #25
 800411a:	2201      	movs	r2, #1
 800411c:	490f      	ldr	r1, [pc, #60]	; (800415c <HAL_I2C_IsDeviceReady+0x254>)
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f8a2 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e012      	b.n	8004154 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	3301      	adds	r3, #1
 8004132:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	429a      	cmp	r2, r3
 800413a:	f4ff af32 	bcc.w	8003fa2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004152:	2302      	movs	r3, #2
  }
}
 8004154:	4618      	mov	r0, r3
 8004156:	3720      	adds	r7, #32
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	00100002 	.word	0x00100002
 8004160:	ffff0000 	.word	0xffff0000

08004164 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b088      	sub	sp, #32
 8004168:	af02      	add	r7, sp, #8
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	460b      	mov	r3, r1
 8004172:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b08      	cmp	r3, #8
 800417e:	d006      	beq.n	800418e <I2C_MasterRequestWrite+0x2a>
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d003      	beq.n	800418e <I2C_MasterRequestWrite+0x2a>
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800418c:	d108      	bne.n	80041a0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	e00b      	b.n	80041b8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a4:	2b12      	cmp	r3, #18
 80041a6:	d107      	bne.n	80041b8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041b6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f84f 	bl	8004268 <I2C_WaitOnFlagUntilTimeout>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00d      	beq.n	80041ec <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041de:	d103      	bne.n	80041e8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e035      	b.n	8004258 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041f4:	d108      	bne.n	8004208 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041f6:	897b      	ldrh	r3, [r7, #10]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004204:	611a      	str	r2, [r3, #16]
 8004206:	e01b      	b.n	8004240 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004208:	897b      	ldrh	r3, [r7, #10]
 800420a:	11db      	asrs	r3, r3, #7
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f003 0306 	and.w	r3, r3, #6
 8004212:	b2db      	uxtb	r3, r3
 8004214:	f063 030f 	orn	r3, r3, #15
 8004218:	b2da      	uxtb	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	490e      	ldr	r1, [pc, #56]	; (8004260 <I2C_MasterRequestWrite+0xfc>)
 8004226:	68f8      	ldr	r0, [r7, #12]
 8004228:	f000 f898 	bl	800435c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e010      	b.n	8004258 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004236:	897b      	ldrh	r3, [r7, #10]
 8004238:	b2da      	uxtb	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	4907      	ldr	r1, [pc, #28]	; (8004264 <I2C_MasterRequestWrite+0x100>)
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f888 	bl	800435c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	00010008 	.word	0x00010008
 8004264:	00010002 	.word	0x00010002

08004268 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	4613      	mov	r3, r2
 8004276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004278:	e048      	b.n	800430c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004280:	d044      	beq.n	800430c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004282:	f7fe f9c7 	bl	8002614 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d302      	bcc.n	8004298 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d139      	bne.n	800430c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	0c1b      	lsrs	r3, r3, #16
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d10d      	bne.n	80042be <I2C_WaitOnFlagUntilTimeout+0x56>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	695b      	ldr	r3, [r3, #20]
 80042a8:	43da      	mvns	r2, r3
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	4013      	ands	r3, r2
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	bf0c      	ite	eq
 80042b4:	2301      	moveq	r3, #1
 80042b6:	2300      	movne	r3, #0
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	461a      	mov	r2, r3
 80042bc:	e00c      	b.n	80042d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	43da      	mvns	r2, r3
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	4013      	ands	r3, r2
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	461a      	mov	r2, r3
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d116      	bne.n	800430c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	f043 0220 	orr.w	r2, r3, #32
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e023      	b.n	8004354 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	0c1b      	lsrs	r3, r3, #16
 8004310:	b2db      	uxtb	r3, r3
 8004312:	2b01      	cmp	r3, #1
 8004314:	d10d      	bne.n	8004332 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	43da      	mvns	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	4013      	ands	r3, r2
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	bf0c      	ite	eq
 8004328:	2301      	moveq	r3, #1
 800432a:	2300      	movne	r3, #0
 800432c:	b2db      	uxtb	r3, r3
 800432e:	461a      	mov	r2, r3
 8004330:	e00c      	b.n	800434c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	43da      	mvns	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	4013      	ands	r3, r2
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	bf0c      	ite	eq
 8004344:	2301      	moveq	r3, #1
 8004346:	2300      	movne	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	461a      	mov	r2, r3
 800434c:	79fb      	ldrb	r3, [r7, #7]
 800434e:	429a      	cmp	r2, r3
 8004350:	d093      	beq.n	800427a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800436a:	e071      	b.n	8004450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004376:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800437a:	d123      	bne.n	80043c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004394:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b0:	f043 0204 	orr.w	r2, r3, #4
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e067      	b.n	8004494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ca:	d041      	beq.n	8004450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043cc:	f7fe f922 	bl	8002614 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d302      	bcc.n	80043e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d136      	bne.n	8004450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	0c1b      	lsrs	r3, r3, #16
 80043e6:	b2db      	uxtb	r3, r3
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d10c      	bne.n	8004406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	43da      	mvns	r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4013      	ands	r3, r2
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	bf14      	ite	ne
 80043fe:	2301      	movne	r3, #1
 8004400:	2300      	moveq	r3, #0
 8004402:	b2db      	uxtb	r3, r3
 8004404:	e00b      	b.n	800441e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	43da      	mvns	r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	4013      	ands	r3, r2
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	bf14      	ite	ne
 8004418:	2301      	movne	r3, #1
 800441a:	2300      	moveq	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d016      	beq.n	8004450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2220      	movs	r2, #32
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443c:	f043 0220 	orr.w	r2, r3, #32
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e021      	b.n	8004494 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	0c1b      	lsrs	r3, r3, #16
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b01      	cmp	r3, #1
 8004458:	d10c      	bne.n	8004474 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	43da      	mvns	r2, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4013      	ands	r3, r2
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	e00b      	b.n	800448c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	43da      	mvns	r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4013      	ands	r3, r2
 8004480:	b29b      	uxth	r3, r3
 8004482:	2b00      	cmp	r3, #0
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	f47f af6d 	bne.w	800436c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044a8:	e034      	b.n	8004514 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 f886 	bl	80045bc <I2C_IsAcknowledgeFailed>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e034      	b.n	8004524 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c0:	d028      	beq.n	8004514 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c2:	f7fe f8a7 	bl	8002614 <HAL_GetTick>
 80044c6:	4602      	mov	r2, r0
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	68ba      	ldr	r2, [r7, #8]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d302      	bcc.n	80044d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d11d      	bne.n	8004514 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e2:	2b80      	cmp	r3, #128	; 0x80
 80044e4:	d016      	beq.n	8004514 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004500:	f043 0220 	orr.w	r2, r3, #32
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e007      	b.n	8004524 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800451e:	2b80      	cmp	r3, #128	; 0x80
 8004520:	d1c3      	bne.n	80044aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004538:	e034      	b.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 f83e 	bl	80045bc <I2C_IsAcknowledgeFailed>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e034      	b.n	80045b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004550:	d028      	beq.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004552:	f7fe f85f 	bl	8002614 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	429a      	cmp	r2, r3
 8004560:	d302      	bcc.n	8004568 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d11d      	bne.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f003 0304 	and.w	r3, r3, #4
 8004572:	2b04      	cmp	r3, #4
 8004574:	d016      	beq.n	80045a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004590:	f043 0220 	orr.w	r2, r3, #32
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e007      	b.n	80045b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	f003 0304 	and.w	r3, r3, #4
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d1c3      	bne.n	800453a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d2:	d11b      	bne.n	800460c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f8:	f043 0204 	orr.w	r2, r3, #4
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e000      	b.n	800460e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	bc80      	pop	{r7}
 8004616:	4770      	bx	lr

08004618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e272      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 8087 	beq.w	8004746 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004638:	4b92      	ldr	r3, [pc, #584]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 030c 	and.w	r3, r3, #12
 8004640:	2b04      	cmp	r3, #4
 8004642:	d00c      	beq.n	800465e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004644:	4b8f      	ldr	r3, [pc, #572]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f003 030c 	and.w	r3, r3, #12
 800464c:	2b08      	cmp	r3, #8
 800464e:	d112      	bne.n	8004676 <HAL_RCC_OscConfig+0x5e>
 8004650:	4b8c      	ldr	r3, [pc, #560]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800465c:	d10b      	bne.n	8004676 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800465e:	4b89      	ldr	r3, [pc, #548]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d06c      	beq.n	8004744 <HAL_RCC_OscConfig+0x12c>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d168      	bne.n	8004744 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e24c      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467e:	d106      	bne.n	800468e <HAL_RCC_OscConfig+0x76>
 8004680:	4b80      	ldr	r3, [pc, #512]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a7f      	ldr	r2, [pc, #508]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	e02e      	b.n	80046ec <HAL_RCC_OscConfig+0xd4>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10c      	bne.n	80046b0 <HAL_RCC_OscConfig+0x98>
 8004696:	4b7b      	ldr	r3, [pc, #492]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a7a      	ldr	r2, [pc, #488]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 800469c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a0:	6013      	str	r3, [r2, #0]
 80046a2:	4b78      	ldr	r3, [pc, #480]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a77      	ldr	r2, [pc, #476]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046a8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	e01d      	b.n	80046ec <HAL_RCC_OscConfig+0xd4>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046b8:	d10c      	bne.n	80046d4 <HAL_RCC_OscConfig+0xbc>
 80046ba:	4b72      	ldr	r3, [pc, #456]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a71      	ldr	r2, [pc, #452]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	4b6f      	ldr	r3, [pc, #444]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a6e      	ldr	r2, [pc, #440]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	e00b      	b.n	80046ec <HAL_RCC_OscConfig+0xd4>
 80046d4:	4b6b      	ldr	r3, [pc, #428]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a6a      	ldr	r2, [pc, #424]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046de:	6013      	str	r3, [r2, #0]
 80046e0:	4b68      	ldr	r3, [pc, #416]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a67      	ldr	r2, [pc, #412]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 80046e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d013      	beq.n	800471c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fd ff8e 	bl	8002614 <HAL_GetTick>
 80046f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fa:	e008      	b.n	800470e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046fc:	f7fd ff8a 	bl	8002614 <HAL_GetTick>
 8004700:	4602      	mov	r2, r0
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	1ad3      	subs	r3, r2, r3
 8004706:	2b64      	cmp	r3, #100	; 0x64
 8004708:	d901      	bls.n	800470e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e200      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800470e:	4b5d      	ldr	r3, [pc, #372]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d0f0      	beq.n	80046fc <HAL_RCC_OscConfig+0xe4>
 800471a:	e014      	b.n	8004746 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471c:	f7fd ff7a 	bl	8002614 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004724:	f7fd ff76 	bl	8002614 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b64      	cmp	r3, #100	; 0x64
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e1ec      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004736:	4b53      	ldr	r3, [pc, #332]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1f0      	bne.n	8004724 <HAL_RCC_OscConfig+0x10c>
 8004742:	e000      	b.n	8004746 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d063      	beq.n	800481a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004752:	4b4c      	ldr	r3, [pc, #304]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f003 030c 	and.w	r3, r3, #12
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00b      	beq.n	8004776 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800475e:	4b49      	ldr	r3, [pc, #292]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	f003 030c 	and.w	r3, r3, #12
 8004766:	2b08      	cmp	r3, #8
 8004768:	d11c      	bne.n	80047a4 <HAL_RCC_OscConfig+0x18c>
 800476a:	4b46      	ldr	r3, [pc, #280]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d116      	bne.n	80047a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004776:	4b43      	ldr	r3, [pc, #268]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	d005      	beq.n	800478e <HAL_RCC_OscConfig+0x176>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d001      	beq.n	800478e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e1c0      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800478e:	4b3d      	ldr	r3, [pc, #244]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	4939      	ldr	r1, [pc, #228]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047a2:	e03a      	b.n	800481a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d020      	beq.n	80047ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047ac:	4b36      	ldr	r3, [pc, #216]	; (8004888 <HAL_RCC_OscConfig+0x270>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b2:	f7fd ff2f 	bl	8002614 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047ba:	f7fd ff2b 	bl	8002614 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e1a1      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047cc:	4b2d      	ldr	r3, [pc, #180]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0302 	and.w	r3, r3, #2
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047d8:	4b2a      	ldr	r3, [pc, #168]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	4927      	ldr	r1, [pc, #156]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	600b      	str	r3, [r1, #0]
 80047ec:	e015      	b.n	800481a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ee:	4b26      	ldr	r3, [pc, #152]	; (8004888 <HAL_RCC_OscConfig+0x270>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f4:	f7fd ff0e 	bl	8002614 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fa:	e008      	b.n	800480e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047fc:	f7fd ff0a 	bl	8002614 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	2b02      	cmp	r3, #2
 8004808:	d901      	bls.n	800480e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e180      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800480e:	4b1d      	ldr	r3, [pc, #116]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d1f0      	bne.n	80047fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0308 	and.w	r3, r3, #8
 8004822:	2b00      	cmp	r3, #0
 8004824:	d03a      	beq.n	800489c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d019      	beq.n	8004862 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800482e:	4b17      	ldr	r3, [pc, #92]	; (800488c <HAL_RCC_OscConfig+0x274>)
 8004830:	2201      	movs	r2, #1
 8004832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004834:	f7fd feee 	bl	8002614 <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800483c:	f7fd feea 	bl	8002614 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e160      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800484e:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <HAL_RCC_OscConfig+0x26c>)
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d0f0      	beq.n	800483c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800485a:	2001      	movs	r0, #1
 800485c:	f000 face 	bl	8004dfc <RCC_Delay>
 8004860:	e01c      	b.n	800489c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004862:	4b0a      	ldr	r3, [pc, #40]	; (800488c <HAL_RCC_OscConfig+0x274>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004868:	f7fd fed4 	bl	8002614 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800486e:	e00f      	b.n	8004890 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004870:	f7fd fed0 	bl	8002614 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d908      	bls.n	8004890 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e146      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
 8004882:	bf00      	nop
 8004884:	40021000 	.word	0x40021000
 8004888:	42420000 	.word	0x42420000
 800488c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004890:	4b92      	ldr	r3, [pc, #584]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1e9      	bne.n	8004870 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f000 80a6 	beq.w	80049f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048aa:	2300      	movs	r3, #0
 80048ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048ae:	4b8b      	ldr	r3, [pc, #556]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10d      	bne.n	80048d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ba:	4b88      	ldr	r3, [pc, #544]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	4a87      	ldr	r2, [pc, #540]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c4:	61d3      	str	r3, [r2, #28]
 80048c6:	4b85      	ldr	r3, [pc, #532]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ce:	60bb      	str	r3, [r7, #8]
 80048d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048d2:	2301      	movs	r3, #1
 80048d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d6:	4b82      	ldr	r3, [pc, #520]	; (8004ae0 <HAL_RCC_OscConfig+0x4c8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d118      	bne.n	8004914 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048e2:	4b7f      	ldr	r3, [pc, #508]	; (8004ae0 <HAL_RCC_OscConfig+0x4c8>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a7e      	ldr	r2, [pc, #504]	; (8004ae0 <HAL_RCC_OscConfig+0x4c8>)
 80048e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ee:	f7fd fe91 	bl	8002614 <HAL_GetTick>
 80048f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048f6:	f7fd fe8d 	bl	8002614 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b64      	cmp	r3, #100	; 0x64
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e103      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004908:	4b75      	ldr	r3, [pc, #468]	; (8004ae0 <HAL_RCC_OscConfig+0x4c8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d106      	bne.n	800492a <HAL_RCC_OscConfig+0x312>
 800491c:	4b6f      	ldr	r3, [pc, #444]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	4a6e      	ldr	r2, [pc, #440]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004922:	f043 0301 	orr.w	r3, r3, #1
 8004926:	6213      	str	r3, [r2, #32]
 8004928:	e02d      	b.n	8004986 <HAL_RCC_OscConfig+0x36e>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10c      	bne.n	800494c <HAL_RCC_OscConfig+0x334>
 8004932:	4b6a      	ldr	r3, [pc, #424]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	4a69      	ldr	r2, [pc, #420]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004938:	f023 0301 	bic.w	r3, r3, #1
 800493c:	6213      	str	r3, [r2, #32]
 800493e:	4b67      	ldr	r3, [pc, #412]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	4a66      	ldr	r2, [pc, #408]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004944:	f023 0304 	bic.w	r3, r3, #4
 8004948:	6213      	str	r3, [r2, #32]
 800494a:	e01c      	b.n	8004986 <HAL_RCC_OscConfig+0x36e>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	2b05      	cmp	r3, #5
 8004952:	d10c      	bne.n	800496e <HAL_RCC_OscConfig+0x356>
 8004954:	4b61      	ldr	r3, [pc, #388]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	4a60      	ldr	r2, [pc, #384]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 800495a:	f043 0304 	orr.w	r3, r3, #4
 800495e:	6213      	str	r3, [r2, #32]
 8004960:	4b5e      	ldr	r3, [pc, #376]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	4a5d      	ldr	r2, [pc, #372]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004966:	f043 0301 	orr.w	r3, r3, #1
 800496a:	6213      	str	r3, [r2, #32]
 800496c:	e00b      	b.n	8004986 <HAL_RCC_OscConfig+0x36e>
 800496e:	4b5b      	ldr	r3, [pc, #364]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	4a5a      	ldr	r2, [pc, #360]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004974:	f023 0301 	bic.w	r3, r3, #1
 8004978:	6213      	str	r3, [r2, #32]
 800497a:	4b58      	ldr	r3, [pc, #352]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	4a57      	ldr	r2, [pc, #348]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004980:	f023 0304 	bic.w	r3, r3, #4
 8004984:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d015      	beq.n	80049ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800498e:	f7fd fe41 	bl	8002614 <HAL_GetTick>
 8004992:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004994:	e00a      	b.n	80049ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004996:	f7fd fe3d 	bl	8002614 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d901      	bls.n	80049ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e0b1      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ac:	4b4b      	ldr	r3, [pc, #300]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	f003 0302 	and.w	r3, r3, #2
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d0ee      	beq.n	8004996 <HAL_RCC_OscConfig+0x37e>
 80049b8:	e014      	b.n	80049e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049ba:	f7fd fe2b 	bl	8002614 <HAL_GetTick>
 80049be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049c0:	e00a      	b.n	80049d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049c2:	f7fd fe27 	bl	8002614 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d901      	bls.n	80049d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e09b      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049d8:	4b40      	ldr	r3, [pc, #256]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	f003 0302 	and.w	r3, r3, #2
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1ee      	bne.n	80049c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049e4:	7dfb      	ldrb	r3, [r7, #23]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d105      	bne.n	80049f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ea:	4b3c      	ldr	r3, [pc, #240]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	4a3b      	ldr	r2, [pc, #236]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 80049f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 8087 	beq.w	8004b0e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a00:	4b36      	ldr	r3, [pc, #216]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f003 030c 	and.w	r3, r3, #12
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d061      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d146      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a14:	4b33      	ldr	r3, [pc, #204]	; (8004ae4 <HAL_RCC_OscConfig+0x4cc>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1a:	f7fd fdfb 	bl	8002614 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a22:	f7fd fdf7 	bl	8002614 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e06d      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a34:	4b29      	ldr	r3, [pc, #164]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f0      	bne.n	8004a22 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a1b      	ldr	r3, [r3, #32]
 8004a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a48:	d108      	bne.n	8004a5c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a4a:	4b24      	ldr	r3, [pc, #144]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	4921      	ldr	r1, [pc, #132]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a5c:	4b1f      	ldr	r3, [pc, #124]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a19      	ldr	r1, [r3, #32]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	491b      	ldr	r1, [pc, #108]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a74:	4b1b      	ldr	r3, [pc, #108]	; (8004ae4 <HAL_RCC_OscConfig+0x4cc>)
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a7a:	f7fd fdcb 	bl	8002614 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a80:	e008      	b.n	8004a94 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a82:	f7fd fdc7 	bl	8002614 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d901      	bls.n	8004a94 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e03d      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a94:	4b11      	ldr	r3, [pc, #68]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d0f0      	beq.n	8004a82 <HAL_RCC_OscConfig+0x46a>
 8004aa0:	e035      	b.n	8004b0e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aa2:	4b10      	ldr	r3, [pc, #64]	; (8004ae4 <HAL_RCC_OscConfig+0x4cc>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aa8:	f7fd fdb4 	bl	8002614 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab0:	f7fd fdb0 	bl	8002614 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e026      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ac2:	4b06      	ldr	r3, [pc, #24]	; (8004adc <HAL_RCC_OscConfig+0x4c4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x498>
 8004ace:	e01e      	b.n	8004b0e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d107      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e019      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	40007000 	.word	0x40007000
 8004ae4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004ae8:	4b0b      	ldr	r3, [pc, #44]	; (8004b18 <HAL_RCC_OscConfig+0x500>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d106      	bne.n	8004b0a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d001      	beq.n	8004b0e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40021000 	.word	0x40021000

08004b1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0d0      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b30:	4b6a      	ldr	r3, [pc, #424]	; (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d910      	bls.n	8004b60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b3e:	4b67      	ldr	r3, [pc, #412]	; (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f023 0207 	bic.w	r2, r3, #7
 8004b46:	4965      	ldr	r1, [pc, #404]	; (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4e:	4b63      	ldr	r3, [pc, #396]	; (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d001      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e0b8      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d020      	beq.n	8004bae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d005      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b78:	4b59      	ldr	r3, [pc, #356]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4a58      	ldr	r2, [pc, #352]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b82:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0308 	and.w	r3, r3, #8
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b90:	4b53      	ldr	r3, [pc, #332]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	4a52      	ldr	r2, [pc, #328]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b96:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b9a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b9c:	4b50      	ldr	r3, [pc, #320]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	494d      	ldr	r1, [pc, #308]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d040      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d107      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc2:	4b47      	ldr	r3, [pc, #284]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d115      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e07f      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d107      	bne.n	8004bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bda:	4b41      	ldr	r3, [pc, #260]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d109      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e073      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bea:	4b3d      	ldr	r3, [pc, #244]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 0302 	and.w	r3, r3, #2
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e06b      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bfa:	4b39      	ldr	r3, [pc, #228]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f023 0203 	bic.w	r2, r3, #3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	4936      	ldr	r1, [pc, #216]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c0c:	f7fd fd02 	bl	8002614 <HAL_GetTick>
 8004c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c12:	e00a      	b.n	8004c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c14:	f7fd fcfe 	bl	8002614 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e053      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c2a:	4b2d      	ldr	r3, [pc, #180]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f003 020c 	and.w	r2, r3, #12
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d1eb      	bne.n	8004c14 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c3c:	4b27      	ldr	r3, [pc, #156]	; (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0307 	and.w	r3, r3, #7
 8004c44:	683a      	ldr	r2, [r7, #0]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d210      	bcs.n	8004c6c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4a:	4b24      	ldr	r3, [pc, #144]	; (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f023 0207 	bic.w	r2, r3, #7
 8004c52:	4922      	ldr	r1, [pc, #136]	; (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5a:	4b20      	ldr	r3, [pc, #128]	; (8004cdc <HAL_RCC_ClockConfig+0x1c0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0307 	and.w	r3, r3, #7
 8004c62:	683a      	ldr	r2, [r7, #0]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d001      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e032      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c78:	4b19      	ldr	r3, [pc, #100]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	4916      	ldr	r1, [pc, #88]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d009      	beq.n	8004caa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c96:	4b12      	ldr	r3, [pc, #72]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	490e      	ldr	r1, [pc, #56]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004caa:	f000 f821 	bl	8004cf0 <HAL_RCC_GetSysClockFreq>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	091b      	lsrs	r3, r3, #4
 8004cb6:	f003 030f 	and.w	r3, r3, #15
 8004cba:	490a      	ldr	r1, [pc, #40]	; (8004ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8004cbc:	5ccb      	ldrb	r3, [r1, r3]
 8004cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc2:	4a09      	ldr	r2, [pc, #36]	; (8004ce8 <HAL_RCC_ClockConfig+0x1cc>)
 8004cc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cc6:	4b09      	ldr	r3, [pc, #36]	; (8004cec <HAL_RCC_ClockConfig+0x1d0>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7fd fc60 	bl	8002590 <HAL_InitTick>

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40022000 	.word	0x40022000
 8004ce0:	40021000 	.word	0x40021000
 8004ce4:	08007274 	.word	0x08007274
 8004ce8:	20000018 	.word	0x20000018
 8004cec:	2000001c 	.word	0x2000001c

08004cf0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	617b      	str	r3, [r7, #20]
 8004d02:	2300      	movs	r3, #0
 8004d04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d0a:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f003 030c 	and.w	r3, r3, #12
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d002      	beq.n	8004d20 <HAL_RCC_GetSysClockFreq+0x30>
 8004d1a:	2b08      	cmp	r3, #8
 8004d1c:	d003      	beq.n	8004d26 <HAL_RCC_GetSysClockFreq+0x36>
 8004d1e:	e027      	b.n	8004d70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d20:	4b19      	ldr	r3, [pc, #100]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d22:	613b      	str	r3, [r7, #16]
      break;
 8004d24:	e027      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	0c9b      	lsrs	r3, r3, #18
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	4a17      	ldr	r2, [pc, #92]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d30:	5cd3      	ldrb	r3, [r2, r3]
 8004d32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d010      	beq.n	8004d60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d3e:	4b11      	ldr	r3, [pc, #68]	; (8004d84 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	0c5b      	lsrs	r3, r3, #17
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	4a11      	ldr	r2, [pc, #68]	; (8004d90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d4a:	5cd3      	ldrb	r3, [r2, r3]
 8004d4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a0d      	ldr	r2, [pc, #52]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d52:	fb03 f202 	mul.w	r2, r3, r2
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	e004      	b.n	8004d6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a0c      	ldr	r2, [pc, #48]	; (8004d94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d64:	fb02 f303 	mul.w	r3, r2, r3
 8004d68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	613b      	str	r3, [r7, #16]
      break;
 8004d6e:	e002      	b.n	8004d76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d70:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x98>)
 8004d72:	613b      	str	r3, [r7, #16]
      break;
 8004d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d76:	693b      	ldr	r3, [r7, #16]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	371c      	adds	r7, #28
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	40021000 	.word	0x40021000
 8004d88:	007a1200 	.word	0x007a1200
 8004d8c:	0800728c 	.word	0x0800728c
 8004d90:	0800729c 	.word	0x0800729c
 8004d94:	003d0900 	.word	0x003d0900

08004d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d9c:	4b02      	ldr	r3, [pc, #8]	; (8004da8 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bc80      	pop	{r7}
 8004da6:	4770      	bx	lr
 8004da8:	20000018 	.word	0x20000018

08004dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004db0:	f7ff fff2 	bl	8004d98 <HAL_RCC_GetHCLKFreq>
 8004db4:	4602      	mov	r2, r0
 8004db6:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	4903      	ldr	r1, [pc, #12]	; (8004dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dc2:	5ccb      	ldrb	r3, [r1, r3]
 8004dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40021000 	.word	0x40021000
 8004dd0:	08007284 	.word	0x08007284

08004dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dd8:	f7ff ffde 	bl	8004d98 <HAL_RCC_GetHCLKFreq>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	0adb      	lsrs	r3, r3, #11
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	4903      	ldr	r1, [pc, #12]	; (8004df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dea:	5ccb      	ldrb	r3, [r1, r3]
 8004dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40021000 	.word	0x40021000
 8004df8:	08007284 	.word	0x08007284

08004dfc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e04:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <RCC_Delay+0x34>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a0a      	ldr	r2, [pc, #40]	; (8004e34 <RCC_Delay+0x38>)
 8004e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0e:	0a5b      	lsrs	r3, r3, #9
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e18:	bf00      	nop
  }
  while (Delay --);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	1e5a      	subs	r2, r3, #1
 8004e1e:	60fa      	str	r2, [r7, #12]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1f9      	bne.n	8004e18 <RCC_Delay+0x1c>
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop
 8004e28:	3714      	adds	r7, #20
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr
 8004e30:	20000018 	.word	0x20000018
 8004e34:	10624dd3 	.word	0x10624dd3

08004e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	2300      	movs	r3, #0
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0301 	and.w	r3, r3, #1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d07d      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e54:	2300      	movs	r3, #0
 8004e56:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e58:	4b4f      	ldr	r3, [pc, #316]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10d      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e64:	4b4c      	ldr	r3, [pc, #304]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	4a4b      	ldr	r2, [pc, #300]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e6e:	61d3      	str	r3, [r2, #28]
 8004e70:	4b49      	ldr	r3, [pc, #292]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e80:	4b46      	ldr	r3, [pc, #280]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d118      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e8c:	4b43      	ldr	r3, [pc, #268]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a42      	ldr	r2, [pc, #264]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e98:	f7fd fbbc 	bl	8002614 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea0:	f7fd fbb8 	bl	8002614 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b64      	cmp	r3, #100	; 0x64
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e06d      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb2:	4b3a      	ldr	r3, [pc, #232]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ebe:	4b36      	ldr	r3, [pc, #216]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d02e      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d027      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004edc:	4b2e      	ldr	r3, [pc, #184]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ee4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ee6:	4b2e      	ldr	r3, [pc, #184]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eec:	4b2c      	ldr	r3, [pc, #176]	; (8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ef2:	4a29      	ldr	r2, [pc, #164]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d014      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f02:	f7fd fb87 	bl	8002614 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f08:	e00a      	b.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f0a:	f7fd fb83 	bl	8002614 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e036      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f20:	4b1d      	ldr	r3, [pc, #116]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0ee      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f2c:	4b1a      	ldr	r3, [pc, #104]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	4917      	ldr	r1, [pc, #92]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d105      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f44:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f46:	69db      	ldr	r3, [r3, #28]
 8004f48:	4a13      	ldr	r2, [pc, #76]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d008      	beq.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f5c:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	490b      	ldr	r1, [pc, #44]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d008      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f7a:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	4904      	ldr	r1, [pc, #16]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	40007000 	.word	0x40007000
 8004fa0:	42420440 	.word	0x42420440

08004fa4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d00a      	beq.n	8004fdc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b10      	cmp	r3, #16
 8004fca:	f200 808a 	bhi.w	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d045      	beq.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d075      	beq.n	80050c6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004fda:	e082      	b.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004fdc:	4b46      	ldr	r3, [pc, #280]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004fe2:	4b45      	ldr	r3, [pc, #276]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d07b      	beq.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	0c9b      	lsrs	r3, r3, #18
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	4a41      	ldr	r2, [pc, #260]	; (80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004ff8:	5cd3      	ldrb	r3, [r2, r3]
 8004ffa:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d015      	beq.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005006:	4b3c      	ldr	r3, [pc, #240]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	0c5b      	lsrs	r3, r3, #17
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	4a3b      	ldr	r2, [pc, #236]	; (8005100 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005012:	5cd3      	ldrb	r3, [r2, r3]
 8005014:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00d      	beq.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005020:	4a38      	ldr	r2, [pc, #224]	; (8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	fbb2 f2f3 	udiv	r2, r2, r3
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	fb02 f303 	mul.w	r3, r2, r3
 800502e:	61fb      	str	r3, [r7, #28]
 8005030:	e004      	b.n	800503c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4a34      	ldr	r2, [pc, #208]	; (8005108 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005036:	fb02 f303 	mul.w	r3, r2, r3
 800503a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800503c:	4b2e      	ldr	r3, [pc, #184]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005044:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005048:	d102      	bne.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	61bb      	str	r3, [r7, #24]
      break;
 800504e:	e04a      	b.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	4a2d      	ldr	r2, [pc, #180]	; (800510c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	085b      	lsrs	r3, r3, #1
 800505c:	61bb      	str	r3, [r7, #24]
      break;
 800505e:	e042      	b.n	80050e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005060:	4b25      	ldr	r3, [pc, #148]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800506c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005070:	d108      	bne.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800507c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005080:	61bb      	str	r3, [r7, #24]
 8005082:	e01f      	b.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800508a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800508e:	d109      	bne.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005090:	4b19      	ldr	r3, [pc, #100]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	f003 0302 	and.w	r3, r3, #2
 8005098:	2b00      	cmp	r3, #0
 800509a:	d003      	beq.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800509c:	f649 4340 	movw	r3, #40000	; 0x9c40
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	e00f      	b.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ae:	d11c      	bne.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80050b0:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d016      	beq.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80050bc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80050c0:	61bb      	str	r3, [r7, #24]
      break;
 80050c2:	e012      	b.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80050c4:	e011      	b.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80050c6:	f7ff fe85 	bl	8004dd4 <HAL_RCC_GetPCLK2Freq>
 80050ca:	4602      	mov	r2, r0
 80050cc:	4b0a      	ldr	r3, [pc, #40]	; (80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	0b9b      	lsrs	r3, r3, #14
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	3301      	adds	r3, #1
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	61bb      	str	r3, [r7, #24]
      break;
 80050e0:	e004      	b.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80050e2:	bf00      	nop
 80050e4:	e002      	b.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80050e6:	bf00      	nop
 80050e8:	e000      	b.n	80050ec <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80050ea:	bf00      	nop
    }
  }
  return (frequency);
 80050ec:	69bb      	ldr	r3, [r7, #24]
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40021000 	.word	0x40021000
 80050fc:	080072a0 	.word	0x080072a0
 8005100:	080072b0 	.word	0x080072b0
 8005104:	007a1200 	.word	0x007a1200
 8005108:	003d0900 	.word	0x003d0900
 800510c:	aaaaaaab 	.word	0xaaaaaaab

08005110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d101      	bne.n	8005122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e041      	b.n	80051a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d106      	bne.n	800513c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fd f834 	bl	80021a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	3304      	adds	r3, #4
 800514c:	4619      	mov	r1, r3
 800514e:	4610      	mov	r0, r2
 8005150:	f000 fac6 	bl	80056e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d001      	beq.n	80051c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e032      	b.n	800522e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a18      	ldr	r2, [pc, #96]	; (8005238 <HAL_TIM_Base_Start+0x88>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d00e      	beq.n	80051f8 <HAL_TIM_Base_Start+0x48>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051e2:	d009      	beq.n	80051f8 <HAL_TIM_Base_Start+0x48>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a14      	ldr	r2, [pc, #80]	; (800523c <HAL_TIM_Base_Start+0x8c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d004      	beq.n	80051f8 <HAL_TIM_Base_Start+0x48>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a13      	ldr	r2, [pc, #76]	; (8005240 <HAL_TIM_Base_Start+0x90>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d111      	bne.n	800521c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2b06      	cmp	r3, #6
 8005208:	d010      	beq.n	800522c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f042 0201 	orr.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800521a:	e007      	b.n	800522c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr
 8005238:	40012c00 	.word	0x40012c00
 800523c:	40000400 	.word	0x40000400
 8005240:	40000800 	.word	0x40000800

08005244 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b01      	cmp	r3, #1
 8005256:	d001      	beq.n	800525c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e03a      	b.n	80052d2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68da      	ldr	r2, [r3, #12]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f042 0201 	orr.w	r2, r2, #1
 8005272:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a18      	ldr	r2, [pc, #96]	; (80052dc <HAL_TIM_Base_Start_IT+0x98>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d00e      	beq.n	800529c <HAL_TIM_Base_Start_IT+0x58>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005286:	d009      	beq.n	800529c <HAL_TIM_Base_Start_IT+0x58>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a14      	ldr	r2, [pc, #80]	; (80052e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d004      	beq.n	800529c <HAL_TIM_Base_Start_IT+0x58>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a13      	ldr	r2, [pc, #76]	; (80052e4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d111      	bne.n	80052c0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f003 0307 	and.w	r3, r3, #7
 80052a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2b06      	cmp	r3, #6
 80052ac:	d010      	beq.n	80052d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f042 0201 	orr.w	r2, r2, #1
 80052bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052be:	e007      	b.n	80052d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f042 0201 	orr.w	r2, r2, #1
 80052ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bc80      	pop	{r7}
 80052da:	4770      	bx	lr
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40000400 	.word	0x40000400
 80052e4:	40000800 	.word	0x40000800

080052e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0302 	and.w	r3, r3, #2
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	d122      	bne.n	8005344 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0302 	and.w	r3, r3, #2
 8005308:	2b02      	cmp	r3, #2
 800530a:	d11b      	bne.n	8005344 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0202 	mvn.w	r2, #2
 8005314:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f9bd 	bl	80056aa <HAL_TIM_IC_CaptureCallback>
 8005330:	e005      	b.n	800533e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f9b0 	bl	8005698 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f9bf 	bl	80056bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	2b04      	cmp	r3, #4
 8005350:	d122      	bne.n	8005398 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b04      	cmp	r3, #4
 800535e:	d11b      	bne.n	8005398 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f06f 0204 	mvn.w	r2, #4
 8005368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2202      	movs	r2, #2
 800536e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f993 	bl	80056aa <HAL_TIM_IC_CaptureCallback>
 8005384:	e005      	b.n	8005392 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f000 f986 	bl	8005698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f995 	bl	80056bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0308 	and.w	r3, r3, #8
 80053a2:	2b08      	cmp	r3, #8
 80053a4:	d122      	bne.n	80053ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	f003 0308 	and.w	r3, r3, #8
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d11b      	bne.n	80053ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0208 	mvn.w	r2, #8
 80053bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2204      	movs	r2, #4
 80053c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f969 	bl	80056aa <HAL_TIM_IC_CaptureCallback>
 80053d8:	e005      	b.n	80053e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f95c 	bl	8005698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f96b 	bl	80056bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b10      	cmp	r3, #16
 80053f8:	d122      	bne.n	8005440 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b10      	cmp	r3, #16
 8005406:	d11b      	bne.n	8005440 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f06f 0210 	mvn.w	r2, #16
 8005410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2208      	movs	r2, #8
 8005416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f93f 	bl	80056aa <HAL_TIM_IC_CaptureCallback>
 800542c:	e005      	b.n	800543a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 f932 	bl	8005698 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f941 	bl	80056bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b01      	cmp	r3, #1
 800544c:	d10e      	bne.n	800546c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b01      	cmp	r3, #1
 800545a:	d107      	bne.n	800546c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f06f 0201 	mvn.w	r2, #1
 8005464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f90d 	bl	8005686 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005476:	2b80      	cmp	r3, #128	; 0x80
 8005478:	d10e      	bne.n	8005498 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005484:	2b80      	cmp	r3, #128	; 0x80
 8005486:	d107      	bne.n	8005498 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fa83 	bl	800599e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054a2:	2b40      	cmp	r3, #64	; 0x40
 80054a4:	d10e      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b0:	2b40      	cmp	r3, #64	; 0x40
 80054b2:	d107      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f905 	bl	80056ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	f003 0320 	and.w	r3, r3, #32
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d10e      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	f003 0320 	and.w	r3, r3, #32
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d107      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f06f 0220 	mvn.w	r2, #32
 80054e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 fa4e 	bl	800598c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800550c:	2b01      	cmp	r3, #1
 800550e:	d101      	bne.n	8005514 <HAL_TIM_ConfigClockSource+0x1c>
 8005510:	2302      	movs	r3, #2
 8005512:	e0b4      	b.n	800567e <HAL_TIM_ConfigClockSource+0x186>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2202      	movs	r2, #2
 8005520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005532:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800553a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800554c:	d03e      	beq.n	80055cc <HAL_TIM_ConfigClockSource+0xd4>
 800554e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005552:	f200 8087 	bhi.w	8005664 <HAL_TIM_ConfigClockSource+0x16c>
 8005556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555a:	f000 8086 	beq.w	800566a <HAL_TIM_ConfigClockSource+0x172>
 800555e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005562:	d87f      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x16c>
 8005564:	2b70      	cmp	r3, #112	; 0x70
 8005566:	d01a      	beq.n	800559e <HAL_TIM_ConfigClockSource+0xa6>
 8005568:	2b70      	cmp	r3, #112	; 0x70
 800556a:	d87b      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x16c>
 800556c:	2b60      	cmp	r3, #96	; 0x60
 800556e:	d050      	beq.n	8005612 <HAL_TIM_ConfigClockSource+0x11a>
 8005570:	2b60      	cmp	r3, #96	; 0x60
 8005572:	d877      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x16c>
 8005574:	2b50      	cmp	r3, #80	; 0x50
 8005576:	d03c      	beq.n	80055f2 <HAL_TIM_ConfigClockSource+0xfa>
 8005578:	2b50      	cmp	r3, #80	; 0x50
 800557a:	d873      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x16c>
 800557c:	2b40      	cmp	r3, #64	; 0x40
 800557e:	d058      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0x13a>
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	d86f      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x16c>
 8005584:	2b30      	cmp	r3, #48	; 0x30
 8005586:	d064      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x15a>
 8005588:	2b30      	cmp	r3, #48	; 0x30
 800558a:	d86b      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x16c>
 800558c:	2b20      	cmp	r3, #32
 800558e:	d060      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x15a>
 8005590:	2b20      	cmp	r3, #32
 8005592:	d867      	bhi.n	8005664 <HAL_TIM_ConfigClockSource+0x16c>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d05c      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x15a>
 8005598:	2b10      	cmp	r3, #16
 800559a:	d05a      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x15a>
 800559c:	e062      	b.n	8005664 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055ae:	f000 f970 	bl	8005892 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	609a      	str	r2, [r3, #8]
      break;
 80055ca:	e04f      	b.n	800566c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055dc:	f000 f959 	bl	8005892 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055ee:	609a      	str	r2, [r3, #8]
      break;
 80055f0:	e03c      	b.n	800566c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fe:	461a      	mov	r2, r3
 8005600:	f000 f8d0 	bl	80057a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2150      	movs	r1, #80	; 0x50
 800560a:	4618      	mov	r0, r3
 800560c:	f000 f927 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 8005610:	e02c      	b.n	800566c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800561e:	461a      	mov	r2, r3
 8005620:	f000 f8ee 	bl	8005800 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2160      	movs	r1, #96	; 0x60
 800562a:	4618      	mov	r0, r3
 800562c:	f000 f917 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 8005630:	e01c      	b.n	800566c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800563e:	461a      	mov	r2, r3
 8005640:	f000 f8b0 	bl	80057a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2140      	movs	r1, #64	; 0x40
 800564a:	4618      	mov	r0, r3
 800564c:	f000 f907 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 8005650:	e00c      	b.n	800566c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4619      	mov	r1, r3
 800565c:	4610      	mov	r0, r2
 800565e:	f000 f8fe 	bl	800585e <TIM_ITRx_SetConfig>
      break;
 8005662:	e003      	b.n	800566c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	73fb      	strb	r3, [r7, #15]
      break;
 8005668:	e000      	b.n	800566c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800566a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800567c:	7bfb      	ldrb	r3, [r7, #15]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	bc80      	pop	{r7}
 8005696:	4770      	bx	lr

08005698 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr

080056aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b083      	sub	sp, #12
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056b2:	bf00      	nop
 80056b4:	370c      	adds	r7, #12
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr

080056bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bc80      	pop	{r7}
 80056cc:	4770      	bx	lr

080056ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056ce:	b480      	push	{r7}
 80056d0:	b083      	sub	sp, #12
 80056d2:	af00      	add	r7, sp, #0
 80056d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	bc80      	pop	{r7}
 80056de:	4770      	bx	lr

080056e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a29      	ldr	r2, [pc, #164]	; (8005798 <TIM_Base_SetConfig+0xb8>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00b      	beq.n	8005710 <TIM_Base_SetConfig+0x30>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fe:	d007      	beq.n	8005710 <TIM_Base_SetConfig+0x30>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a26      	ldr	r2, [pc, #152]	; (800579c <TIM_Base_SetConfig+0xbc>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_Base_SetConfig+0x30>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a25      	ldr	r2, [pc, #148]	; (80057a0 <TIM_Base_SetConfig+0xc0>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d108      	bne.n	8005722 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a1c      	ldr	r2, [pc, #112]	; (8005798 <TIM_Base_SetConfig+0xb8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d00b      	beq.n	8005742 <TIM_Base_SetConfig+0x62>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005730:	d007      	beq.n	8005742 <TIM_Base_SetConfig+0x62>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a19      	ldr	r2, [pc, #100]	; (800579c <TIM_Base_SetConfig+0xbc>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d003      	beq.n	8005742 <TIM_Base_SetConfig+0x62>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <TIM_Base_SetConfig+0xc0>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d108      	bne.n	8005754 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	4313      	orrs	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a07      	ldr	r2, [pc, #28]	; (8005798 <TIM_Base_SetConfig+0xb8>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d103      	bne.n	8005788 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	615a      	str	r2, [r3, #20]
}
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	bc80      	pop	{r7}
 8005796:	4770      	bx	lr
 8005798:	40012c00 	.word	0x40012c00
 800579c:	40000400 	.word	0x40000400
 80057a0:	40000800 	.word	0x40000800

080057a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f023 0201 	bic.w	r2, r3, #1
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f023 030a 	bic.w	r3, r3, #10
 80057e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	697a      	ldr	r2, [r7, #20]
 80057f4:	621a      	str	r2, [r3, #32]
}
 80057f6:	bf00      	nop
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bc80      	pop	{r7}
 80057fe:	4770      	bx	lr

08005800 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	f023 0210 	bic.w	r2, r3, #16
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800582a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	031b      	lsls	r3, r3, #12
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	4313      	orrs	r3, r2
 8005834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800583c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	697a      	ldr	r2, [r7, #20]
 8005844:	4313      	orrs	r3, r2
 8005846:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	621a      	str	r2, [r3, #32]
}
 8005854:	bf00      	nop
 8005856:	371c      	adds	r7, #28
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr

0800585e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800585e:	b480      	push	{r7}
 8005860:	b085      	sub	sp, #20
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
 8005866:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005874:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	f043 0307 	orr.w	r3, r3, #7
 8005880:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	609a      	str	r2, [r3, #8]
}
 8005888:	bf00      	nop
 800588a:	3714      	adds	r7, #20
 800588c:	46bd      	mov	sp, r7
 800588e:	bc80      	pop	{r7}
 8005890:	4770      	bx	lr

08005892 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005892:	b480      	push	{r7}
 8005894:	b087      	sub	sp, #28
 8005896:	af00      	add	r7, sp, #0
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	607a      	str	r2, [r7, #4]
 800589e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	021a      	lsls	r2, r3, #8
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	431a      	orrs	r2, r3
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	4313      	orrs	r3, r2
 80058be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	609a      	str	r2, [r3, #8]
}
 80058c6:	bf00      	nop
 80058c8:	371c      	adds	r7, #28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bc80      	pop	{r7}
 80058ce:	4770      	bx	lr

080058d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d101      	bne.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058e4:	2302      	movs	r3, #2
 80058e6:	e046      	b.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a16      	ldr	r2, [pc, #88]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00e      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005934:	d009      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a12      	ldr	r2, [pc, #72]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d004      	beq.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a10      	ldr	r2, [pc, #64]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d10c      	bne.n	8005964 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005950:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	4313      	orrs	r3, r2
 800595a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr
 8005980:	40012c00 	.word	0x40012c00
 8005984:	40000400 	.word	0x40000400
 8005988:	40000800 	.word	0x40000800

0800598c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	bc80      	pop	{r7}
 800599c:	4770      	bx	lr

0800599e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr

080059b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e042      	b.n	8005a48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d106      	bne.n	80059dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fc fc24 	bl	8002224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2224      	movs	r2, #36	; 0x24
 80059e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68da      	ldr	r2, [r3, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f82b 	bl	8005a50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	691a      	ldr	r2, [r3, #16]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	695a      	ldr	r2, [r3, #20]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	689a      	ldr	r2, [r3, #8]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a8a:	f023 030c 	bic.w	r3, r3, #12
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6812      	ldr	r2, [r2, #0]
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	430b      	orrs	r3, r1
 8005a96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699a      	ldr	r2, [r3, #24]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a2c      	ldr	r2, [pc, #176]	; (8005b64 <UART_SetConfig+0x114>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d103      	bne.n	8005ac0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005ab8:	f7ff f98c 	bl	8004dd4 <HAL_RCC_GetPCLK2Freq>
 8005abc:	60f8      	str	r0, [r7, #12]
 8005abe:	e002      	b.n	8005ac6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005ac0:	f7ff f974 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 8005ac4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	009a      	lsls	r2, r3, #2
 8005ad0:	441a      	add	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005adc:	4a22      	ldr	r2, [pc, #136]	; (8005b68 <UART_SetConfig+0x118>)
 8005ade:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	0119      	lsls	r1, r3, #4
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	009a      	lsls	r2, r3, #2
 8005af0:	441a      	add	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005afc:	4b1a      	ldr	r3, [pc, #104]	; (8005b68 <UART_SetConfig+0x118>)
 8005afe:	fba3 0302 	umull	r0, r3, r3, r2
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	2064      	movs	r0, #100	; 0x64
 8005b06:	fb00 f303 	mul.w	r3, r0, r3
 8005b0a:	1ad3      	subs	r3, r2, r3
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	3332      	adds	r3, #50	; 0x32
 8005b10:	4a15      	ldr	r2, [pc, #84]	; (8005b68 <UART_SetConfig+0x118>)
 8005b12:	fba2 2303 	umull	r2, r3, r2, r3
 8005b16:	095b      	lsrs	r3, r3, #5
 8005b18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b1c:	4419      	add	r1, r3
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009a      	lsls	r2, r3, #2
 8005b28:	441a      	add	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b34:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <UART_SetConfig+0x118>)
 8005b36:	fba3 0302 	umull	r0, r3, r3, r2
 8005b3a:	095b      	lsrs	r3, r3, #5
 8005b3c:	2064      	movs	r0, #100	; 0x64
 8005b3e:	fb00 f303 	mul.w	r3, r0, r3
 8005b42:	1ad3      	subs	r3, r2, r3
 8005b44:	011b      	lsls	r3, r3, #4
 8005b46:	3332      	adds	r3, #50	; 0x32
 8005b48:	4a07      	ldr	r2, [pc, #28]	; (8005b68 <UART_SetConfig+0x118>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	095b      	lsrs	r3, r3, #5
 8005b50:	f003 020f 	and.w	r2, r3, #15
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	440a      	add	r2, r1
 8005b5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b5c:	bf00      	nop
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40013800 	.word	0x40013800
 8005b68:	51eb851f 	.word	0x51eb851f

08005b6c <siprintf>:
 8005b6c:	b40e      	push	{r1, r2, r3}
 8005b6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b72:	b500      	push	{lr}
 8005b74:	b09c      	sub	sp, #112	; 0x70
 8005b76:	ab1d      	add	r3, sp, #116	; 0x74
 8005b78:	9002      	str	r0, [sp, #8]
 8005b7a:	9006      	str	r0, [sp, #24]
 8005b7c:	9107      	str	r1, [sp, #28]
 8005b7e:	9104      	str	r1, [sp, #16]
 8005b80:	4808      	ldr	r0, [pc, #32]	; (8005ba4 <siprintf+0x38>)
 8005b82:	4909      	ldr	r1, [pc, #36]	; (8005ba8 <siprintf+0x3c>)
 8005b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b88:	9105      	str	r1, [sp, #20]
 8005b8a:	6800      	ldr	r0, [r0, #0]
 8005b8c:	a902      	add	r1, sp, #8
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	f000 f98e 	bl	8005eb0 <_svfiprintf_r>
 8005b94:	2200      	movs	r2, #0
 8005b96:	9b02      	ldr	r3, [sp, #8]
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	b01c      	add	sp, #112	; 0x70
 8005b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ba0:	b003      	add	sp, #12
 8005ba2:	4770      	bx	lr
 8005ba4:	20000070 	.word	0x20000070
 8005ba8:	ffff0208 	.word	0xffff0208

08005bac <memset>:
 8005bac:	4603      	mov	r3, r0
 8005bae:	4402      	add	r2, r0
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d100      	bne.n	8005bb6 <memset+0xa>
 8005bb4:	4770      	bx	lr
 8005bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bba:	e7f9      	b.n	8005bb0 <memset+0x4>

08005bbc <__errno>:
 8005bbc:	4b01      	ldr	r3, [pc, #4]	; (8005bc4 <__errno+0x8>)
 8005bbe:	6818      	ldr	r0, [r3, #0]
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	20000070 	.word	0x20000070

08005bc8 <__libc_init_array>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	2600      	movs	r6, #0
 8005bcc:	4d0c      	ldr	r5, [pc, #48]	; (8005c00 <__libc_init_array+0x38>)
 8005bce:	4c0d      	ldr	r4, [pc, #52]	; (8005c04 <__libc_init_array+0x3c>)
 8005bd0:	1b64      	subs	r4, r4, r5
 8005bd2:	10a4      	asrs	r4, r4, #2
 8005bd4:	42a6      	cmp	r6, r4
 8005bd6:	d109      	bne.n	8005bec <__libc_init_array+0x24>
 8005bd8:	f000 fc7a 	bl	80064d0 <_init>
 8005bdc:	2600      	movs	r6, #0
 8005bde:	4d0a      	ldr	r5, [pc, #40]	; (8005c08 <__libc_init_array+0x40>)
 8005be0:	4c0a      	ldr	r4, [pc, #40]	; (8005c0c <__libc_init_array+0x44>)
 8005be2:	1b64      	subs	r4, r4, r5
 8005be4:	10a4      	asrs	r4, r4, #2
 8005be6:	42a6      	cmp	r6, r4
 8005be8:	d105      	bne.n	8005bf6 <__libc_init_array+0x2e>
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
 8005bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf0:	4798      	blx	r3
 8005bf2:	3601      	adds	r6, #1
 8005bf4:	e7ee      	b.n	8005bd4 <__libc_init_array+0xc>
 8005bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfa:	4798      	blx	r3
 8005bfc:	3601      	adds	r6, #1
 8005bfe:	e7f2      	b.n	8005be6 <__libc_init_array+0x1e>
 8005c00:	080072e8 	.word	0x080072e8
 8005c04:	080072e8 	.word	0x080072e8
 8005c08:	080072e8 	.word	0x080072e8
 8005c0c:	080072ec 	.word	0x080072ec

08005c10 <__retarget_lock_acquire_recursive>:
 8005c10:	4770      	bx	lr

08005c12 <__retarget_lock_release_recursive>:
 8005c12:	4770      	bx	lr

08005c14 <_free_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4605      	mov	r5, r0
 8005c18:	2900      	cmp	r1, #0
 8005c1a:	d040      	beq.n	8005c9e <_free_r+0x8a>
 8005c1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c20:	1f0c      	subs	r4, r1, #4
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	bfb8      	it	lt
 8005c26:	18e4      	addlt	r4, r4, r3
 8005c28:	f000 f8dc 	bl	8005de4 <__malloc_lock>
 8005c2c:	4a1c      	ldr	r2, [pc, #112]	; (8005ca0 <_free_r+0x8c>)
 8005c2e:	6813      	ldr	r3, [r2, #0]
 8005c30:	b933      	cbnz	r3, 8005c40 <_free_r+0x2c>
 8005c32:	6063      	str	r3, [r4, #4]
 8005c34:	6014      	str	r4, [r2, #0]
 8005c36:	4628      	mov	r0, r5
 8005c38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c3c:	f000 b8d8 	b.w	8005df0 <__malloc_unlock>
 8005c40:	42a3      	cmp	r3, r4
 8005c42:	d908      	bls.n	8005c56 <_free_r+0x42>
 8005c44:	6820      	ldr	r0, [r4, #0]
 8005c46:	1821      	adds	r1, r4, r0
 8005c48:	428b      	cmp	r3, r1
 8005c4a:	bf01      	itttt	eq
 8005c4c:	6819      	ldreq	r1, [r3, #0]
 8005c4e:	685b      	ldreq	r3, [r3, #4]
 8005c50:	1809      	addeq	r1, r1, r0
 8005c52:	6021      	streq	r1, [r4, #0]
 8005c54:	e7ed      	b.n	8005c32 <_free_r+0x1e>
 8005c56:	461a      	mov	r2, r3
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	b10b      	cbz	r3, 8005c60 <_free_r+0x4c>
 8005c5c:	42a3      	cmp	r3, r4
 8005c5e:	d9fa      	bls.n	8005c56 <_free_r+0x42>
 8005c60:	6811      	ldr	r1, [r2, #0]
 8005c62:	1850      	adds	r0, r2, r1
 8005c64:	42a0      	cmp	r0, r4
 8005c66:	d10b      	bne.n	8005c80 <_free_r+0x6c>
 8005c68:	6820      	ldr	r0, [r4, #0]
 8005c6a:	4401      	add	r1, r0
 8005c6c:	1850      	adds	r0, r2, r1
 8005c6e:	4283      	cmp	r3, r0
 8005c70:	6011      	str	r1, [r2, #0]
 8005c72:	d1e0      	bne.n	8005c36 <_free_r+0x22>
 8005c74:	6818      	ldr	r0, [r3, #0]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	4408      	add	r0, r1
 8005c7a:	6010      	str	r0, [r2, #0]
 8005c7c:	6053      	str	r3, [r2, #4]
 8005c7e:	e7da      	b.n	8005c36 <_free_r+0x22>
 8005c80:	d902      	bls.n	8005c88 <_free_r+0x74>
 8005c82:	230c      	movs	r3, #12
 8005c84:	602b      	str	r3, [r5, #0]
 8005c86:	e7d6      	b.n	8005c36 <_free_r+0x22>
 8005c88:	6820      	ldr	r0, [r4, #0]
 8005c8a:	1821      	adds	r1, r4, r0
 8005c8c:	428b      	cmp	r3, r1
 8005c8e:	bf01      	itttt	eq
 8005c90:	6819      	ldreq	r1, [r3, #0]
 8005c92:	685b      	ldreq	r3, [r3, #4]
 8005c94:	1809      	addeq	r1, r1, r0
 8005c96:	6021      	streq	r1, [r4, #0]
 8005c98:	6063      	str	r3, [r4, #4]
 8005c9a:	6054      	str	r4, [r2, #4]
 8005c9c:	e7cb      	b.n	8005c36 <_free_r+0x22>
 8005c9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ca0:	200007dc 	.word	0x200007dc

08005ca4 <sbrk_aligned>:
 8005ca4:	b570      	push	{r4, r5, r6, lr}
 8005ca6:	4e0e      	ldr	r6, [pc, #56]	; (8005ce0 <sbrk_aligned+0x3c>)
 8005ca8:	460c      	mov	r4, r1
 8005caa:	6831      	ldr	r1, [r6, #0]
 8005cac:	4605      	mov	r5, r0
 8005cae:	b911      	cbnz	r1, 8005cb6 <sbrk_aligned+0x12>
 8005cb0:	f000 fbaa 	bl	8006408 <_sbrk_r>
 8005cb4:	6030      	str	r0, [r6, #0]
 8005cb6:	4621      	mov	r1, r4
 8005cb8:	4628      	mov	r0, r5
 8005cba:	f000 fba5 	bl	8006408 <_sbrk_r>
 8005cbe:	1c43      	adds	r3, r0, #1
 8005cc0:	d00a      	beq.n	8005cd8 <sbrk_aligned+0x34>
 8005cc2:	1cc4      	adds	r4, r0, #3
 8005cc4:	f024 0403 	bic.w	r4, r4, #3
 8005cc8:	42a0      	cmp	r0, r4
 8005cca:	d007      	beq.n	8005cdc <sbrk_aligned+0x38>
 8005ccc:	1a21      	subs	r1, r4, r0
 8005cce:	4628      	mov	r0, r5
 8005cd0:	f000 fb9a 	bl	8006408 <_sbrk_r>
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d101      	bne.n	8005cdc <sbrk_aligned+0x38>
 8005cd8:	f04f 34ff 	mov.w	r4, #4294967295
 8005cdc:	4620      	mov	r0, r4
 8005cde:	bd70      	pop	{r4, r5, r6, pc}
 8005ce0:	200007e0 	.word	0x200007e0

08005ce4 <_malloc_r>:
 8005ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ce8:	1ccd      	adds	r5, r1, #3
 8005cea:	f025 0503 	bic.w	r5, r5, #3
 8005cee:	3508      	adds	r5, #8
 8005cf0:	2d0c      	cmp	r5, #12
 8005cf2:	bf38      	it	cc
 8005cf4:	250c      	movcc	r5, #12
 8005cf6:	2d00      	cmp	r5, #0
 8005cf8:	4607      	mov	r7, r0
 8005cfa:	db01      	blt.n	8005d00 <_malloc_r+0x1c>
 8005cfc:	42a9      	cmp	r1, r5
 8005cfe:	d905      	bls.n	8005d0c <_malloc_r+0x28>
 8005d00:	230c      	movs	r3, #12
 8005d02:	2600      	movs	r6, #0
 8005d04:	603b      	str	r3, [r7, #0]
 8005d06:	4630      	mov	r0, r6
 8005d08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005de0 <_malloc_r+0xfc>
 8005d10:	f000 f868 	bl	8005de4 <__malloc_lock>
 8005d14:	f8d8 3000 	ldr.w	r3, [r8]
 8005d18:	461c      	mov	r4, r3
 8005d1a:	bb5c      	cbnz	r4, 8005d74 <_malloc_r+0x90>
 8005d1c:	4629      	mov	r1, r5
 8005d1e:	4638      	mov	r0, r7
 8005d20:	f7ff ffc0 	bl	8005ca4 <sbrk_aligned>
 8005d24:	1c43      	adds	r3, r0, #1
 8005d26:	4604      	mov	r4, r0
 8005d28:	d155      	bne.n	8005dd6 <_malloc_r+0xf2>
 8005d2a:	f8d8 4000 	ldr.w	r4, [r8]
 8005d2e:	4626      	mov	r6, r4
 8005d30:	2e00      	cmp	r6, #0
 8005d32:	d145      	bne.n	8005dc0 <_malloc_r+0xdc>
 8005d34:	2c00      	cmp	r4, #0
 8005d36:	d048      	beq.n	8005dca <_malloc_r+0xe6>
 8005d38:	6823      	ldr	r3, [r4, #0]
 8005d3a:	4631      	mov	r1, r6
 8005d3c:	4638      	mov	r0, r7
 8005d3e:	eb04 0903 	add.w	r9, r4, r3
 8005d42:	f000 fb61 	bl	8006408 <_sbrk_r>
 8005d46:	4581      	cmp	r9, r0
 8005d48:	d13f      	bne.n	8005dca <_malloc_r+0xe6>
 8005d4a:	6821      	ldr	r1, [r4, #0]
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	1a6d      	subs	r5, r5, r1
 8005d50:	4629      	mov	r1, r5
 8005d52:	f7ff ffa7 	bl	8005ca4 <sbrk_aligned>
 8005d56:	3001      	adds	r0, #1
 8005d58:	d037      	beq.n	8005dca <_malloc_r+0xe6>
 8005d5a:	6823      	ldr	r3, [r4, #0]
 8005d5c:	442b      	add	r3, r5
 8005d5e:	6023      	str	r3, [r4, #0]
 8005d60:	f8d8 3000 	ldr.w	r3, [r8]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d038      	beq.n	8005dda <_malloc_r+0xf6>
 8005d68:	685a      	ldr	r2, [r3, #4]
 8005d6a:	42a2      	cmp	r2, r4
 8005d6c:	d12b      	bne.n	8005dc6 <_malloc_r+0xe2>
 8005d6e:	2200      	movs	r2, #0
 8005d70:	605a      	str	r2, [r3, #4]
 8005d72:	e00f      	b.n	8005d94 <_malloc_r+0xb0>
 8005d74:	6822      	ldr	r2, [r4, #0]
 8005d76:	1b52      	subs	r2, r2, r5
 8005d78:	d41f      	bmi.n	8005dba <_malloc_r+0xd6>
 8005d7a:	2a0b      	cmp	r2, #11
 8005d7c:	d917      	bls.n	8005dae <_malloc_r+0xca>
 8005d7e:	1961      	adds	r1, r4, r5
 8005d80:	42a3      	cmp	r3, r4
 8005d82:	6025      	str	r5, [r4, #0]
 8005d84:	bf18      	it	ne
 8005d86:	6059      	strne	r1, [r3, #4]
 8005d88:	6863      	ldr	r3, [r4, #4]
 8005d8a:	bf08      	it	eq
 8005d8c:	f8c8 1000 	streq.w	r1, [r8]
 8005d90:	5162      	str	r2, [r4, r5]
 8005d92:	604b      	str	r3, [r1, #4]
 8005d94:	4638      	mov	r0, r7
 8005d96:	f104 060b 	add.w	r6, r4, #11
 8005d9a:	f000 f829 	bl	8005df0 <__malloc_unlock>
 8005d9e:	f026 0607 	bic.w	r6, r6, #7
 8005da2:	1d23      	adds	r3, r4, #4
 8005da4:	1af2      	subs	r2, r6, r3
 8005da6:	d0ae      	beq.n	8005d06 <_malloc_r+0x22>
 8005da8:	1b9b      	subs	r3, r3, r6
 8005daa:	50a3      	str	r3, [r4, r2]
 8005dac:	e7ab      	b.n	8005d06 <_malloc_r+0x22>
 8005dae:	42a3      	cmp	r3, r4
 8005db0:	6862      	ldr	r2, [r4, #4]
 8005db2:	d1dd      	bne.n	8005d70 <_malloc_r+0x8c>
 8005db4:	f8c8 2000 	str.w	r2, [r8]
 8005db8:	e7ec      	b.n	8005d94 <_malloc_r+0xb0>
 8005dba:	4623      	mov	r3, r4
 8005dbc:	6864      	ldr	r4, [r4, #4]
 8005dbe:	e7ac      	b.n	8005d1a <_malloc_r+0x36>
 8005dc0:	4634      	mov	r4, r6
 8005dc2:	6876      	ldr	r6, [r6, #4]
 8005dc4:	e7b4      	b.n	8005d30 <_malloc_r+0x4c>
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	e7cc      	b.n	8005d64 <_malloc_r+0x80>
 8005dca:	230c      	movs	r3, #12
 8005dcc:	4638      	mov	r0, r7
 8005dce:	603b      	str	r3, [r7, #0]
 8005dd0:	f000 f80e 	bl	8005df0 <__malloc_unlock>
 8005dd4:	e797      	b.n	8005d06 <_malloc_r+0x22>
 8005dd6:	6025      	str	r5, [r4, #0]
 8005dd8:	e7dc      	b.n	8005d94 <_malloc_r+0xb0>
 8005dda:	605b      	str	r3, [r3, #4]
 8005ddc:	deff      	udf	#255	; 0xff
 8005dde:	bf00      	nop
 8005de0:	200007dc 	.word	0x200007dc

08005de4 <__malloc_lock>:
 8005de4:	4801      	ldr	r0, [pc, #4]	; (8005dec <__malloc_lock+0x8>)
 8005de6:	f7ff bf13 	b.w	8005c10 <__retarget_lock_acquire_recursive>
 8005dea:	bf00      	nop
 8005dec:	200007d8 	.word	0x200007d8

08005df0 <__malloc_unlock>:
 8005df0:	4801      	ldr	r0, [pc, #4]	; (8005df8 <__malloc_unlock+0x8>)
 8005df2:	f7ff bf0e 	b.w	8005c12 <__retarget_lock_release_recursive>
 8005df6:	bf00      	nop
 8005df8:	200007d8 	.word	0x200007d8

08005dfc <__ssputs_r>:
 8005dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e00:	461f      	mov	r7, r3
 8005e02:	688e      	ldr	r6, [r1, #8]
 8005e04:	4682      	mov	sl, r0
 8005e06:	42be      	cmp	r6, r7
 8005e08:	460c      	mov	r4, r1
 8005e0a:	4690      	mov	r8, r2
 8005e0c:	680b      	ldr	r3, [r1, #0]
 8005e0e:	d82c      	bhi.n	8005e6a <__ssputs_r+0x6e>
 8005e10:	898a      	ldrh	r2, [r1, #12]
 8005e12:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e16:	d026      	beq.n	8005e66 <__ssputs_r+0x6a>
 8005e18:	6965      	ldr	r5, [r4, #20]
 8005e1a:	6909      	ldr	r1, [r1, #16]
 8005e1c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e20:	eba3 0901 	sub.w	r9, r3, r1
 8005e24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e28:	1c7b      	adds	r3, r7, #1
 8005e2a:	444b      	add	r3, r9
 8005e2c:	106d      	asrs	r5, r5, #1
 8005e2e:	429d      	cmp	r5, r3
 8005e30:	bf38      	it	cc
 8005e32:	461d      	movcc	r5, r3
 8005e34:	0553      	lsls	r3, r2, #21
 8005e36:	d527      	bpl.n	8005e88 <__ssputs_r+0x8c>
 8005e38:	4629      	mov	r1, r5
 8005e3a:	f7ff ff53 	bl	8005ce4 <_malloc_r>
 8005e3e:	4606      	mov	r6, r0
 8005e40:	b360      	cbz	r0, 8005e9c <__ssputs_r+0xa0>
 8005e42:	464a      	mov	r2, r9
 8005e44:	6921      	ldr	r1, [r4, #16]
 8005e46:	f000 fafd 	bl	8006444 <memcpy>
 8005e4a:	89a3      	ldrh	r3, [r4, #12]
 8005e4c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e54:	81a3      	strh	r3, [r4, #12]
 8005e56:	6126      	str	r6, [r4, #16]
 8005e58:	444e      	add	r6, r9
 8005e5a:	6026      	str	r6, [r4, #0]
 8005e5c:	463e      	mov	r6, r7
 8005e5e:	6165      	str	r5, [r4, #20]
 8005e60:	eba5 0509 	sub.w	r5, r5, r9
 8005e64:	60a5      	str	r5, [r4, #8]
 8005e66:	42be      	cmp	r6, r7
 8005e68:	d900      	bls.n	8005e6c <__ssputs_r+0x70>
 8005e6a:	463e      	mov	r6, r7
 8005e6c:	4632      	mov	r2, r6
 8005e6e:	4641      	mov	r1, r8
 8005e70:	6820      	ldr	r0, [r4, #0]
 8005e72:	f000 faaf 	bl	80063d4 <memmove>
 8005e76:	2000      	movs	r0, #0
 8005e78:	68a3      	ldr	r3, [r4, #8]
 8005e7a:	1b9b      	subs	r3, r3, r6
 8005e7c:	60a3      	str	r3, [r4, #8]
 8005e7e:	6823      	ldr	r3, [r4, #0]
 8005e80:	4433      	add	r3, r6
 8005e82:	6023      	str	r3, [r4, #0]
 8005e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e88:	462a      	mov	r2, r5
 8005e8a:	f000 fae9 	bl	8006460 <_realloc_r>
 8005e8e:	4606      	mov	r6, r0
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d1e0      	bne.n	8005e56 <__ssputs_r+0x5a>
 8005e94:	4650      	mov	r0, sl
 8005e96:	6921      	ldr	r1, [r4, #16]
 8005e98:	f7ff febc 	bl	8005c14 <_free_r>
 8005e9c:	230c      	movs	r3, #12
 8005e9e:	f8ca 3000 	str.w	r3, [sl]
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005eac:	81a3      	strh	r3, [r4, #12]
 8005eae:	e7e9      	b.n	8005e84 <__ssputs_r+0x88>

08005eb0 <_svfiprintf_r>:
 8005eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eb4:	4698      	mov	r8, r3
 8005eb6:	898b      	ldrh	r3, [r1, #12]
 8005eb8:	4607      	mov	r7, r0
 8005eba:	061b      	lsls	r3, r3, #24
 8005ebc:	460d      	mov	r5, r1
 8005ebe:	4614      	mov	r4, r2
 8005ec0:	b09d      	sub	sp, #116	; 0x74
 8005ec2:	d50e      	bpl.n	8005ee2 <_svfiprintf_r+0x32>
 8005ec4:	690b      	ldr	r3, [r1, #16]
 8005ec6:	b963      	cbnz	r3, 8005ee2 <_svfiprintf_r+0x32>
 8005ec8:	2140      	movs	r1, #64	; 0x40
 8005eca:	f7ff ff0b 	bl	8005ce4 <_malloc_r>
 8005ece:	6028      	str	r0, [r5, #0]
 8005ed0:	6128      	str	r0, [r5, #16]
 8005ed2:	b920      	cbnz	r0, 8005ede <_svfiprintf_r+0x2e>
 8005ed4:	230c      	movs	r3, #12
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8005edc:	e0d0      	b.n	8006080 <_svfiprintf_r+0x1d0>
 8005ede:	2340      	movs	r3, #64	; 0x40
 8005ee0:	616b      	str	r3, [r5, #20]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	9309      	str	r3, [sp, #36]	; 0x24
 8005ee6:	2320      	movs	r3, #32
 8005ee8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005eec:	2330      	movs	r3, #48	; 0x30
 8005eee:	f04f 0901 	mov.w	r9, #1
 8005ef2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ef6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8006098 <_svfiprintf_r+0x1e8>
 8005efa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005efe:	4623      	mov	r3, r4
 8005f00:	469a      	mov	sl, r3
 8005f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f06:	b10a      	cbz	r2, 8005f0c <_svfiprintf_r+0x5c>
 8005f08:	2a25      	cmp	r2, #37	; 0x25
 8005f0a:	d1f9      	bne.n	8005f00 <_svfiprintf_r+0x50>
 8005f0c:	ebba 0b04 	subs.w	fp, sl, r4
 8005f10:	d00b      	beq.n	8005f2a <_svfiprintf_r+0x7a>
 8005f12:	465b      	mov	r3, fp
 8005f14:	4622      	mov	r2, r4
 8005f16:	4629      	mov	r1, r5
 8005f18:	4638      	mov	r0, r7
 8005f1a:	f7ff ff6f 	bl	8005dfc <__ssputs_r>
 8005f1e:	3001      	adds	r0, #1
 8005f20:	f000 80a9 	beq.w	8006076 <_svfiprintf_r+0x1c6>
 8005f24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f26:	445a      	add	r2, fp
 8005f28:	9209      	str	r2, [sp, #36]	; 0x24
 8005f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 80a1 	beq.w	8006076 <_svfiprintf_r+0x1c6>
 8005f34:	2300      	movs	r3, #0
 8005f36:	f04f 32ff 	mov.w	r2, #4294967295
 8005f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f3e:	f10a 0a01 	add.w	sl, sl, #1
 8005f42:	9304      	str	r3, [sp, #16]
 8005f44:	9307      	str	r3, [sp, #28]
 8005f46:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f4a:	931a      	str	r3, [sp, #104]	; 0x68
 8005f4c:	4654      	mov	r4, sl
 8005f4e:	2205      	movs	r2, #5
 8005f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f54:	4850      	ldr	r0, [pc, #320]	; (8006098 <_svfiprintf_r+0x1e8>)
 8005f56:	f000 fa67 	bl	8006428 <memchr>
 8005f5a:	9a04      	ldr	r2, [sp, #16]
 8005f5c:	b9d8      	cbnz	r0, 8005f96 <_svfiprintf_r+0xe6>
 8005f5e:	06d0      	lsls	r0, r2, #27
 8005f60:	bf44      	itt	mi
 8005f62:	2320      	movmi	r3, #32
 8005f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f68:	0711      	lsls	r1, r2, #28
 8005f6a:	bf44      	itt	mi
 8005f6c:	232b      	movmi	r3, #43	; 0x2b
 8005f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f72:	f89a 3000 	ldrb.w	r3, [sl]
 8005f76:	2b2a      	cmp	r3, #42	; 0x2a
 8005f78:	d015      	beq.n	8005fa6 <_svfiprintf_r+0xf6>
 8005f7a:	4654      	mov	r4, sl
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	f04f 0c0a 	mov.w	ip, #10
 8005f82:	9a07      	ldr	r2, [sp, #28]
 8005f84:	4621      	mov	r1, r4
 8005f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f8a:	3b30      	subs	r3, #48	; 0x30
 8005f8c:	2b09      	cmp	r3, #9
 8005f8e:	d94d      	bls.n	800602c <_svfiprintf_r+0x17c>
 8005f90:	b1b0      	cbz	r0, 8005fc0 <_svfiprintf_r+0x110>
 8005f92:	9207      	str	r2, [sp, #28]
 8005f94:	e014      	b.n	8005fc0 <_svfiprintf_r+0x110>
 8005f96:	eba0 0308 	sub.w	r3, r0, r8
 8005f9a:	fa09 f303 	lsl.w	r3, r9, r3
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	46a2      	mov	sl, r4
 8005fa2:	9304      	str	r3, [sp, #16]
 8005fa4:	e7d2      	b.n	8005f4c <_svfiprintf_r+0x9c>
 8005fa6:	9b03      	ldr	r3, [sp, #12]
 8005fa8:	1d19      	adds	r1, r3, #4
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	9103      	str	r1, [sp, #12]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	bfbb      	ittet	lt
 8005fb2:	425b      	neglt	r3, r3
 8005fb4:	f042 0202 	orrlt.w	r2, r2, #2
 8005fb8:	9307      	strge	r3, [sp, #28]
 8005fba:	9307      	strlt	r3, [sp, #28]
 8005fbc:	bfb8      	it	lt
 8005fbe:	9204      	strlt	r2, [sp, #16]
 8005fc0:	7823      	ldrb	r3, [r4, #0]
 8005fc2:	2b2e      	cmp	r3, #46	; 0x2e
 8005fc4:	d10c      	bne.n	8005fe0 <_svfiprintf_r+0x130>
 8005fc6:	7863      	ldrb	r3, [r4, #1]
 8005fc8:	2b2a      	cmp	r3, #42	; 0x2a
 8005fca:	d134      	bne.n	8006036 <_svfiprintf_r+0x186>
 8005fcc:	9b03      	ldr	r3, [sp, #12]
 8005fce:	3402      	adds	r4, #2
 8005fd0:	1d1a      	adds	r2, r3, #4
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	9203      	str	r2, [sp, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	bfb8      	it	lt
 8005fda:	f04f 33ff 	movlt.w	r3, #4294967295
 8005fde:	9305      	str	r3, [sp, #20]
 8005fe0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800609c <_svfiprintf_r+0x1ec>
 8005fe4:	2203      	movs	r2, #3
 8005fe6:	4650      	mov	r0, sl
 8005fe8:	7821      	ldrb	r1, [r4, #0]
 8005fea:	f000 fa1d 	bl	8006428 <memchr>
 8005fee:	b138      	cbz	r0, 8006000 <_svfiprintf_r+0x150>
 8005ff0:	2240      	movs	r2, #64	; 0x40
 8005ff2:	9b04      	ldr	r3, [sp, #16]
 8005ff4:	eba0 000a 	sub.w	r0, r0, sl
 8005ff8:	4082      	lsls	r2, r0
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	3401      	adds	r4, #1
 8005ffe:	9304      	str	r3, [sp, #16]
 8006000:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006004:	2206      	movs	r2, #6
 8006006:	4826      	ldr	r0, [pc, #152]	; (80060a0 <_svfiprintf_r+0x1f0>)
 8006008:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800600c:	f000 fa0c 	bl	8006428 <memchr>
 8006010:	2800      	cmp	r0, #0
 8006012:	d038      	beq.n	8006086 <_svfiprintf_r+0x1d6>
 8006014:	4b23      	ldr	r3, [pc, #140]	; (80060a4 <_svfiprintf_r+0x1f4>)
 8006016:	bb1b      	cbnz	r3, 8006060 <_svfiprintf_r+0x1b0>
 8006018:	9b03      	ldr	r3, [sp, #12]
 800601a:	3307      	adds	r3, #7
 800601c:	f023 0307 	bic.w	r3, r3, #7
 8006020:	3308      	adds	r3, #8
 8006022:	9303      	str	r3, [sp, #12]
 8006024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006026:	4433      	add	r3, r6
 8006028:	9309      	str	r3, [sp, #36]	; 0x24
 800602a:	e768      	b.n	8005efe <_svfiprintf_r+0x4e>
 800602c:	460c      	mov	r4, r1
 800602e:	2001      	movs	r0, #1
 8006030:	fb0c 3202 	mla	r2, ip, r2, r3
 8006034:	e7a6      	b.n	8005f84 <_svfiprintf_r+0xd4>
 8006036:	2300      	movs	r3, #0
 8006038:	f04f 0c0a 	mov.w	ip, #10
 800603c:	4619      	mov	r1, r3
 800603e:	3401      	adds	r4, #1
 8006040:	9305      	str	r3, [sp, #20]
 8006042:	4620      	mov	r0, r4
 8006044:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006048:	3a30      	subs	r2, #48	; 0x30
 800604a:	2a09      	cmp	r2, #9
 800604c:	d903      	bls.n	8006056 <_svfiprintf_r+0x1a6>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d0c6      	beq.n	8005fe0 <_svfiprintf_r+0x130>
 8006052:	9105      	str	r1, [sp, #20]
 8006054:	e7c4      	b.n	8005fe0 <_svfiprintf_r+0x130>
 8006056:	4604      	mov	r4, r0
 8006058:	2301      	movs	r3, #1
 800605a:	fb0c 2101 	mla	r1, ip, r1, r2
 800605e:	e7f0      	b.n	8006042 <_svfiprintf_r+0x192>
 8006060:	ab03      	add	r3, sp, #12
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	462a      	mov	r2, r5
 8006066:	4638      	mov	r0, r7
 8006068:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <_svfiprintf_r+0x1f8>)
 800606a:	a904      	add	r1, sp, #16
 800606c:	f3af 8000 	nop.w
 8006070:	1c42      	adds	r2, r0, #1
 8006072:	4606      	mov	r6, r0
 8006074:	d1d6      	bne.n	8006024 <_svfiprintf_r+0x174>
 8006076:	89ab      	ldrh	r3, [r5, #12]
 8006078:	065b      	lsls	r3, r3, #25
 800607a:	f53f af2d 	bmi.w	8005ed8 <_svfiprintf_r+0x28>
 800607e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006080:	b01d      	add	sp, #116	; 0x74
 8006082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006086:	ab03      	add	r3, sp, #12
 8006088:	9300      	str	r3, [sp, #0]
 800608a:	462a      	mov	r2, r5
 800608c:	4638      	mov	r0, r7
 800608e:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <_svfiprintf_r+0x1f8>)
 8006090:	a904      	add	r1, sp, #16
 8006092:	f000 f87d 	bl	8006190 <_printf_i>
 8006096:	e7eb      	b.n	8006070 <_svfiprintf_r+0x1c0>
 8006098:	080072b2 	.word	0x080072b2
 800609c:	080072b8 	.word	0x080072b8
 80060a0:	080072bc 	.word	0x080072bc
 80060a4:	00000000 	.word	0x00000000
 80060a8:	08005dfd 	.word	0x08005dfd

080060ac <_printf_common>:
 80060ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060b0:	4616      	mov	r6, r2
 80060b2:	4699      	mov	r9, r3
 80060b4:	688a      	ldr	r2, [r1, #8]
 80060b6:	690b      	ldr	r3, [r1, #16]
 80060b8:	4607      	mov	r7, r0
 80060ba:	4293      	cmp	r3, r2
 80060bc:	bfb8      	it	lt
 80060be:	4613      	movlt	r3, r2
 80060c0:	6033      	str	r3, [r6, #0]
 80060c2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060c6:	460c      	mov	r4, r1
 80060c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060cc:	b10a      	cbz	r2, 80060d2 <_printf_common+0x26>
 80060ce:	3301      	adds	r3, #1
 80060d0:	6033      	str	r3, [r6, #0]
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	0699      	lsls	r1, r3, #26
 80060d6:	bf42      	ittt	mi
 80060d8:	6833      	ldrmi	r3, [r6, #0]
 80060da:	3302      	addmi	r3, #2
 80060dc:	6033      	strmi	r3, [r6, #0]
 80060de:	6825      	ldr	r5, [r4, #0]
 80060e0:	f015 0506 	ands.w	r5, r5, #6
 80060e4:	d106      	bne.n	80060f4 <_printf_common+0x48>
 80060e6:	f104 0a19 	add.w	sl, r4, #25
 80060ea:	68e3      	ldr	r3, [r4, #12]
 80060ec:	6832      	ldr	r2, [r6, #0]
 80060ee:	1a9b      	subs	r3, r3, r2
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	dc2b      	bgt.n	800614c <_printf_common+0xa0>
 80060f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80060f8:	1e13      	subs	r3, r2, #0
 80060fa:	6822      	ldr	r2, [r4, #0]
 80060fc:	bf18      	it	ne
 80060fe:	2301      	movne	r3, #1
 8006100:	0692      	lsls	r2, r2, #26
 8006102:	d430      	bmi.n	8006166 <_printf_common+0xba>
 8006104:	4649      	mov	r1, r9
 8006106:	4638      	mov	r0, r7
 8006108:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800610c:	47c0      	blx	r8
 800610e:	3001      	adds	r0, #1
 8006110:	d023      	beq.n	800615a <_printf_common+0xae>
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	6922      	ldr	r2, [r4, #16]
 8006116:	f003 0306 	and.w	r3, r3, #6
 800611a:	2b04      	cmp	r3, #4
 800611c:	bf14      	ite	ne
 800611e:	2500      	movne	r5, #0
 8006120:	6833      	ldreq	r3, [r6, #0]
 8006122:	f04f 0600 	mov.w	r6, #0
 8006126:	bf08      	it	eq
 8006128:	68e5      	ldreq	r5, [r4, #12]
 800612a:	f104 041a 	add.w	r4, r4, #26
 800612e:	bf08      	it	eq
 8006130:	1aed      	subeq	r5, r5, r3
 8006132:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006136:	bf08      	it	eq
 8006138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800613c:	4293      	cmp	r3, r2
 800613e:	bfc4      	itt	gt
 8006140:	1a9b      	subgt	r3, r3, r2
 8006142:	18ed      	addgt	r5, r5, r3
 8006144:	42b5      	cmp	r5, r6
 8006146:	d11a      	bne.n	800617e <_printf_common+0xd2>
 8006148:	2000      	movs	r0, #0
 800614a:	e008      	b.n	800615e <_printf_common+0xb2>
 800614c:	2301      	movs	r3, #1
 800614e:	4652      	mov	r2, sl
 8006150:	4649      	mov	r1, r9
 8006152:	4638      	mov	r0, r7
 8006154:	47c0      	blx	r8
 8006156:	3001      	adds	r0, #1
 8006158:	d103      	bne.n	8006162 <_printf_common+0xb6>
 800615a:	f04f 30ff 	mov.w	r0, #4294967295
 800615e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006162:	3501      	adds	r5, #1
 8006164:	e7c1      	b.n	80060ea <_printf_common+0x3e>
 8006166:	2030      	movs	r0, #48	; 0x30
 8006168:	18e1      	adds	r1, r4, r3
 800616a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006174:	4422      	add	r2, r4
 8006176:	3302      	adds	r3, #2
 8006178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800617c:	e7c2      	b.n	8006104 <_printf_common+0x58>
 800617e:	2301      	movs	r3, #1
 8006180:	4622      	mov	r2, r4
 8006182:	4649      	mov	r1, r9
 8006184:	4638      	mov	r0, r7
 8006186:	47c0      	blx	r8
 8006188:	3001      	adds	r0, #1
 800618a:	d0e6      	beq.n	800615a <_printf_common+0xae>
 800618c:	3601      	adds	r6, #1
 800618e:	e7d9      	b.n	8006144 <_printf_common+0x98>

08006190 <_printf_i>:
 8006190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006194:	7e0f      	ldrb	r7, [r1, #24]
 8006196:	4691      	mov	r9, r2
 8006198:	2f78      	cmp	r7, #120	; 0x78
 800619a:	4680      	mov	r8, r0
 800619c:	460c      	mov	r4, r1
 800619e:	469a      	mov	sl, r3
 80061a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061a6:	d807      	bhi.n	80061b8 <_printf_i+0x28>
 80061a8:	2f62      	cmp	r7, #98	; 0x62
 80061aa:	d80a      	bhi.n	80061c2 <_printf_i+0x32>
 80061ac:	2f00      	cmp	r7, #0
 80061ae:	f000 80d5 	beq.w	800635c <_printf_i+0x1cc>
 80061b2:	2f58      	cmp	r7, #88	; 0x58
 80061b4:	f000 80c1 	beq.w	800633a <_printf_i+0x1aa>
 80061b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061c0:	e03a      	b.n	8006238 <_printf_i+0xa8>
 80061c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061c6:	2b15      	cmp	r3, #21
 80061c8:	d8f6      	bhi.n	80061b8 <_printf_i+0x28>
 80061ca:	a101      	add	r1, pc, #4	; (adr r1, 80061d0 <_printf_i+0x40>)
 80061cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061d0:	08006229 	.word	0x08006229
 80061d4:	0800623d 	.word	0x0800623d
 80061d8:	080061b9 	.word	0x080061b9
 80061dc:	080061b9 	.word	0x080061b9
 80061e0:	080061b9 	.word	0x080061b9
 80061e4:	080061b9 	.word	0x080061b9
 80061e8:	0800623d 	.word	0x0800623d
 80061ec:	080061b9 	.word	0x080061b9
 80061f0:	080061b9 	.word	0x080061b9
 80061f4:	080061b9 	.word	0x080061b9
 80061f8:	080061b9 	.word	0x080061b9
 80061fc:	08006343 	.word	0x08006343
 8006200:	08006269 	.word	0x08006269
 8006204:	080062fd 	.word	0x080062fd
 8006208:	080061b9 	.word	0x080061b9
 800620c:	080061b9 	.word	0x080061b9
 8006210:	08006365 	.word	0x08006365
 8006214:	080061b9 	.word	0x080061b9
 8006218:	08006269 	.word	0x08006269
 800621c:	080061b9 	.word	0x080061b9
 8006220:	080061b9 	.word	0x080061b9
 8006224:	08006305 	.word	0x08006305
 8006228:	682b      	ldr	r3, [r5, #0]
 800622a:	1d1a      	adds	r2, r3, #4
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	602a      	str	r2, [r5, #0]
 8006230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006238:	2301      	movs	r3, #1
 800623a:	e0a0      	b.n	800637e <_printf_i+0x1ee>
 800623c:	6820      	ldr	r0, [r4, #0]
 800623e:	682b      	ldr	r3, [r5, #0]
 8006240:	0607      	lsls	r7, r0, #24
 8006242:	f103 0104 	add.w	r1, r3, #4
 8006246:	6029      	str	r1, [r5, #0]
 8006248:	d501      	bpl.n	800624e <_printf_i+0xbe>
 800624a:	681e      	ldr	r6, [r3, #0]
 800624c:	e003      	b.n	8006256 <_printf_i+0xc6>
 800624e:	0646      	lsls	r6, r0, #25
 8006250:	d5fb      	bpl.n	800624a <_printf_i+0xba>
 8006252:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006256:	2e00      	cmp	r6, #0
 8006258:	da03      	bge.n	8006262 <_printf_i+0xd2>
 800625a:	232d      	movs	r3, #45	; 0x2d
 800625c:	4276      	negs	r6, r6
 800625e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006262:	230a      	movs	r3, #10
 8006264:	4859      	ldr	r0, [pc, #356]	; (80063cc <_printf_i+0x23c>)
 8006266:	e012      	b.n	800628e <_printf_i+0xfe>
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	6820      	ldr	r0, [r4, #0]
 800626c:	1d19      	adds	r1, r3, #4
 800626e:	6029      	str	r1, [r5, #0]
 8006270:	0605      	lsls	r5, r0, #24
 8006272:	d501      	bpl.n	8006278 <_printf_i+0xe8>
 8006274:	681e      	ldr	r6, [r3, #0]
 8006276:	e002      	b.n	800627e <_printf_i+0xee>
 8006278:	0641      	lsls	r1, r0, #25
 800627a:	d5fb      	bpl.n	8006274 <_printf_i+0xe4>
 800627c:	881e      	ldrh	r6, [r3, #0]
 800627e:	2f6f      	cmp	r7, #111	; 0x6f
 8006280:	bf0c      	ite	eq
 8006282:	2308      	moveq	r3, #8
 8006284:	230a      	movne	r3, #10
 8006286:	4851      	ldr	r0, [pc, #324]	; (80063cc <_printf_i+0x23c>)
 8006288:	2100      	movs	r1, #0
 800628a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800628e:	6865      	ldr	r5, [r4, #4]
 8006290:	2d00      	cmp	r5, #0
 8006292:	bfa8      	it	ge
 8006294:	6821      	ldrge	r1, [r4, #0]
 8006296:	60a5      	str	r5, [r4, #8]
 8006298:	bfa4      	itt	ge
 800629a:	f021 0104 	bicge.w	r1, r1, #4
 800629e:	6021      	strge	r1, [r4, #0]
 80062a0:	b90e      	cbnz	r6, 80062a6 <_printf_i+0x116>
 80062a2:	2d00      	cmp	r5, #0
 80062a4:	d04b      	beq.n	800633e <_printf_i+0x1ae>
 80062a6:	4615      	mov	r5, r2
 80062a8:	fbb6 f1f3 	udiv	r1, r6, r3
 80062ac:	fb03 6711 	mls	r7, r3, r1, r6
 80062b0:	5dc7      	ldrb	r7, [r0, r7]
 80062b2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062b6:	4637      	mov	r7, r6
 80062b8:	42bb      	cmp	r3, r7
 80062ba:	460e      	mov	r6, r1
 80062bc:	d9f4      	bls.n	80062a8 <_printf_i+0x118>
 80062be:	2b08      	cmp	r3, #8
 80062c0:	d10b      	bne.n	80062da <_printf_i+0x14a>
 80062c2:	6823      	ldr	r3, [r4, #0]
 80062c4:	07de      	lsls	r6, r3, #31
 80062c6:	d508      	bpl.n	80062da <_printf_i+0x14a>
 80062c8:	6923      	ldr	r3, [r4, #16]
 80062ca:	6861      	ldr	r1, [r4, #4]
 80062cc:	4299      	cmp	r1, r3
 80062ce:	bfde      	ittt	le
 80062d0:	2330      	movle	r3, #48	; 0x30
 80062d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80062da:	1b52      	subs	r2, r2, r5
 80062dc:	6122      	str	r2, [r4, #16]
 80062de:	464b      	mov	r3, r9
 80062e0:	4621      	mov	r1, r4
 80062e2:	4640      	mov	r0, r8
 80062e4:	f8cd a000 	str.w	sl, [sp]
 80062e8:	aa03      	add	r2, sp, #12
 80062ea:	f7ff fedf 	bl	80060ac <_printf_common>
 80062ee:	3001      	adds	r0, #1
 80062f0:	d14a      	bne.n	8006388 <_printf_i+0x1f8>
 80062f2:	f04f 30ff 	mov.w	r0, #4294967295
 80062f6:	b004      	add	sp, #16
 80062f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	f043 0320 	orr.w	r3, r3, #32
 8006302:	6023      	str	r3, [r4, #0]
 8006304:	2778      	movs	r7, #120	; 0x78
 8006306:	4832      	ldr	r0, [pc, #200]	; (80063d0 <_printf_i+0x240>)
 8006308:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800630c:	6823      	ldr	r3, [r4, #0]
 800630e:	6829      	ldr	r1, [r5, #0]
 8006310:	061f      	lsls	r7, r3, #24
 8006312:	f851 6b04 	ldr.w	r6, [r1], #4
 8006316:	d402      	bmi.n	800631e <_printf_i+0x18e>
 8006318:	065f      	lsls	r7, r3, #25
 800631a:	bf48      	it	mi
 800631c:	b2b6      	uxthmi	r6, r6
 800631e:	07df      	lsls	r7, r3, #31
 8006320:	bf48      	it	mi
 8006322:	f043 0320 	orrmi.w	r3, r3, #32
 8006326:	6029      	str	r1, [r5, #0]
 8006328:	bf48      	it	mi
 800632a:	6023      	strmi	r3, [r4, #0]
 800632c:	b91e      	cbnz	r6, 8006336 <_printf_i+0x1a6>
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	f023 0320 	bic.w	r3, r3, #32
 8006334:	6023      	str	r3, [r4, #0]
 8006336:	2310      	movs	r3, #16
 8006338:	e7a6      	b.n	8006288 <_printf_i+0xf8>
 800633a:	4824      	ldr	r0, [pc, #144]	; (80063cc <_printf_i+0x23c>)
 800633c:	e7e4      	b.n	8006308 <_printf_i+0x178>
 800633e:	4615      	mov	r5, r2
 8006340:	e7bd      	b.n	80062be <_printf_i+0x12e>
 8006342:	682b      	ldr	r3, [r5, #0]
 8006344:	6826      	ldr	r6, [r4, #0]
 8006346:	1d18      	adds	r0, r3, #4
 8006348:	6961      	ldr	r1, [r4, #20]
 800634a:	6028      	str	r0, [r5, #0]
 800634c:	0635      	lsls	r5, r6, #24
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	d501      	bpl.n	8006356 <_printf_i+0x1c6>
 8006352:	6019      	str	r1, [r3, #0]
 8006354:	e002      	b.n	800635c <_printf_i+0x1cc>
 8006356:	0670      	lsls	r0, r6, #25
 8006358:	d5fb      	bpl.n	8006352 <_printf_i+0x1c2>
 800635a:	8019      	strh	r1, [r3, #0]
 800635c:	2300      	movs	r3, #0
 800635e:	4615      	mov	r5, r2
 8006360:	6123      	str	r3, [r4, #16]
 8006362:	e7bc      	b.n	80062de <_printf_i+0x14e>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	2100      	movs	r1, #0
 8006368:	1d1a      	adds	r2, r3, #4
 800636a:	602a      	str	r2, [r5, #0]
 800636c:	681d      	ldr	r5, [r3, #0]
 800636e:	6862      	ldr	r2, [r4, #4]
 8006370:	4628      	mov	r0, r5
 8006372:	f000 f859 	bl	8006428 <memchr>
 8006376:	b108      	cbz	r0, 800637c <_printf_i+0x1ec>
 8006378:	1b40      	subs	r0, r0, r5
 800637a:	6060      	str	r0, [r4, #4]
 800637c:	6863      	ldr	r3, [r4, #4]
 800637e:	6123      	str	r3, [r4, #16]
 8006380:	2300      	movs	r3, #0
 8006382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006386:	e7aa      	b.n	80062de <_printf_i+0x14e>
 8006388:	462a      	mov	r2, r5
 800638a:	4649      	mov	r1, r9
 800638c:	4640      	mov	r0, r8
 800638e:	6923      	ldr	r3, [r4, #16]
 8006390:	47d0      	blx	sl
 8006392:	3001      	adds	r0, #1
 8006394:	d0ad      	beq.n	80062f2 <_printf_i+0x162>
 8006396:	6823      	ldr	r3, [r4, #0]
 8006398:	079b      	lsls	r3, r3, #30
 800639a:	d413      	bmi.n	80063c4 <_printf_i+0x234>
 800639c:	68e0      	ldr	r0, [r4, #12]
 800639e:	9b03      	ldr	r3, [sp, #12]
 80063a0:	4298      	cmp	r0, r3
 80063a2:	bfb8      	it	lt
 80063a4:	4618      	movlt	r0, r3
 80063a6:	e7a6      	b.n	80062f6 <_printf_i+0x166>
 80063a8:	2301      	movs	r3, #1
 80063aa:	4632      	mov	r2, r6
 80063ac:	4649      	mov	r1, r9
 80063ae:	4640      	mov	r0, r8
 80063b0:	47d0      	blx	sl
 80063b2:	3001      	adds	r0, #1
 80063b4:	d09d      	beq.n	80062f2 <_printf_i+0x162>
 80063b6:	3501      	adds	r5, #1
 80063b8:	68e3      	ldr	r3, [r4, #12]
 80063ba:	9903      	ldr	r1, [sp, #12]
 80063bc:	1a5b      	subs	r3, r3, r1
 80063be:	42ab      	cmp	r3, r5
 80063c0:	dcf2      	bgt.n	80063a8 <_printf_i+0x218>
 80063c2:	e7eb      	b.n	800639c <_printf_i+0x20c>
 80063c4:	2500      	movs	r5, #0
 80063c6:	f104 0619 	add.w	r6, r4, #25
 80063ca:	e7f5      	b.n	80063b8 <_printf_i+0x228>
 80063cc:	080072c3 	.word	0x080072c3
 80063d0:	080072d4 	.word	0x080072d4

080063d4 <memmove>:
 80063d4:	4288      	cmp	r0, r1
 80063d6:	b510      	push	{r4, lr}
 80063d8:	eb01 0402 	add.w	r4, r1, r2
 80063dc:	d902      	bls.n	80063e4 <memmove+0x10>
 80063de:	4284      	cmp	r4, r0
 80063e0:	4623      	mov	r3, r4
 80063e2:	d807      	bhi.n	80063f4 <memmove+0x20>
 80063e4:	1e43      	subs	r3, r0, #1
 80063e6:	42a1      	cmp	r1, r4
 80063e8:	d008      	beq.n	80063fc <memmove+0x28>
 80063ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063f2:	e7f8      	b.n	80063e6 <memmove+0x12>
 80063f4:	4601      	mov	r1, r0
 80063f6:	4402      	add	r2, r0
 80063f8:	428a      	cmp	r2, r1
 80063fa:	d100      	bne.n	80063fe <memmove+0x2a>
 80063fc:	bd10      	pop	{r4, pc}
 80063fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006406:	e7f7      	b.n	80063f8 <memmove+0x24>

08006408 <_sbrk_r>:
 8006408:	b538      	push	{r3, r4, r5, lr}
 800640a:	2300      	movs	r3, #0
 800640c:	4d05      	ldr	r5, [pc, #20]	; (8006424 <_sbrk_r+0x1c>)
 800640e:	4604      	mov	r4, r0
 8006410:	4608      	mov	r0, r1
 8006412:	602b      	str	r3, [r5, #0]
 8006414:	f7fc f844 	bl	80024a0 <_sbrk>
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d102      	bne.n	8006422 <_sbrk_r+0x1a>
 800641c:	682b      	ldr	r3, [r5, #0]
 800641e:	b103      	cbz	r3, 8006422 <_sbrk_r+0x1a>
 8006420:	6023      	str	r3, [r4, #0]
 8006422:	bd38      	pop	{r3, r4, r5, pc}
 8006424:	200007d4 	.word	0x200007d4

08006428 <memchr>:
 8006428:	4603      	mov	r3, r0
 800642a:	b510      	push	{r4, lr}
 800642c:	b2c9      	uxtb	r1, r1
 800642e:	4402      	add	r2, r0
 8006430:	4293      	cmp	r3, r2
 8006432:	4618      	mov	r0, r3
 8006434:	d101      	bne.n	800643a <memchr+0x12>
 8006436:	2000      	movs	r0, #0
 8006438:	e003      	b.n	8006442 <memchr+0x1a>
 800643a:	7804      	ldrb	r4, [r0, #0]
 800643c:	3301      	adds	r3, #1
 800643e:	428c      	cmp	r4, r1
 8006440:	d1f6      	bne.n	8006430 <memchr+0x8>
 8006442:	bd10      	pop	{r4, pc}

08006444 <memcpy>:
 8006444:	440a      	add	r2, r1
 8006446:	4291      	cmp	r1, r2
 8006448:	f100 33ff 	add.w	r3, r0, #4294967295
 800644c:	d100      	bne.n	8006450 <memcpy+0xc>
 800644e:	4770      	bx	lr
 8006450:	b510      	push	{r4, lr}
 8006452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006456:	4291      	cmp	r1, r2
 8006458:	f803 4f01 	strb.w	r4, [r3, #1]!
 800645c:	d1f9      	bne.n	8006452 <memcpy+0xe>
 800645e:	bd10      	pop	{r4, pc}

08006460 <_realloc_r>:
 8006460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006464:	4680      	mov	r8, r0
 8006466:	4614      	mov	r4, r2
 8006468:	460e      	mov	r6, r1
 800646a:	b921      	cbnz	r1, 8006476 <_realloc_r+0x16>
 800646c:	4611      	mov	r1, r2
 800646e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006472:	f7ff bc37 	b.w	8005ce4 <_malloc_r>
 8006476:	b92a      	cbnz	r2, 8006484 <_realloc_r+0x24>
 8006478:	f7ff fbcc 	bl	8005c14 <_free_r>
 800647c:	4625      	mov	r5, r4
 800647e:	4628      	mov	r0, r5
 8006480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006484:	f000 f81b 	bl	80064be <_malloc_usable_size_r>
 8006488:	4284      	cmp	r4, r0
 800648a:	4607      	mov	r7, r0
 800648c:	d802      	bhi.n	8006494 <_realloc_r+0x34>
 800648e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006492:	d812      	bhi.n	80064ba <_realloc_r+0x5a>
 8006494:	4621      	mov	r1, r4
 8006496:	4640      	mov	r0, r8
 8006498:	f7ff fc24 	bl	8005ce4 <_malloc_r>
 800649c:	4605      	mov	r5, r0
 800649e:	2800      	cmp	r0, #0
 80064a0:	d0ed      	beq.n	800647e <_realloc_r+0x1e>
 80064a2:	42bc      	cmp	r4, r7
 80064a4:	4622      	mov	r2, r4
 80064a6:	4631      	mov	r1, r6
 80064a8:	bf28      	it	cs
 80064aa:	463a      	movcs	r2, r7
 80064ac:	f7ff ffca 	bl	8006444 <memcpy>
 80064b0:	4631      	mov	r1, r6
 80064b2:	4640      	mov	r0, r8
 80064b4:	f7ff fbae 	bl	8005c14 <_free_r>
 80064b8:	e7e1      	b.n	800647e <_realloc_r+0x1e>
 80064ba:	4635      	mov	r5, r6
 80064bc:	e7df      	b.n	800647e <_realloc_r+0x1e>

080064be <_malloc_usable_size_r>:
 80064be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064c2:	1f18      	subs	r0, r3, #4
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	bfbc      	itt	lt
 80064c8:	580b      	ldrlt	r3, [r1, r0]
 80064ca:	18c0      	addlt	r0, r0, r3
 80064cc:	4770      	bx	lr
	...

080064d0 <_init>:
 80064d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d2:	bf00      	nop
 80064d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064d6:	bc08      	pop	{r3}
 80064d8:	469e      	mov	lr, r3
 80064da:	4770      	bx	lr

080064dc <_fini>:
 80064dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064de:	bf00      	nop
 80064e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064e2:	bc08      	pop	{r3}
 80064e4:	469e      	mov	lr, r3
 80064e6:	4770      	bx	lr
